"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiProvider: () => (/* binding */ ApiProvider),\n/* harmony export */   QueryStatus: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.QueryStatus),\n/* harmony export */   UNINITIALIZED_VALUE: () => (/* binding */ UNINITIALIZED_VALUE),\n/* harmony export */   buildCreateApi: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.buildCreateApi),\n/* harmony export */   copyWithStructuralSharing: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.copyWithStructuralSharing),\n/* harmony export */   coreModule: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.coreModule),\n/* harmony export */   coreModuleName: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.coreModuleName),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   defaultSerializeQueryArgs: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.defaultSerializeQueryArgs),\n/* harmony export */   fakeBaseQuery: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.fakeBaseQuery),\n/* harmony export */   fetchBaseQuery: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.fetchBaseQuery),\n/* harmony export */   reactHooksModule: () => (/* binding */ reactHooksModule),\n/* harmony export */   reactHooksModuleName: () => (/* binding */ reactHooksModuleName),\n/* harmony export */   retry: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.retry),\n/* harmony export */   setupListeners: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.setupListeners),\n/* harmony export */   skipToken: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @reduxjs/toolkit/query */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ \"(ssr)/./node_modules/react-redux/dist/react-redux.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\nvar _excluded = [\"batch\", \"hooks\", \"createSelector\", \"unstable__sideEffectsInRender\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n// src/query/react/index.ts\n\n\n// src/query/react/module.ts\n\n\n\n\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n  return e.type === \"query\" /* query */;\n}\n\nfunction isMutationDefinition(e) {\n  return e.type === \"mutation\" /* mutation */;\n}\n\n// src/query/tsHelpers.ts\nfunction safeAssign(target) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  return Object.assign.apply(Object, [target].concat(args));\n}\n\n// src/query/utils/capitalize.ts\nfunction capitalize(str) {\n  return str.replace(str[0], str[0].toUpperCase());\n}\n\n// src/query/core/rtkImports.ts\n\n\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n  var count = 0;\n  for (var _key in obj) {\n    count++;\n  }\n  return count;\n}\n\n// src/query/react/buildHooks.ts\n\n\n\n\n\n\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = function defaultSerializeQueryArgs(_ref) {\n  var endpointName = _ref.endpointName,\n    queryArgs = _ref.queryArgs;\n  var serialized = \"\";\n  var cached = cache === null || cache === void 0 ? void 0 : cache.get(queryArgs);\n  if (typeof cached === \"string\") {\n    serialized = cached;\n  } else {\n    var stringified = JSON.stringify(queryArgs, function (key, value) {\n      value = typeof value === \"bigint\" ? {\n        $bigint: value.toString()\n      } : value;\n      value = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\n        acc[key2] = value[key2];\n        return acc;\n      }, {}) : value;\n      return value;\n    });\n    if ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(queryArgs)) {\n      cache === null || cache === void 0 || cache.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return \"\".concat(endpointName, \"(\").concat(serialized, \")\");\n};\n\n// src/query/react/constants.ts\nvar UNINITIALIZED_VALUE = Symbol();\n\n// src/query/react/useSerializedStableValue.ts\n\nfunction useStableQueryArgs(queryArgs, serialize, endpointDefinition, endpointName) {\n  var incoming = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      queryArgs: queryArgs,\n      serialized: _typeof(queryArgs) == \"object\" ? serialize({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      }) : queryArgs\n    };\n  }, [queryArgs, serialize, endpointDefinition, endpointName]);\n  var cache2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(incoming);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (cache2.current.serialized !== incoming.serialized) {\n      cache2.current = incoming;\n    }\n  }, [incoming]);\n  return cache2.current.serialized === incoming.serialized ? cache2.current.queryArgs : queryArgs;\n}\n\n// src/query/react/useShallowStableValue.ts\n\n\nfunction useShallowStableValue(value) {\n  var cache2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (!(0,react_redux__WEBPACK_IMPORTED_MODULE_2__.shallowEqual)(cache2.current, value)) {\n      cache2.current = value;\n    }\n  }, [value]);\n  return (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.shallowEqual)(cache2.current, value) ? cache2.current : value;\n}\n\n// src/query/react/buildHooks.ts\nvar canUseDOM = function canUseDOM() {\n  return !!( false && 0);\n};\nvar isDOM = /* @__PURE__ */canUseDOM();\nvar isRunningInReactNative = function isRunningInReactNative() {\n  return typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\n};\nvar isReactNative = /* @__PURE__ */isRunningInReactNative();\nvar getUseIsomorphicLayoutEffect = function getUseIsomorphicLayoutEffect() {\n  return isDOM || isReactNative ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n};\nvar useIsomorphicLayoutEffect = /* @__PURE__ */getUseIsomorphicLayoutEffect();\nvar noPendingQueryStateSelector = function noPendingQueryStateSelector(selected) {\n  if (selected.isUninitialized) {\n    return _objectSpread(_objectSpread({}, selected), {}, {\n      isUninitialized: false,\n      isFetching: true,\n      isLoading: selected.data !== void 0 ? false : true,\n      status: _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.QueryStatus.pending\n    });\n  }\n  return selected;\n};\nfunction buildHooks(_ref2) {\n  var api = _ref2.api,\n    _ref2$moduleOptions = _ref2.moduleOptions,\n    batch = _ref2$moduleOptions.batch,\n    _ref2$moduleOptions$h = _ref2$moduleOptions.hooks,\n    useDispatch = _ref2$moduleOptions$h.useDispatch,\n    useSelector = _ref2$moduleOptions$h.useSelector,\n    useStore = _ref2$moduleOptions$h.useStore,\n    unstable__sideEffectsInRender = _ref2$moduleOptions.unstable__sideEffectsInRender,\n    createSelector2 = _ref2$moduleOptions.createSelector,\n    serializeQueryArgs = _ref2.serializeQueryArgs,\n    context = _ref2.context;\n  var usePossiblyImmediateEffect = unstable__sideEffectsInRender ? function (cb) {\n    return cb();\n  } : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n  return {\n    buildQueryHooks: buildQueryHooks,\n    buildMutationHook: buildMutationHook,\n    usePrefetch: usePrefetch\n  };\n  function queryStatePreSelector(currentState, lastResult, queryArgs) {\n    var _lastResult, _lastResult3;\n    if ((_lastResult = lastResult) !== null && _lastResult !== void 0 && _lastResult.endpointName && currentState.isUninitialized) {\n      var _lastResult2 = lastResult,\n        endpointName = _lastResult2.endpointName;\n      var endpointDefinition = context.endpointDefinitions[endpointName];\n      if (serializeQueryArgs({\n        queryArgs: lastResult.originalArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      }) === serializeQueryArgs({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      })) lastResult = void 0;\n    }\n    var data = currentState.isSuccess ? currentState.data : (_lastResult3 = lastResult) === null || _lastResult3 === void 0 ? void 0 : _lastResult3.data;\n    if (data === void 0) data = currentState.data;\n    var hasData = data !== void 0;\n    var isFetching = currentState.isLoading;\n    var isLoading = (!lastResult || lastResult.isLoading || lastResult.isUninitialized) && !hasData && isFetching;\n    var isSuccess = currentState.isSuccess || isFetching && hasData;\n    return _objectSpread(_objectSpread({}, currentState), {}, {\n      data: data,\n      currentData: currentState.data,\n      isFetching: isFetching,\n      isLoading: isLoading,\n      isSuccess: isSuccess\n    });\n  }\n  function usePrefetch(endpointName, defaultOptions) {\n    var dispatch = useDispatch();\n    var stableDefaultOptions = useShallowStableValue(defaultOptions);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (arg, options) {\n      return dispatch(api.util.prefetch(endpointName, arg, _objectSpread(_objectSpread({}, stableDefaultOptions), options)));\n    }, [endpointName, dispatch, stableDefaultOptions]);\n  }\n  function buildQueryHooks(name) {\n    var useQuerySubscription = function useQuerySubscription(arg) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        refetchOnReconnect = _ref3.refetchOnReconnect,\n        refetchOnFocus = _ref3.refetchOnFocus,\n        refetchOnMountOrArgChange = _ref3.refetchOnMountOrArgChange,\n        _ref3$skip = _ref3.skip,\n        skip = _ref3$skip === void 0 ? false : _ref3$skip,\n        _ref3$pollingInterval = _ref3.pollingInterval,\n        pollingInterval = _ref3$pollingInterval === void 0 ? 0 : _ref3$pollingInterval,\n        _ref3$skipPollingIfUn = _ref3.skipPollingIfUnfocused,\n        skipPollingIfUnfocused = _ref3$skipPollingIfUn === void 0 ? false : _ref3$skipPollingIfUn;\n      var initiate = api.endpoints[name].initiate;\n      var dispatch = useDispatch();\n      var subscriptionSelectorsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n      if (!subscriptionSelectorsRef.current) {\n        var returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n        if (true) {\n          if (_typeof(returnedValue) !== \"object\" || typeof (returnedValue === null || returnedValue === void 0 ? void 0 : returnedValue.type) === \"string\") {\n            throw new Error( false ? 0 : \"Warning: Middleware for RTK-Query API at reducerPath \\\"\".concat(api.reducerPath, \"\\\" has not been added to the store.\\n    You must add the middleware for RTK-Query to function correctly!\"));\n          }\n        }\n        subscriptionSelectorsRef.current = returnedValue;\n      }\n      var stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken : arg,\n      // Even if the user provided a per-endpoint `serializeQueryArgs` with\n      // a consistent return value, _here_ we want to use the default behavior\n      // so we can tell if _anything_ actually changed. Otherwise, we can end up\n      // with a case where the query args did change but the serialization doesn't,\n      // and then we never try to initiate a refetch.\n      defaultSerializeQueryArgs, context.endpointDefinitions[name], name);\n      var stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect: refetchOnReconnect,\n        refetchOnFocus: refetchOnFocus,\n        pollingInterval: pollingInterval,\n        skipPollingIfUnfocused: skipPollingIfUnfocused\n      });\n      var lastRenderHadSubscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n      var promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n      var _ref4 = promiseRef.current || {},\n        queryCacheKey = _ref4.queryCacheKey,\n        requestId = _ref4.requestId;\n      var currentRenderHasSubscription = false;\n      if (queryCacheKey && requestId) {\n        currentRenderHasSubscription = subscriptionSelectorsRef.current.isRequestSubscribed(queryCacheKey, requestId);\n      }\n      var subscriptionRemoved = !currentRenderHasSubscription && lastRenderHadSubscription.current;\n      usePossiblyImmediateEffect(function () {\n        lastRenderHadSubscription.current = currentRenderHasSubscription;\n      });\n      usePossiblyImmediateEffect(function () {\n        if (subscriptionRemoved) {\n          promiseRef.current = void 0;\n        }\n      }, [subscriptionRemoved]);\n      usePossiblyImmediateEffect(function () {\n        var _promiseRef$current;\n        var lastPromise = promiseRef.current;\n        if (typeof process !== \"undefined\" && false) {}\n        if (stableArg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken) {\n          lastPromise === null || lastPromise === void 0 || lastPromise.unsubscribe();\n          promiseRef.current = void 0;\n          return;\n        }\n        var lastSubscriptionOptions = (_promiseRef$current = promiseRef.current) === null || _promiseRef$current === void 0 ? void 0 : _promiseRef$current.subscriptionOptions;\n        if (!lastPromise || lastPromise.arg !== stableArg) {\n          lastPromise === null || lastPromise === void 0 || lastPromise.unsubscribe();\n          var promise = dispatch(initiate(stableArg, {\n            subscriptionOptions: stableSubscriptionOptions,\n            forceRefetch: refetchOnMountOrArgChange\n          }));\n          promiseRef.current = promise;\n        } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [dispatch, initiate, refetchOnMountOrArgChange, stableArg, stableSubscriptionOptions, subscriptionRemoved]);\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        return function () {\n          var _promiseRef$current2;\n          (_promiseRef$current2 = promiseRef.current) === null || _promiseRef$current2 === void 0 || _promiseRef$current2.unsubscribe();\n          promiseRef.current = void 0;\n        };\n      }, []);\n      return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return {\n          /**\n           * A method to manually refetch data for the query\n           */\n          refetch: function refetch() {\n            var _promiseRef$current3;\n            if (!promiseRef.current) throw new Error( false ? 0 : \"Cannot refetch a query that has not been started yet.\");\n            return (_promiseRef$current3 = promiseRef.current) === null || _promiseRef$current3 === void 0 ? void 0 : _promiseRef$current3.refetch();\n          }\n        };\n      }, []);\n    };\n    var useLazyQuerySubscription = function useLazyQuerySubscription() {\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        refetchOnReconnect = _ref5.refetchOnReconnect,\n        refetchOnFocus = _ref5.refetchOnFocus,\n        _ref5$pollingInterval = _ref5.pollingInterval,\n        pollingInterval = _ref5$pollingInterval === void 0 ? 0 : _ref5$pollingInterval,\n        _ref5$skipPollingIfUn = _ref5.skipPollingIfUnfocused,\n        skipPollingIfUnfocused = _ref5$skipPollingIfUn === void 0 ? false : _ref5$skipPollingIfUn;\n      var initiate = api.endpoints[name].initiate;\n      var dispatch = useDispatch();\n      var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(UNINITIALIZED_VALUE),\n        _useState2 = _slicedToArray(_useState, 2),\n        arg = _useState2[0],\n        setArg = _useState2[1];\n      var promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n      var stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect: refetchOnReconnect,\n        refetchOnFocus: refetchOnFocus,\n        pollingInterval: pollingInterval,\n        skipPollingIfUnfocused: skipPollingIfUnfocused\n      });\n      usePossiblyImmediateEffect(function () {\n        var _promiseRef$current4;\n        var lastSubscriptionOptions = (_promiseRef$current4 = promiseRef.current) === null || _promiseRef$current4 === void 0 ? void 0 : _promiseRef$current4.subscriptionOptions;\n        if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          var _promiseRef$current5;\n          (_promiseRef$current5 = promiseRef.current) === null || _promiseRef$current5 === void 0 || _promiseRef$current5.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [stableSubscriptionOptions]);\n      var subscriptionOptionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(stableSubscriptionOptions);\n      usePossiblyImmediateEffect(function () {\n        subscriptionOptionsRef.current = stableSubscriptionOptions;\n      }, [stableSubscriptionOptions]);\n      var trigger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (arg2) {\n        var preferCacheValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var promise;\n        batch(function () {\n          var _promiseRef$current6;\n          (_promiseRef$current6 = promiseRef.current) === null || _promiseRef$current6 === void 0 || _promiseRef$current6.unsubscribe();\n          promiseRef.current = promise = dispatch(initiate(arg2, {\n            subscriptionOptions: subscriptionOptionsRef.current,\n            forceRefetch: !preferCacheValue\n          }));\n          setArg(arg2);\n        });\n        return promise;\n      }, [dispatch, initiate]);\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        return function () {\n          var _promiseRef$current7;\n          promiseRef === null || promiseRef === void 0 || (_promiseRef$current7 = promiseRef.current) === null || _promiseRef$current7 === void 0 || _promiseRef$current7.unsubscribe();\n        };\n      }, []);\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {\n          trigger(arg, true);\n        }\n      }, [arg, trigger]);\n      return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return [trigger, arg];\n      }, [trigger, arg]);\n    };\n    var useQueryState = function useQueryState(arg) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref6$skip = _ref6.skip,\n        skip = _ref6$skip === void 0 ? false : _ref6$skip,\n        selectFromResult = _ref6.selectFromResult;\n      var select = api.endpoints[name].select;\n      var stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken : arg, serializeQueryArgs, context.endpointDefinitions[name], name);\n      var lastValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n      var selectDefaultResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return createSelector2([select(stableArg), function (_, lastResult) {\n          return lastResult;\n        }, function (_) {\n          return stableArg;\n        }], queryStatePreSelector, {\n          memoizeOptions: {\n            resultEqualityCheck: react_redux__WEBPACK_IMPORTED_MODULE_2__.shallowEqual\n          }\n        });\n      }, [select, stableArg]);\n      var querySelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return selectFromResult ? createSelector2([selectDefaultResult], selectFromResult, {\n          devModeChecks: {\n            identityFunctionCheck: \"never\"\n          }\n        }) : selectDefaultResult;\n      }, [selectDefaultResult, selectFromResult]);\n      var currentState = useSelector(function (state) {\n        return querySelector(state, lastValue.current);\n      }, react_redux__WEBPACK_IMPORTED_MODULE_2__.shallowEqual);\n      var store = useStore();\n      var newLastValue = selectDefaultResult(store.getState(), lastValue.current);\n      useIsomorphicLayoutEffect(function () {\n        lastValue.current = newLastValue;\n      }, [newLastValue]);\n      return currentState;\n    };\n    return {\n      useQueryState: useQueryState,\n      useQuerySubscription: useQuerySubscription,\n      useLazyQuerySubscription: useLazyQuerySubscription,\n      useLazyQuery: function useLazyQuery(options) {\n        var _useLazyQuerySubscrip = useLazyQuerySubscription(options),\n          _useLazyQuerySubscrip2 = _slicedToArray(_useLazyQuerySubscrip, 2),\n          trigger = _useLazyQuerySubscrip2[0],\n          arg = _useLazyQuerySubscrip2[1];\n        var queryStateResults = useQueryState(arg, _objectSpread(_objectSpread({}, options), {}, {\n          skip: arg === UNINITIALIZED_VALUE\n        }));\n        var info = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n          return {\n            lastArg: arg\n          };\n        }, [arg]);\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n          return [trigger, queryStateResults, info];\n        }, [trigger, queryStateResults, info]);\n      },\n      useQuery: function useQuery(arg, options) {\n        var querySubscriptionResults = useQuerySubscription(arg, options);\n        var queryStateResults = useQueryState(arg, _objectSpread({\n          selectFromResult: arg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken || options !== null && options !== void 0 && options.skip ? void 0 : noPendingQueryStateSelector\n        }, options));\n        var data = queryStateResults.data,\n          status = queryStateResults.status,\n          isLoading = queryStateResults.isLoading,\n          isSuccess = queryStateResults.isSuccess,\n          isError = queryStateResults.isError,\n          error = queryStateResults.error;\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)({\n          data: data,\n          status: status,\n          isLoading: isLoading,\n          isSuccess: isSuccess,\n          isError: isError,\n          error: error\n        });\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n          return _objectSpread(_objectSpread({}, queryStateResults), querySubscriptionResults);\n        }, [queryStateResults, querySubscriptionResults]);\n      }\n    };\n  }\n  function buildMutationHook(name) {\n    return function () {\n      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        selectFromResult = _ref7.selectFromResult,\n        fixedCacheKey = _ref7.fixedCacheKey;\n      var _api$endpoints$name = api.endpoints[name],\n        select = _api$endpoints$name.select,\n        initiate = _api$endpoints$name.initiate;\n      var dispatch = useDispatch();\n      var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        promise = _useState4[0],\n        setPromise = _useState4[1];\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        return function () {\n          if (!(promise !== null && promise !== void 0 && promise.arg.fixedCacheKey)) {\n            promise === null || promise === void 0 || promise.reset();\n          }\n        };\n      }, [promise]);\n      var triggerMutation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (arg) {\n        var promise2 = dispatch(initiate(arg, {\n          fixedCacheKey: fixedCacheKey\n        }));\n        setPromise(promise2);\n        return promise2;\n      }, [dispatch, initiate, fixedCacheKey]);\n      var _ref8 = promise || {},\n        requestId = _ref8.requestId;\n      var selectDefaultResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return select({\n          fixedCacheKey: fixedCacheKey,\n          requestId: promise === null || promise === void 0 ? void 0 : promise.requestId\n        });\n      }, [fixedCacheKey, promise, select]);\n      var mutationSelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return selectFromResult ? createSelector2([selectDefaultResult], selectFromResult) : selectDefaultResult;\n      }, [selectFromResult, selectDefaultResult]);\n      var currentState = useSelector(mutationSelector, react_redux__WEBPACK_IMPORTED_MODULE_2__.shallowEqual);\n      var originalArgs = fixedCacheKey == null ? promise === null || promise === void 0 ? void 0 : promise.arg.originalArgs : void 0;\n      var reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n        batch(function () {\n          if (promise) {\n            setPromise(void 0);\n          }\n          if (fixedCacheKey) {\n            dispatch(api.internalActions.removeMutationResult({\n              requestId: requestId,\n              fixedCacheKey: fixedCacheKey\n            }));\n          }\n        });\n      }, [dispatch, fixedCacheKey, promise, requestId]);\n      var endpointName = currentState.endpointName,\n        data = currentState.data,\n        status = currentState.status,\n        isLoading = currentState.isLoading,\n        isSuccess = currentState.isSuccess,\n        isError = currentState.isError,\n        error = currentState.error;\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)({\n        endpointName: endpointName,\n        data: data,\n        status: status,\n        isLoading: isLoading,\n        isSuccess: isSuccess,\n        isError: isError,\n        error: error\n      });\n      var finalState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return _objectSpread(_objectSpread({}, currentState), {}, {\n          originalArgs: originalArgs,\n          reset: reset\n        });\n      }, [currentState, originalArgs, reset]);\n      return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return [triggerMutation, finalState];\n      }, [triggerMutation, finalState]);\n    };\n  }\n}\n\n// src/query/react/module.ts\nvar reactHooksModuleName = /* @__PURE__ */Symbol();\nvar reactHooksModule = function reactHooksModule() {\n  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref9$batch = _ref9.batch,\n    batch = _ref9$batch === void 0 ? react_redux__WEBPACK_IMPORTED_MODULE_2__.batch : _ref9$batch,\n    _ref9$hooks = _ref9.hooks,\n    hooks = _ref9$hooks === void 0 ? {\n      useDispatch: react_redux__WEBPACK_IMPORTED_MODULE_2__.useDispatch,\n      useSelector: react_redux__WEBPACK_IMPORTED_MODULE_2__.useSelector,\n      useStore: react_redux__WEBPACK_IMPORTED_MODULE_2__.useStore\n    } : _ref9$hooks,\n    _ref9$createSelector = _ref9.createSelector,\n    createSelector2 = _ref9$createSelector === void 0 ? reselect__WEBPACK_IMPORTED_MODULE_4__.createSelector : _ref9$createSelector,\n    _ref9$unstable__sideE = _ref9.unstable__sideEffectsInRender,\n    unstable__sideEffectsInRender = _ref9$unstable__sideE === void 0 ? false : _ref9$unstable__sideE,\n    rest = _objectWithoutProperties(_ref9, _excluded);\n  if (true) {\n    var hookNames = [\"useDispatch\", \"useSelector\", \"useStore\"];\n    var warned = false;\n    for (var _i = 0, _hookNames = hookNames; _i < _hookNames.length; _i++) {\n      var hookName = _hookNames[_i];\n      if (countObjectKeys(rest) > 0) {\n        if (rest[hookName]) {\n          if (!warned) {\n            console.warn(\"As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:\\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`\");\n            warned = true;\n          }\n        }\n        hooks[hookName] = rest[hookName];\n      }\n      if (typeof hooks[hookName] !== \"function\") {\n        throw new Error( false ? 0 : \"When using custom hooks for context, all \".concat(hookNames.length, \" hooks need to be provided: \").concat(hookNames.join(\", \"), \".\\nHook \").concat(hookName, \" was either not provided or not a function.\"));\n      }\n    }\n  }\n  return {\n    name: reactHooksModuleName,\n    init: function init(api, _ref10, context) {\n      var serializeQueryArgs = _ref10.serializeQueryArgs;\n      var anyApi = api;\n      var _buildHooks = buildHooks({\n          api: api,\n          moduleOptions: {\n            batch: batch,\n            hooks: hooks,\n            unstable__sideEffectsInRender: unstable__sideEffectsInRender,\n            createSelector: createSelector2\n          },\n          serializeQueryArgs: serializeQueryArgs,\n          context: context\n        }),\n        buildQueryHooks = _buildHooks.buildQueryHooks,\n        buildMutationHook = _buildHooks.buildMutationHook,\n        usePrefetch = _buildHooks.usePrefetch;\n      safeAssign(anyApi, {\n        usePrefetch: usePrefetch\n      });\n      safeAssign(context, {\n        batch: batch\n      });\n      return {\n        injectEndpoint: function injectEndpoint(endpointName, definition) {\n          if (isQueryDefinition(definition)) {\n            var _buildQueryHooks = buildQueryHooks(endpointName),\n              useQuery = _buildQueryHooks.useQuery,\n              useLazyQuery = _buildQueryHooks.useLazyQuery,\n              useLazyQuerySubscription = _buildQueryHooks.useLazyQuerySubscription,\n              useQueryState = _buildQueryHooks.useQueryState,\n              useQuerySubscription = _buildQueryHooks.useQuerySubscription;\n            safeAssign(anyApi.endpoints[endpointName], {\n              useQuery: useQuery,\n              useLazyQuery: useLazyQuery,\n              useLazyQuerySubscription: useLazyQuerySubscription,\n              useQueryState: useQueryState,\n              useQuerySubscription: useQuerySubscription\n            });\n            api[\"use\".concat(capitalize(endpointName), \"Query\")] = useQuery;\n            api[\"useLazy\".concat(capitalize(endpointName), \"Query\")] = useLazyQuery;\n          } else if (isMutationDefinition(definition)) {\n            var useMutation = buildMutationHook(endpointName);\n            safeAssign(anyApi.endpoints[endpointName], {\n              useMutation: useMutation\n            });\n            api[\"use\".concat(capitalize(endpointName), \"Mutation\")] = useMutation;\n          }\n        }\n      };\n    }\n  };\n};\n\n// src/query/react/index.ts\n\n\n// src/query/react/ApiProvider.tsx\n\n\n\n\n\n\n\nfunction ApiProvider(props) {\n  var context = props.context || react_redux__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext;\n  var existingContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n  if (existingContext) {\n    throw new Error( false ? 0 : \"Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.\");\n  }\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState(function () {\n      return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__.configureStore)({\n        reducer: _defineProperty({}, props.api.reducerPath, props.api.reducer),\n        middleware: function middleware(gDM) {\n          return gDM().concat(props.api.middleware);\n        }\n      });\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    store = _React$useState2[0];\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return props.setupListeners === false ? void 0 : (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.setupListeners)(store.dispatch, props.setupListeners);\n  }, [props.setupListeners, store.dispatch]);\n  return /* @__PURE__ */react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_redux__WEBPACK_IMPORTED_MODULE_2__.Provider, {\n    store: store,\n    context: context\n  }, props.children);\n}\n\n// src/query/react/index.ts\nvar createApi = /* @__PURE__ */(0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.buildCreateApi)((0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.coreModule)(), reactHooksModule());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3F1ZXJ5L3JlYWN0L3J0ay1xdWVyeS1yZWFjdC5tb2Rlcm4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNvRTs7QUFFcEU7QUFDc0Y7QUFDNkM7QUFDdEU7O0FBRTdEO0FBQ0EsU0FBU2MsaUJBQWlCQSxDQUFDQyxDQUFDLEVBQUU7RUFDNUIsT0FBT0EsQ0FBQyxDQUFDQyxJQUFJLEtBQUssT0FBTyxDQUFDO0FBQzVCOztBQUNBLFNBQVNDLG9CQUFvQkEsQ0FBQ0YsQ0FBQyxFQUFFO0VBQy9CLE9BQU9BLENBQUMsQ0FBQ0MsSUFBSSxLQUFLLFVBQVUsQ0FBQztBQUMvQjs7QUFFQTtBQUNBLFNBQVNFLFVBQVVBLENBQUNDLE1BQU0sRUFBVztFQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQU5DLElBQUksT0FBQUMsS0FBQSxDQUFBSixJQUFBLE9BQUFBLElBQUEsV0FBQUssS0FBQSxNQUFBQSxLQUFBLEdBQUFMLElBQUEsRUFBQUssS0FBQTtJQUFKRixJQUFJLENBQUFFLEtBQUEsUUFBQUosU0FBQSxDQUFBSSxLQUFBO0VBQUE7RUFDakMsT0FBT0MsTUFBTSxDQUFDQyxNQUFNLENBQUFDLEtBQUEsQ0FBYkYsTUFBTSxHQUFRUCxNQUFNLEVBQUFVLE1BQUEsQ0FBS04sSUFBSSxFQUFDO0FBQ3ZDOztBQUVBO0FBQ0EsU0FBU08sVUFBVUEsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3ZCLE9BQU9BLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUVBLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUNsRDs7QUFFQTtBQUN1Uzs7QUFFdlM7QUFDQSxTQUFTa0IsZUFBZUEsQ0FBQ0MsR0FBRyxFQUFFO0VBQzVCLElBQUlDLEtBQUssR0FBRyxDQUFDO0VBQ2IsS0FBSyxJQUFNQyxJQUFJLElBQUlGLEdBQUcsRUFBRTtJQUN0QkMsS0FBSyxFQUFFO0VBQ1Q7RUFDQSxPQUFPQSxLQUFLO0FBQ2Q7O0FBRUE7QUFDc0Y7QUFDRDtBQUNyQjtBQUMrRTtBQUNuRjs7QUFFNUQ7QUFDQSxJQUFJa0IsS0FBSyxHQUFHQyxPQUFPLEdBQUcsZUFBZ0IsSUFBSUEsT0FBTyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDNUQsSUFBSUMseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUF5QkEsQ0FBQUMsSUFBQSxFQUd2QjtFQUFBLElBRkpDLFlBQVksR0FBQUQsSUFBQSxDQUFaQyxZQUFZO0lBQ1pDLFNBQVMsR0FBQUYsSUFBQSxDQUFURSxTQUFTO0VBRVQsSUFBSUMsVUFBVSxHQUFHLEVBQUU7RUFDbkIsSUFBTUMsTUFBTSxHQUFHUCxLQUFLLGFBQUxBLEtBQUssdUJBQUxBLEtBQUssQ0FBRVEsR0FBRyxDQUFDSCxTQUFTLENBQUM7RUFDcEMsSUFBSSxPQUFPRSxNQUFNLEtBQUssUUFBUSxFQUFFO0lBQzlCRCxVQUFVLEdBQUdDLE1BQU07RUFDckIsQ0FBQyxNQUFNO0lBQ0wsSUFBTUUsV0FBVyxHQUFHQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ04sU0FBUyxFQUFFLFVBQUNPLEdBQUcsRUFBRUMsS0FBSyxFQUFLO01BQzVEQSxLQUFLLEdBQUcsT0FBT0EsS0FBSyxLQUFLLFFBQVEsR0FBRztRQUNsQ0MsT0FBTyxFQUFFRCxLQUFLLENBQUNFLFFBQVEsQ0FBQztNQUMxQixDQUFDLEdBQUdGLEtBQUs7TUFDVEEsS0FBSyxHQUFHbkMsK0RBQWEsQ0FBQ21DLEtBQUssQ0FBQyxHQUFHMUQsTUFBTSxDQUFDNkQsSUFBSSxDQUFDSCxLQUFLLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLFVBQUNDLEdBQUcsRUFBRUMsSUFBSSxFQUFLO1FBQzdFRCxHQUFHLENBQUNDLElBQUksQ0FBQyxHQUFHUCxLQUFLLENBQUNPLElBQUksQ0FBQztRQUN2QixPQUFPRCxHQUFHO01BQ1osQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUdOLEtBQUs7TUFDZCxPQUFPQSxLQUFLO0lBQ2QsQ0FBQyxDQUFDO0lBQ0YsSUFBSW5DLCtEQUFhLENBQUMyQixTQUFTLENBQUMsRUFBRTtNQUM1QkwsS0FBSyxhQUFMQSxLQUFLLGVBQUxBLEtBQUssQ0FBRXFCLEdBQUcsQ0FBQ2hCLFNBQVMsRUFBRUksV0FBVyxDQUFDO0lBQ3BDO0lBQ0FILFVBQVUsR0FBR0csV0FBVztFQUMxQjtFQUNBLFVBQUFuRCxNQUFBLENBQVU4QyxZQUFZLE9BQUE5QyxNQUFBLENBQUlnRCxVQUFVO0FBQ3RDLENBQUM7O0FBRUQ7QUFDQSxJQUFJZ0IsbUJBQW1CLEdBQUdDLE1BQU0sQ0FBQyxDQUFDOztBQUVsQztBQUNtRDtBQUNuRCxTQUFTQyxrQkFBa0JBLENBQUNuQixTQUFTLEVBQUVvQixTQUFTLEVBQUVDLGtCQUFrQixFQUFFdEIsWUFBWSxFQUFFO0VBQ2xGLElBQU11QixRQUFRLEdBQUdsQyw4Q0FBTyxDQUFDO0lBQUEsT0FBTztNQUM5QlksU0FBUyxFQUFUQSxTQUFTO01BQ1RDLFVBQVUsRUFBRXNCLE9BQUEsQ0FBT3ZCLFNBQVMsS0FBSSxRQUFRLEdBQUdvQixTQUFTLENBQUM7UUFDbkRwQixTQUFTLEVBQVRBLFNBQVM7UUFDVHFCLGtCQUFrQixFQUFsQkEsa0JBQWtCO1FBQ2xCdEIsWUFBWSxFQUFaQTtNQUNGLENBQUMsQ0FBQyxHQUFHQztJQUNQLENBQUM7RUFBQSxDQUFDLEVBQUUsQ0FBQ0EsU0FBUyxFQUFFb0IsU0FBUyxFQUFFQyxrQkFBa0IsRUFBRXRCLFlBQVksQ0FBQyxDQUFDO0VBQzdELElBQU15QixNQUFNLEdBQUdsQyw2Q0FBTSxDQUFDZ0MsUUFBUSxDQUFDO0VBQy9CckMsZ0RBQVMsQ0FBQyxZQUFNO0lBQ2QsSUFBSXVDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDeEIsVUFBVSxLQUFLcUIsUUFBUSxDQUFDckIsVUFBVSxFQUFFO01BQ3JEdUIsTUFBTSxDQUFDQyxPQUFPLEdBQUdILFFBQVE7SUFDM0I7RUFDRixDQUFDLEVBQUUsQ0FBQ0EsUUFBUSxDQUFDLENBQUM7RUFDZCxPQUFPRSxNQUFNLENBQUNDLE9BQU8sQ0FBQ3hCLFVBQVUsS0FBS3FCLFFBQVEsQ0FBQ3JCLFVBQVUsR0FBR3VCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDekIsU0FBUyxHQUFHQSxTQUFTO0FBQ2pHOztBQUVBO0FBQ21FO0FBQ3hCO0FBQzNDLFNBQVM0QixxQkFBcUJBLENBQUNwQixLQUFLLEVBQUU7RUFDcEMsSUFBTWdCLE1BQU0sR0FBR0csNkNBQU8sQ0FBQ25CLEtBQUssQ0FBQztFQUM3QmtCLGdEQUFVLENBQUMsWUFBTTtJQUNmLElBQUksQ0FBQ2pDLHlEQUFZLENBQUMrQixNQUFNLENBQUNDLE9BQU8sRUFBRWpCLEtBQUssQ0FBQyxFQUFFO01BQ3hDZ0IsTUFBTSxDQUFDQyxPQUFPLEdBQUdqQixLQUFLO0lBQ3hCO0VBQ0YsQ0FBQyxFQUFFLENBQUNBLEtBQUssQ0FBQyxDQUFDO0VBQ1gsT0FBT2YseURBQVksQ0FBQytCLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFakIsS0FBSyxDQUFDLEdBQUdnQixNQUFNLENBQUNDLE9BQU8sR0FBR2pCLEtBQUs7QUFDckU7O0FBRUE7QUFDQSxJQUFJcUIsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUE7RUFBQSxPQUFTLENBQUMsRUFBRSxNQUF1RSxJQUFJLENBQW9ELENBQUM7QUFBQTtBQUN6SixJQUFJSSxLQUFLLEdBQUcsZUFBZ0JKLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZDLElBQUlLLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBc0JBLENBQUE7RUFBQSxPQUFTLE9BQU9DLFNBQVMsS0FBSyxXQUFXLElBQUlBLFNBQVMsQ0FBQ0MsT0FBTyxLQUFLLGFBQWE7QUFBQTtBQUMxRyxJQUFJQyxhQUFhLEdBQUcsZUFBZ0JILHNCQUFzQixDQUFDLENBQUM7QUFDNUQsSUFBSUksNEJBQTRCLEdBQUcsU0FBL0JBLDRCQUE0QkEsQ0FBQTtFQUFBLE9BQVNMLEtBQUssSUFBSUksYUFBYSxHQUFHbEQsa0RBQWUsR0FBR0QsNENBQVU7QUFBQTtBQUM5RixJQUFJcUQseUJBQXlCLEdBQUcsZUFBZ0JELDRCQUE0QixDQUFDLENBQUM7QUFDOUUsSUFBSUUsMkJBQTJCLEdBQUcsU0FBOUJBLDJCQUEyQkEsQ0FBSUMsUUFBUSxFQUFLO0VBQzlDLElBQUlBLFFBQVEsQ0FBQ0MsZUFBZSxFQUFFO0lBQzVCLE9BQUFDLGFBQUEsQ0FBQUEsYUFBQSxLQUNLRixRQUFRO01BQ1hDLGVBQWUsRUFBRSxLQUFLO01BQ3RCRSxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsU0FBUyxFQUFFSixRQUFRLENBQUNLLElBQUksS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSTtNQUNsREMsTUFBTSxFQUFFbEUsK0RBQVcsQ0FBQ21FO0lBQU87RUFFL0I7RUFDQSxPQUFPUCxRQUFRO0FBQ2pCLENBQUM7QUFDRCxTQUFTUSxVQUFVQSxDQUFBQyxLQUFBLEVBY2hCO0VBQUEsSUFiREMsR0FBRyxHQUFBRCxLQUFBLENBQUhDLEdBQUc7SUFBQUMsbUJBQUEsR0FBQUYsS0FBQSxDQUNIRyxhQUFhO0lBQ1g3SCxLQUFLLEdBQUE0SCxtQkFBQSxDQUFMNUgsS0FBSztJQUFBOEgscUJBQUEsR0FBQUYsbUJBQUEsQ0FDTEcsS0FBSztJQUNIN0gsV0FBVyxHQUFBNEgscUJBQUEsQ0FBWDVILFdBQVc7SUFDWEUsV0FBVyxHQUFBMEgscUJBQUEsQ0FBWDFILFdBQVc7SUFDWEUsUUFBUSxHQUFBd0gscUJBQUEsQ0FBUnhILFFBQVE7SUFFVjBILDZCQUE2QixHQUFBSixtQkFBQSxDQUE3QkksNkJBQTZCO0lBQ2JDLGVBQWUsR0FBQUwsbUJBQUEsQ0FBL0JwSCxjQUFjO0lBRWhCMEgsa0JBQWtCLEdBQUFSLEtBQUEsQ0FBbEJRLGtCQUFrQjtJQUNsQkMsT0FBTyxHQUFBVCxLQUFBLENBQVBTLE9BQU87RUFFUCxJQUFNQywwQkFBMEIsR0FBR0osNkJBQTZCLEdBQUcsVUFBQ0ssRUFBRTtJQUFBLE9BQUtBLEVBQUUsQ0FBQyxDQUFDO0VBQUEsSUFBRzNFLDRDQUFVO0VBQzVGLE9BQU87SUFDTDRFLGVBQWUsRUFBZkEsZUFBZTtJQUNmQyxpQkFBaUIsRUFBakJBLGlCQUFpQjtJQUNqQkMsV0FBVyxFQUFYQTtFQUNGLENBQUM7RUFDRCxTQUFTQyxxQkFBcUJBLENBQUNDLFlBQVksRUFBRUMsVUFBVSxFQUFFbkUsU0FBUyxFQUFFO0lBQUEsSUFBQW9FLFdBQUEsRUFBQUMsWUFBQTtJQUNsRSxJQUFJLENBQUFELFdBQUEsR0FBQUQsVUFBVSxjQUFBQyxXQUFBLGVBQVZBLFdBQUEsQ0FBWXJFLFlBQVksSUFBSW1FLFlBQVksQ0FBQ3hCLGVBQWUsRUFBRTtNQUM1RCxJQUFBNEIsWUFBQSxHQUVJSCxVQUFVO1FBRFpwRSxZQUFZLEdBQUF1RSxZQUFBLENBQVp2RSxZQUFZO01BRWQsSUFBTXNCLGtCQUFrQixHQUFHc0MsT0FBTyxDQUFDWSxtQkFBbUIsQ0FBQ3hFLFlBQVksQ0FBQztNQUNwRSxJQUFJMkQsa0JBQWtCLENBQUM7UUFDckIxRCxTQUFTLEVBQUVtRSxVQUFVLENBQUNLLFlBQVk7UUFDbENuRCxrQkFBa0IsRUFBbEJBLGtCQUFrQjtRQUNsQnRCLFlBQVksRUFBWkE7TUFDRixDQUFDLENBQUMsS0FBSzJELGtCQUFrQixDQUFDO1FBQ3hCMUQsU0FBUyxFQUFUQSxTQUFTO1FBQ1RxQixrQkFBa0IsRUFBbEJBLGtCQUFrQjtRQUNsQnRCLFlBQVksRUFBWkE7TUFDRixDQUFDLENBQUMsRUFBRW9FLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDekI7SUFDQSxJQUFJckIsSUFBSSxHQUFHb0IsWUFBWSxDQUFDTyxTQUFTLEdBQUdQLFlBQVksQ0FBQ3BCLElBQUksSUFBQXVCLFlBQUEsR0FBR0YsVUFBVSxjQUFBRSxZQUFBLHVCQUFWQSxZQUFBLENBQVl2QixJQUFJO0lBQ3hFLElBQUlBLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRUEsSUFBSSxHQUFHb0IsWUFBWSxDQUFDcEIsSUFBSTtJQUM3QyxJQUFNNEIsT0FBTyxHQUFHNUIsSUFBSSxLQUFLLEtBQUssQ0FBQztJQUMvQixJQUFNRixVQUFVLEdBQUdzQixZQUFZLENBQUNyQixTQUFTO0lBQ3pDLElBQU1BLFNBQVMsR0FBRyxDQUFDLENBQUNzQixVQUFVLElBQUlBLFVBQVUsQ0FBQ3RCLFNBQVMsSUFBSXNCLFVBQVUsQ0FBQ3pCLGVBQWUsS0FBSyxDQUFDZ0MsT0FBTyxJQUFJOUIsVUFBVTtJQUMvRyxJQUFNNkIsU0FBUyxHQUFHUCxZQUFZLENBQUNPLFNBQVMsSUFBSTdCLFVBQVUsSUFBSThCLE9BQU87SUFDakUsT0FBQS9CLGFBQUEsQ0FBQUEsYUFBQSxLQUNLdUIsWUFBWTtNQUNmcEIsSUFBSSxFQUFKQSxJQUFJO01BQ0o2QixXQUFXLEVBQUVULFlBQVksQ0FBQ3BCLElBQUk7TUFDOUJGLFVBQVUsRUFBVkEsVUFBVTtNQUNWQyxTQUFTLEVBQVRBLFNBQVM7TUFDVDRCLFNBQVMsRUFBVEE7SUFBUztFQUViO0VBQ0EsU0FBU1QsV0FBV0EsQ0FBQ2pFLFlBQVksRUFBRTZFLGNBQWMsRUFBRTtJQUNqRCxJQUFNQyxRQUFRLEdBQUduSixXQUFXLENBQUMsQ0FBQztJQUM5QixJQUFNb0osb0JBQW9CLEdBQUdsRCxxQkFBcUIsQ0FBQ2dELGNBQWMsQ0FBQztJQUNsRSxPQUFPN0Ysa0RBQVcsQ0FBQyxVQUFDZ0csR0FBRyxFQUFFQyxPQUFPO01BQUEsT0FBS0gsUUFBUSxDQUFDMUIsR0FBRyxDQUFDOEIsSUFBSSxDQUFDQyxRQUFRLENBQUNuRixZQUFZLEVBQUVnRixHQUFHLEVBQUFwQyxhQUFBLENBQUFBLGFBQUEsS0FDNUVtQyxvQkFBb0IsR0FDcEJFLE9BQU8sQ0FDWCxDQUFDLENBQUM7SUFBQSxHQUFFLENBQUNqRixZQUFZLEVBQUU4RSxRQUFRLEVBQUVDLG9CQUFvQixDQUFDLENBQUM7RUFDdEQ7RUFDQSxTQUFTaEIsZUFBZUEsQ0FBQ3FCLElBQUksRUFBRTtJQUM3QixJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQW9CQSxDQUFJTCxHQUFHLEVBT3RCO01BQUEsSUFBQU0sS0FBQSxHQUFBNUksU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQTZJLFNBQUEsR0FBQTdJLFNBQUEsTUFBUCxDQUFDLENBQUM7UUFOSjhJLGtCQUFrQixHQUFBRixLQUFBLENBQWxCRSxrQkFBa0I7UUFDbEJDLGNBQWMsR0FBQUgsS0FBQSxDQUFkRyxjQUFjO1FBQ2RDLHlCQUF5QixHQUFBSixLQUFBLENBQXpCSSx5QkFBeUI7UUFBQUMsVUFBQSxHQUFBTCxLQUFBLENBQ3pCTSxJQUFJO1FBQUpBLElBQUksR0FBQUQsVUFBQSxjQUFHLEtBQUssR0FBQUEsVUFBQTtRQUFBRSxxQkFBQSxHQUFBUCxLQUFBLENBQ1pRLGVBQWU7UUFBZkEsZUFBZSxHQUFBRCxxQkFBQSxjQUFHLENBQUMsR0FBQUEscUJBQUE7UUFBQUUscUJBQUEsR0FBQVQsS0FBQSxDQUNuQlUsc0JBQXNCO1FBQXRCQSxzQkFBc0IsR0FBQUQscUJBQUEsY0FBRyxLQUFLLEdBQUFBLHFCQUFBO01BRTlCLElBQ0VFLFFBQVEsR0FDTjdDLEdBQUcsQ0FBQzhDLFNBQVMsQ0FBQ2QsSUFBSSxDQUFDLENBRHJCYSxRQUFRO01BRVYsSUFBTW5CLFFBQVEsR0FBR25KLFdBQVcsQ0FBQyxDQUFDO01BQzlCLElBQU13Syx3QkFBd0IsR0FBRzNHLDZDQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDaEQsSUFBSSxDQUFDMkcsd0JBQXdCLENBQUN6RSxPQUFPLEVBQUU7UUFDckMsSUFBTTBFLGFBQWEsR0FBR3RCLFFBQVEsQ0FBQzFCLEdBQUcsQ0FBQ2lELGVBQWUsQ0FBQ0MsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO1FBQ25GLElBQUksTUFBdUM7VUFDekMsSUFBSTlFLE9BQUEsQ0FBTzRFLGFBQWEsTUFBSyxRQUFRLElBQUksUUFBT0EsYUFBYSxhQUFiQSxhQUFhLHVCQUFiQSxhQUFhLENBQUUvSixJQUFJLE1BQUssUUFBUSxFQUFFO1lBQ2hGLE1BQU0sSUFBSWtLLEtBQUssQ0FBQyxTQUF3QzFILENBQTJCLDZEQUFBM0IsTUFBQSxDQUE0RGtHLEdBQUcsQ0FBQ29ELFdBQVcsOEdBQ3JHLENBQUM7VUFDNUQ7UUFDRjtRQUNBTCx3QkFBd0IsQ0FBQ3pFLE9BQU8sR0FBRzBFLGFBQWE7TUFDbEQ7TUFDQSxJQUFNSyxTQUFTLEdBQUdyRixrQkFBa0IsQ0FDbEN3RSxJQUFJLEdBQUc3Ryw2REFBUyxHQUFHaUcsR0FBRztNQUN0QjtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0FsRix5QkFBeUIsRUFDekI4RCxPQUFPLENBQUNZLG1CQUFtQixDQUFDWSxJQUFJLENBQUMsRUFDakNBLElBQ0YsQ0FBQztNQUNELElBQU1zQix5QkFBeUIsR0FBRzdFLHFCQUFxQixDQUFDO1FBQ3REMkQsa0JBQWtCLEVBQWxCQSxrQkFBa0I7UUFDbEJDLGNBQWMsRUFBZEEsY0FBYztRQUNkSyxlQUFlLEVBQWZBLGVBQWU7UUFDZkUsc0JBQXNCLEVBQXRCQTtNQUNGLENBQUMsQ0FBQztNQUNGLElBQU1XLHlCQUF5QixHQUFHbkgsNkNBQU8sQ0FBQyxLQUFLLENBQUM7TUFDaEQsSUFBTW9ILFVBQVUsR0FBR3BILDZDQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDbEMsSUFBQXFILEtBQUEsR0FHSUQsVUFBVSxDQUFDbEYsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUYxQm9GLGFBQWEsR0FBQUQsS0FBQSxDQUFiQyxhQUFhO1FBQ2JDLFNBQVMsR0FBQUYsS0FBQSxDQUFURSxTQUFTO01BRVgsSUFBSUMsNEJBQTRCLEdBQUcsS0FBSztNQUN4QyxJQUFJRixhQUFhLElBQUlDLFNBQVMsRUFBRTtRQUM5QkMsNEJBQTRCLEdBQUdiLHdCQUF3QixDQUFDekUsT0FBTyxDQUFDdUYsbUJBQW1CLENBQUNILGFBQWEsRUFBRUMsU0FBUyxDQUFDO01BQy9HO01BQ0EsSUFBTUcsbUJBQW1CLEdBQUcsQ0FBQ0YsNEJBQTRCLElBQUlMLHlCQUF5QixDQUFDakYsT0FBTztNQUM5Rm1DLDBCQUEwQixDQUFDLFlBQU07UUFDL0I4Qyx5QkFBeUIsQ0FBQ2pGLE9BQU8sR0FBR3NGLDRCQUE0QjtNQUNsRSxDQUFDLENBQUM7TUFDRm5ELDBCQUEwQixDQUFDLFlBQU07UUFDL0IsSUFBSXFELG1CQUFtQixFQUFFO1VBQ3ZCTixVQUFVLENBQUNsRixPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQzdCO01BQ0YsQ0FBQyxFQUFFLENBQUN3RixtQkFBbUIsQ0FBQyxDQUFDO01BQ3pCckQsMEJBQTBCLENBQUMsWUFBTTtRQUFBLElBQUFzRCxtQkFBQTtRQUMvQixJQUFNQyxXQUFXLEdBQUdSLFVBQVUsQ0FBQ2xGLE9BQU87UUFDdEMsSUFBSSxPQUFPMkYsT0FBTyxLQUFLLFdBQVcsU0FBb0QsRUFBRSxFQUV2RjtRQUNELElBQUlaLFNBQVMsS0FBSzFILDZEQUFTLEVBQUU7VUFDM0JxSSxXQUFXLGFBQVhBLFdBQVcsZUFBWEEsV0FBVyxDQUFFSSxXQUFXLENBQUMsQ0FBQztVQUMxQlosVUFBVSxDQUFDbEYsT0FBTyxHQUFHLEtBQUssQ0FBQztVQUMzQjtRQUNGO1FBQ0EsSUFBTStGLHVCQUF1QixJQUFBTixtQkFBQSxHQUFHUCxVQUFVLENBQUNsRixPQUFPLGNBQUF5RixtQkFBQSx1QkFBbEJBLG1CQUFBLENBQW9CTyxtQkFBbUI7UUFDdkUsSUFBSSxDQUFDTixXQUFXLElBQUlBLFdBQVcsQ0FBQ3BDLEdBQUcsS0FBS3lCLFNBQVMsRUFBRTtVQUNqRFcsV0FBVyxhQUFYQSxXQUFXLGVBQVhBLFdBQVcsQ0FBRUksV0FBVyxDQUFDLENBQUM7VUFDMUIsSUFBTUcsT0FBTyxHQUFHN0MsUUFBUSxDQUFDbUIsUUFBUSxDQUFDUSxTQUFTLEVBQUU7WUFDM0NpQixtQkFBbUIsRUFBRWhCLHlCQUF5QjtZQUM5Q2tCLFlBQVksRUFBRWxDO1VBQ2hCLENBQUMsQ0FBQyxDQUFDO1VBQ0hrQixVQUFVLENBQUNsRixPQUFPLEdBQUdpRyxPQUFPO1FBQzlCLENBQUMsTUFBTSxJQUFJakIseUJBQXlCLEtBQUtlLHVCQUF1QixFQUFFO1VBQ2hFTCxXQUFXLENBQUNTLHlCQUF5QixDQUFDbkIseUJBQXlCLENBQUM7UUFDbEU7TUFDRixDQUFDLEVBQUUsQ0FBQzVCLFFBQVEsRUFBRW1CLFFBQVEsRUFBRVAseUJBQXlCLEVBQUVlLFNBQVMsRUFBRUMseUJBQXlCLEVBQUVRLG1CQUFtQixDQUFDLENBQUM7TUFDOUcvSCxnREFBVSxDQUFDLFlBQU07UUFDZixPQUFPLFlBQU07VUFBQSxJQUFBMkksb0JBQUE7VUFDWCxDQUFBQSxvQkFBQSxHQUFBbEIsVUFBVSxDQUFDbEYsT0FBTyxjQUFBb0csb0JBQUEsZUFBbEJBLG9CQUFBLENBQW9CTixXQUFXLENBQUMsQ0FBQztVQUNqQ1osVUFBVSxDQUFDbEYsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUM3QixDQUFDO01BQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQztNQUNOLE9BQU9wQyw4Q0FBUSxDQUFDO1FBQUEsT0FBTztVQUNyQjtBQUNSO0FBQ0E7VUFDUXlJLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQU07WUFBQSxJQUFBQyxvQkFBQTtZQUNiLElBQUksQ0FBQ3BCLFVBQVUsQ0FBQ2xGLE9BQU8sRUFBRSxNQUFNLElBQUk2RSxLQUFLLENBQUMsU0FBd0MzSCxDQUE0QixHQUFHLHVEQUF1RCxDQUFDO1lBQ3hLLFFBQUFvSixvQkFBQSxHQUFPcEIsVUFBVSxDQUFDbEYsT0FBTyxjQUFBc0csb0JBQUEsdUJBQWxCQSxvQkFBQSxDQUFvQkQsT0FBTyxDQUFDLENBQUM7VUFDdEM7UUFDRixDQUFDO01BQUEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNULENBQUM7SUFDRCxJQUFNRSx3QkFBd0IsR0FBRyxTQUEzQkEsd0JBQXdCQSxDQUFBLEVBS25CO01BQUEsSUFBQUMsS0FBQSxHQUFBeEwsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQTZJLFNBQUEsR0FBQTdJLFNBQUEsTUFBUCxDQUFDLENBQUM7UUFKSjhJLGtCQUFrQixHQUFBMEMsS0FBQSxDQUFsQjFDLGtCQUFrQjtRQUNsQkMsY0FBYyxHQUFBeUMsS0FBQSxDQUFkekMsY0FBYztRQUFBMEMscUJBQUEsR0FBQUQsS0FBQSxDQUNkcEMsZUFBZTtRQUFmQSxlQUFlLEdBQUFxQyxxQkFBQSxjQUFHLENBQUMsR0FBQUEscUJBQUE7UUFBQUMscUJBQUEsR0FBQUYsS0FBQSxDQUNuQmxDLHNCQUFzQjtRQUF0QkEsc0JBQXNCLEdBQUFvQyxxQkFBQSxjQUFHLEtBQUssR0FBQUEscUJBQUE7TUFFOUIsSUFDRW5DLFFBQVEsR0FDTjdDLEdBQUcsQ0FBQzhDLFNBQVMsQ0FBQ2QsSUFBSSxDQUFDLENBRHJCYSxRQUFRO01BRVYsSUFBTW5CLFFBQVEsR0FBR25KLFdBQVcsQ0FBQyxDQUFDO01BQzlCLElBQUEwTSxTQUFBLEdBQXNCNUksK0NBQVEsQ0FBQ3lCLG1CQUFtQixDQUFDO1FBQUFvSCxVQUFBLEdBQUFDLGNBQUEsQ0FBQUYsU0FBQTtRQUE1Q3JELEdBQUcsR0FBQXNELFVBQUE7UUFBRUUsTUFBTSxHQUFBRixVQUFBO01BQ2xCLElBQU0xQixVQUFVLEdBQUdwSCw2Q0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO01BQ2xDLElBQU1rSCx5QkFBeUIsR0FBRzdFLHFCQUFxQixDQUFDO1FBQ3REMkQsa0JBQWtCLEVBQWxCQSxrQkFBa0I7UUFDbEJDLGNBQWMsRUFBZEEsY0FBYztRQUNkSyxlQUFlLEVBQWZBLGVBQWU7UUFDZkUsc0JBQXNCLEVBQXRCQTtNQUNGLENBQUMsQ0FBQztNQUNGbkMsMEJBQTBCLENBQUMsWUFBTTtRQUFBLElBQUE0RSxvQkFBQTtRQUMvQixJQUFNaEIsdUJBQXVCLElBQUFnQixvQkFBQSxHQUFHN0IsVUFBVSxDQUFDbEYsT0FBTyxjQUFBK0csb0JBQUEsdUJBQWxCQSxvQkFBQSxDQUFvQmYsbUJBQW1CO1FBQ3ZFLElBQUloQix5QkFBeUIsS0FBS2UsdUJBQXVCLEVBQUU7VUFBQSxJQUFBaUIsb0JBQUE7VUFDekQsQ0FBQUEsb0JBQUEsR0FBQTlCLFVBQVUsQ0FBQ2xGLE9BQU8sY0FBQWdILG9CQUFBLGVBQWxCQSxvQkFBQSxDQUFvQmIseUJBQXlCLENBQUNuQix5QkFBeUIsQ0FBQztRQUMxRTtNQUNGLENBQUMsRUFBRSxDQUFDQSx5QkFBeUIsQ0FBQyxDQUFDO01BQy9CLElBQU1pQyxzQkFBc0IsR0FBR25KLDZDQUFPLENBQUNrSCx5QkFBeUIsQ0FBQztNQUNqRTdDLDBCQUEwQixDQUFDLFlBQU07UUFDL0I4RSxzQkFBc0IsQ0FBQ2pILE9BQU8sR0FBR2dGLHlCQUF5QjtNQUM1RCxDQUFDLEVBQUUsQ0FBQ0EseUJBQXlCLENBQUMsQ0FBQztNQUMvQixJQUFNa0MsT0FBTyxHQUFHNUosa0RBQVcsQ0FBQyxVQUFTNkosSUFBSSxFQUE0QjtRQUFBLElBQTFCQyxnQkFBZ0IsR0FBQXBNLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUE2SSxTQUFBLEdBQUE3SSxTQUFBLE1BQUcsS0FBSztRQUNqRSxJQUFJaUwsT0FBTztRQUNYbE0sS0FBSyxDQUFDLFlBQU07VUFBQSxJQUFBc04sb0JBQUE7VUFDVixDQUFBQSxvQkFBQSxHQUFBbkMsVUFBVSxDQUFDbEYsT0FBTyxjQUFBcUgsb0JBQUEsZUFBbEJBLG9CQUFBLENBQW9CdkIsV0FBVyxDQUFDLENBQUM7VUFDakNaLFVBQVUsQ0FBQ2xGLE9BQU8sR0FBR2lHLE9BQU8sR0FBRzdDLFFBQVEsQ0FBQ21CLFFBQVEsQ0FBQzRDLElBQUksRUFBRTtZQUNyRG5CLG1CQUFtQixFQUFFaUIsc0JBQXNCLENBQUNqSCxPQUFPO1lBQ25Ea0csWUFBWSxFQUFFLENBQUNrQjtVQUNqQixDQUFDLENBQUMsQ0FBQztVQUNITixNQUFNLENBQUNLLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQztRQUNGLE9BQU9sQixPQUFPO01BQ2hCLENBQUMsRUFBRSxDQUFDN0MsUUFBUSxFQUFFbUIsUUFBUSxDQUFDLENBQUM7TUFDeEI5RyxnREFBVSxDQUFDLFlBQU07UUFDZixPQUFPLFlBQU07VUFBQSxJQUFBNkosb0JBQUE7VUFDWHBDLFVBQVUsYUFBVkEsVUFBVSxnQkFBQW9DLG9CQUFBLEdBQVZwQyxVQUFVLENBQUVsRixPQUFPLGNBQUFzSCxvQkFBQSxlQUFuQkEsb0JBQUEsQ0FBcUJ4QixXQUFXLENBQUMsQ0FBQztRQUNwQyxDQUFDO01BQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQztNQUNOckksZ0RBQVUsQ0FBQyxZQUFNO1FBQ2YsSUFBSTZGLEdBQUcsS0FBSzlELG1CQUFtQixJQUFJLENBQUMwRixVQUFVLENBQUNsRixPQUFPLEVBQUU7VUFDdERrSCxPQUFPLENBQUM1RCxHQUFHLEVBQUUsSUFBSSxDQUFDO1FBQ3BCO01BQ0YsQ0FBQyxFQUFFLENBQUNBLEdBQUcsRUFBRTRELE9BQU8sQ0FBQyxDQUFDO01BQ2xCLE9BQU90Siw4Q0FBUSxDQUFDO1FBQUEsT0FBTSxDQUFDc0osT0FBTyxFQUFFNUQsR0FBRyxDQUFDO01BQUEsR0FBRSxDQUFDNEQsT0FBTyxFQUFFNUQsR0FBRyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUNELElBQU1pRSxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUlqRSxHQUFHLEVBR2Y7TUFBQSxJQUFBa0UsS0FBQSxHQUFBeE0sU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQTZJLFNBQUEsR0FBQTdJLFNBQUEsTUFBUCxDQUFDLENBQUM7UUFBQXlNLFVBQUEsR0FBQUQsS0FBQSxDQUZKdEQsSUFBSTtRQUFKQSxJQUFJLEdBQUF1RCxVQUFBLGNBQUcsS0FBSyxHQUFBQSxVQUFBO1FBQ1pDLGdCQUFnQixHQUFBRixLQUFBLENBQWhCRSxnQkFBZ0I7TUFFaEIsSUFDRUMsTUFBTSxHQUNKakcsR0FBRyxDQUFDOEMsU0FBUyxDQUFDZCxJQUFJLENBQUMsQ0FEckJpRSxNQUFNO01BRVIsSUFBTTVDLFNBQVMsR0FBR3JGLGtCQUFrQixDQUFDd0UsSUFBSSxHQUFHN0csNkRBQVMsR0FBR2lHLEdBQUcsRUFBRXJCLGtCQUFrQixFQUFFQyxPQUFPLENBQUNZLG1CQUFtQixDQUFDWSxJQUFJLENBQUMsRUFBRUEsSUFBSSxDQUFDO01BQ3pILElBQU1rRSxTQUFTLEdBQUc5Siw2Q0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO01BQ2pDLElBQU0rSixtQkFBbUIsR0FBR2pLLDhDQUFRLENBQUM7UUFBQSxPQUFNb0UsZUFBZSxDQUFDLENBQUMyRixNQUFNLENBQUM1QyxTQUFTLENBQUMsRUFBRSxVQUFDK0MsQ0FBQyxFQUFFcEYsVUFBVTtVQUFBLE9BQUtBLFVBQVU7UUFBQSxHQUFFLFVBQUNvRixDQUFDO1VBQUEsT0FBSy9DLFNBQVM7UUFBQSxFQUFDLEVBQUV2QyxxQkFBcUIsRUFBRTtVQUN0SnVGLGNBQWMsRUFBRTtZQUNkQyxtQkFBbUIsRUFBRS9KLHFEQUFhQTtVQUNwQztRQUNGLENBQUMsQ0FBQztNQUFBLEdBQUUsQ0FBQzBKLE1BQU0sRUFBRTVDLFNBQVMsQ0FBQyxDQUFDO01BQ3hCLElBQU1rRCxhQUFhLEdBQUdySyw4Q0FBUSxDQUFDO1FBQUEsT0FBTThKLGdCQUFnQixHQUFHMUYsZUFBZSxDQUFDLENBQUM2RixtQkFBbUIsQ0FBQyxFQUFFSCxnQkFBZ0IsRUFBRTtVQUMvR1EsYUFBYSxFQUFFO1lBQ2JDLHFCQUFxQixFQUFFO1VBQ3pCO1FBQ0YsQ0FBQyxDQUFDLEdBQUdOLG1CQUFtQjtNQUFBLEdBQUUsQ0FBQ0EsbUJBQW1CLEVBQUVILGdCQUFnQixDQUFDLENBQUM7TUFDbEUsSUFBTWpGLFlBQVksR0FBR3RJLFdBQVcsQ0FBQyxVQUFDaU8sS0FBSztRQUFBLE9BQUtILGFBQWEsQ0FBQ0csS0FBSyxFQUFFUixTQUFTLENBQUM1SCxPQUFPLENBQUM7TUFBQSxHQUFFL0IscURBQWEsQ0FBQztNQUNuRyxJQUFNb0ssS0FBSyxHQUFHaE8sUUFBUSxDQUFDLENBQUM7TUFDeEIsSUFBTWlPLFlBQVksR0FBR1QsbUJBQW1CLENBQUNRLEtBQUssQ0FBQ0UsUUFBUSxDQUFDLENBQUMsRUFBRVgsU0FBUyxDQUFDNUgsT0FBTyxDQUFDO01BQzdFYyx5QkFBeUIsQ0FBQyxZQUFNO1FBQzlCOEcsU0FBUyxDQUFDNUgsT0FBTyxHQUFHc0ksWUFBWTtNQUNsQyxDQUFDLEVBQUUsQ0FBQ0EsWUFBWSxDQUFDLENBQUM7TUFDbEIsT0FBTzdGLFlBQVk7SUFDckIsQ0FBQztJQUNELE9BQU87TUFDTDhFLGFBQWEsRUFBYkEsYUFBYTtNQUNiNUQsb0JBQW9CLEVBQXBCQSxvQkFBb0I7TUFDcEI0Qyx3QkFBd0IsRUFBeEJBLHdCQUF3QjtNQUN4QmlDLFlBQVksV0FBQUEsYUFBQ2pGLE9BQU8sRUFBRTtRQUNwQixJQUFBa0YscUJBQUEsR0FBdUJsQyx3QkFBd0IsQ0FBQ2hELE9BQU8sQ0FBQztVQUFBbUYsc0JBQUEsR0FBQTdCLGNBQUEsQ0FBQTRCLHFCQUFBO1VBQWpEdkIsT0FBTyxHQUFBd0Isc0JBQUE7VUFBRXBGLEdBQUcsR0FBQW9GLHNCQUFBO1FBQ25CLElBQU1DLGlCQUFpQixHQUFHcEIsYUFBYSxDQUFDakUsR0FBRyxFQUFBcEMsYUFBQSxDQUFBQSxhQUFBLEtBQ3RDcUMsT0FBTztVQUNWVyxJQUFJLEVBQUVaLEdBQUcsS0FBSzlEO1FBQW1CLEVBQ2xDLENBQUM7UUFDRixJQUFNb0osSUFBSSxHQUFHaEwsOENBQVEsQ0FBQztVQUFBLE9BQU87WUFDM0JpTCxPQUFPLEVBQUV2RjtVQUNYLENBQUM7UUFBQSxDQUFDLEVBQUUsQ0FBQ0EsR0FBRyxDQUFDLENBQUM7UUFDVixPQUFPMUYsOENBQVEsQ0FBQztVQUFBLE9BQU0sQ0FBQ3NKLE9BQU8sRUFBRXlCLGlCQUFpQixFQUFFQyxJQUFJLENBQUM7UUFBQSxHQUFFLENBQUMxQixPQUFPLEVBQUV5QixpQkFBaUIsRUFBRUMsSUFBSSxDQUFDLENBQUM7TUFDL0YsQ0FBQztNQUNERSxRQUFRLFdBQUFBLFNBQUN4RixHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUNyQixJQUFNd0Ysd0JBQXdCLEdBQUdwRixvQkFBb0IsQ0FBQ0wsR0FBRyxFQUFFQyxPQUFPLENBQUM7UUFDbkUsSUFBTW9GLGlCQUFpQixHQUFHcEIsYUFBYSxDQUFDakUsR0FBRyxFQUFBcEMsYUFBQTtVQUN6Q3dHLGdCQUFnQixFQUFFcEUsR0FBRyxLQUFLakcsNkRBQVMsSUFBSWtHLE9BQU8sYUFBUEEsT0FBTyxlQUFQQSxPQUFPLENBQUVXLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR25EO1FBQTJCLEdBQ3hGd0MsT0FBTyxDQUNYLENBQUM7UUFDRixJQUNFbEMsSUFBSSxHQU1Gc0gsaUJBQWlCLENBTm5CdEgsSUFBSTtVQUNKQyxNQUFNLEdBS0pxSCxpQkFBaUIsQ0FMbkJySCxNQUFNO1VBQ05GLFNBQVMsR0FJUHVILGlCQUFpQixDQUpuQnZILFNBQVM7VUFDVDRCLFNBQVMsR0FHUDJGLGlCQUFpQixDQUhuQjNGLFNBQVM7VUFDVGdHLE9BQU8sR0FFTEwsaUJBQWlCLENBRm5CSyxPQUFPO1VBQ1BDLEtBQUssR0FDSE4saUJBQWlCLENBRG5CTSxLQUFLO1FBRVAxTCxvREFBYSxDQUFDO1VBQ1o4RCxJQUFJLEVBQUpBLElBQUk7VUFDSkMsTUFBTSxFQUFOQSxNQUFNO1VBQ05GLFNBQVMsRUFBVEEsU0FBUztVQUNUNEIsU0FBUyxFQUFUQSxTQUFTO1VBQ1RnRyxPQUFPLEVBQVBBLE9BQU87VUFDUEMsS0FBSyxFQUFMQTtRQUNGLENBQUMsQ0FBQztRQUNGLE9BQU9yTCw4Q0FBUSxDQUFDO1VBQUEsT0FBQXNELGFBQUEsQ0FBQUEsYUFBQSxLQUNYeUgsaUJBQWlCLEdBQ2pCSSx3QkFBd0I7UUFBQSxDQUMzQixFQUFFLENBQUNKLGlCQUFpQixFQUFFSSx3QkFBd0IsQ0FBQyxDQUFDO01BQ3BEO0lBQ0YsQ0FBQztFQUNIO0VBQ0EsU0FBU3pHLGlCQUFpQkEsQ0FBQ29CLElBQUksRUFBRTtJQUMvQixPQUFPLFlBR0k7TUFBQSxJQUFBd0YsS0FBQSxHQUFBbE8sU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQTZJLFNBQUEsR0FBQTdJLFNBQUEsTUFBUCxDQUFDLENBQUM7UUFGSjBNLGdCQUFnQixHQUFBd0IsS0FBQSxDQUFoQnhCLGdCQUFnQjtRQUNoQnlCLGFBQWEsR0FBQUQsS0FBQSxDQUFiQyxhQUFhO01BRWIsSUFBQUMsbUJBQUEsR0FHSTFILEdBQUcsQ0FBQzhDLFNBQVMsQ0FBQ2QsSUFBSSxDQUFDO1FBRnJCaUUsTUFBTSxHQUFBeUIsbUJBQUEsQ0FBTnpCLE1BQU07UUFDTnBELFFBQVEsR0FBQTZFLG1CQUFBLENBQVI3RSxRQUFRO01BRVYsSUFBTW5CLFFBQVEsR0FBR25KLFdBQVcsQ0FBQyxDQUFDO01BQzlCLElBQUFvUCxVQUFBLEdBQThCdEwsK0NBQVEsQ0FBQyxDQUFDO1FBQUF1TCxVQUFBLEdBQUF6QyxjQUFBLENBQUF3QyxVQUFBO1FBQWpDcEQsT0FBTyxHQUFBcUQsVUFBQTtRQUFFQyxVQUFVLEdBQUFELFVBQUE7TUFDMUI3TCxnREFBVSxDQUFDO1FBQUEsT0FBTSxZQUFNO1VBQ3JCLElBQUksRUFBQ3dJLE9BQU8sYUFBUEEsT0FBTyxlQUFQQSxPQUFPLENBQUUzQyxHQUFHLENBQUM2RixhQUFhLEdBQUU7WUFDL0JsRCxPQUFPLGFBQVBBLE9BQU8sZUFBUEEsT0FBTyxDQUFFdUQsS0FBSyxDQUFDLENBQUM7VUFDbEI7UUFDRixDQUFDO01BQUEsR0FBRSxDQUFDdkQsT0FBTyxDQUFDLENBQUM7TUFDYixJQUFNd0QsZUFBZSxHQUFHbk0sa0RBQVcsQ0FBQyxVQUFTZ0csR0FBRyxFQUFFO1FBQ2hELElBQU1vRyxRQUFRLEdBQUd0RyxRQUFRLENBQUNtQixRQUFRLENBQUNqQixHQUFHLEVBQUU7VUFDdEM2RixhQUFhLEVBQWJBO1FBQ0YsQ0FBQyxDQUFDLENBQUM7UUFDSEksVUFBVSxDQUFDRyxRQUFRLENBQUM7UUFDcEIsT0FBT0EsUUFBUTtNQUNqQixDQUFDLEVBQUUsQ0FBQ3RHLFFBQVEsRUFBRW1CLFFBQVEsRUFBRTRFLGFBQWEsQ0FBQyxDQUFDO01BQ3ZDLElBQUFRLEtBQUEsR0FFSTFELE9BQU8sSUFBSSxDQUFDLENBQUM7UUFEZlosU0FBUyxHQUFBc0UsS0FBQSxDQUFUdEUsU0FBUztNQUVYLElBQU13QyxtQkFBbUIsR0FBR2pLLDhDQUFRLENBQUM7UUFBQSxPQUFNK0osTUFBTSxDQUFDO1VBQ2hEd0IsYUFBYSxFQUFiQSxhQUFhO1VBQ2I5RCxTQUFTLEVBQUVZLE9BQU8sYUFBUEEsT0FBTyx1QkFBUEEsT0FBTyxDQUFFWjtRQUN0QixDQUFDLENBQUM7TUFBQSxHQUFFLENBQUM4RCxhQUFhLEVBQUVsRCxPQUFPLEVBQUUwQixNQUFNLENBQUMsQ0FBQztNQUNyQyxJQUFNaUMsZ0JBQWdCLEdBQUdoTSw4Q0FBUSxDQUFDO1FBQUEsT0FBTThKLGdCQUFnQixHQUFHMUYsZUFBZSxDQUFDLENBQUM2RixtQkFBbUIsQ0FBQyxFQUFFSCxnQkFBZ0IsQ0FBQyxHQUFHRyxtQkFBbUI7TUFBQSxHQUFFLENBQUNILGdCQUFnQixFQUFFRyxtQkFBbUIsQ0FBQyxDQUFDO01BQ25MLElBQU1wRixZQUFZLEdBQUd0SSxXQUFXLENBQUN5UCxnQkFBZ0IsRUFBRTNMLHFEQUFhLENBQUM7TUFDakUsSUFBTThFLFlBQVksR0FBR29HLGFBQWEsSUFBSSxJQUFJLEdBQUdsRCxPQUFPLGFBQVBBLE9BQU8sdUJBQVBBLE9BQU8sQ0FBRTNDLEdBQUcsQ0FBQ1AsWUFBWSxHQUFHLEtBQUssQ0FBQztNQUMvRSxJQUFNeUcsS0FBSyxHQUFHbE0sa0RBQVcsQ0FBQyxZQUFNO1FBQzlCdkQsS0FBSyxDQUFDLFlBQU07VUFDVixJQUFJa00sT0FBTyxFQUFFO1lBQ1hzRCxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7VUFDcEI7VUFDQSxJQUFJSixhQUFhLEVBQUU7WUFDakIvRixRQUFRLENBQUMxQixHQUFHLENBQUNpRCxlQUFlLENBQUNrRixvQkFBb0IsQ0FBQztjQUNoRHhFLFNBQVMsRUFBVEEsU0FBUztjQUNUOEQsYUFBYSxFQUFiQTtZQUNGLENBQUMsQ0FBQyxDQUFDO1VBQ0w7UUFDRixDQUFDLENBQUM7TUFDSixDQUFDLEVBQUUsQ0FBQy9GLFFBQVEsRUFBRStGLGFBQWEsRUFBRWxELE9BQU8sRUFBRVosU0FBUyxDQUFDLENBQUM7TUFDakQsSUFDRS9HLFlBQVksR0FPVm1FLFlBQVksQ0FQZG5FLFlBQVk7UUFDWitDLElBQUksR0FNRm9CLFlBQVksQ0FOZHBCLElBQUk7UUFDSkMsTUFBTSxHQUtKbUIsWUFBWSxDQUxkbkIsTUFBTTtRQUNORixTQUFTLEdBSVBxQixZQUFZLENBSmRyQixTQUFTO1FBQ1Q0QixTQUFTLEdBR1BQLFlBQVksQ0FIZE8sU0FBUztRQUNUZ0csT0FBTyxHQUVMdkcsWUFBWSxDQUZkdUcsT0FBTztRQUNQQyxLQUFLLEdBQ0h4RyxZQUFZLENBRGR3RyxLQUFLO01BRVAxTCxvREFBYSxDQUFDO1FBQ1plLFlBQVksRUFBWkEsWUFBWTtRQUNaK0MsSUFBSSxFQUFKQSxJQUFJO1FBQ0pDLE1BQU0sRUFBTkEsTUFBTTtRQUNORixTQUFTLEVBQVRBLFNBQVM7UUFDVDRCLFNBQVMsRUFBVEEsU0FBUztRQUNUZ0csT0FBTyxFQUFQQSxPQUFPO1FBQ1BDLEtBQUssRUFBTEE7TUFDRixDQUFDLENBQUM7TUFDRixJQUFNYSxVQUFVLEdBQUdsTSw4Q0FBUSxDQUFDO1FBQUEsT0FBQXNELGFBQUEsQ0FBQUEsYUFBQSxLQUN2QnVCLFlBQVk7VUFDZk0sWUFBWSxFQUFaQSxZQUFZO1VBQ1p5RyxLQUFLLEVBQUxBO1FBQUs7TUFBQSxDQUNMLEVBQUUsQ0FBQy9HLFlBQVksRUFBRU0sWUFBWSxFQUFFeUcsS0FBSyxDQUFDLENBQUM7TUFDeEMsT0FBTzVMLDhDQUFRLENBQUM7UUFBQSxPQUFNLENBQUM2TCxlQUFlLEVBQUVLLFVBQVUsQ0FBQztNQUFBLEdBQUUsQ0FBQ0wsZUFBZSxFQUFFSyxVQUFVLENBQUMsQ0FBQztJQUNyRixDQUFDO0VBQ0g7QUFDRjs7QUFFQTtBQUNBLElBQUlDLG9CQUFvQixHQUFHLGVBQWdCdEssTUFBTSxDQUFDLENBQUM7QUFDbkQsSUFBSXVLLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUEsRUFVVDtFQUFBLElBQUFDLEtBQUEsR0FBQWpQLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUE2SSxTQUFBLEdBQUE3SSxTQUFBLE1BQVAsQ0FBQyxDQUFDO0lBQUFrUCxXQUFBLEdBQUFELEtBQUEsQ0FUSmxRLEtBQUs7SUFBTEEsS0FBSyxHQUFBbVEsV0FBQSxjQUFHbFEsOENBQU8sR0FBQWtRLFdBQUE7SUFBQUMsV0FBQSxHQUFBRixLQUFBLENBQ2ZuSSxLQUFLO0lBQUxBLEtBQUssR0FBQXFJLFdBQUEsY0FBRztNQUNObFEsV0FBVyxFQUFFQyxvREFBYTtNQUMxQkMsV0FBVyxFQUFFQyxvREFBYTtNQUMxQkMsUUFBUSxFQUFFQyxpREFBVUE7SUFDdEIsQ0FBQyxHQUFBNlAsV0FBQTtJQUFBQyxvQkFBQSxHQUFBSCxLQUFBLENBQ0QxUCxjQUFjO0lBQUV5SCxlQUFlLEdBQUFvSSxvQkFBQSxjQUFHNVAsb0RBQWUsR0FBQTRQLG9CQUFBO0lBQUFDLHFCQUFBLEdBQUFKLEtBQUEsQ0FDakRsSSw2QkFBNkI7SUFBN0JBLDZCQUE2QixHQUFBc0kscUJBQUEsY0FBRyxLQUFLLEdBQUFBLHFCQUFBO0lBQ2xDQyxJQUFJLEdBQUFDLHdCQUFBLENBQUFOLEtBQUEsRUFBQU8sU0FBQTtFQUVQLElBQUksTUFBdUM7SUFDekMsSUFBTUMsU0FBUyxHQUFHLENBQUMsYUFBYSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUM7SUFDNUQsSUFBSUMsTUFBTSxHQUFHLEtBQUs7SUFDbEIsU0FBQUMsRUFBQSxNQUFBQyxVQUFBLEdBQXVCSCxTQUFTLEVBQUFFLEVBQUEsR0FBQUMsVUFBQSxDQUFBM1AsTUFBQSxFQUFBMFAsRUFBQSxJQUFFO01BQTdCLElBQU1FLFFBQVEsR0FBQUQsVUFBQSxDQUFBRCxFQUFBO01BQ2pCLElBQUk3TixlQUFlLENBQUN3TixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDN0IsSUFBSUEsSUFBSSxDQUFDTyxRQUFRLENBQUMsRUFBRTtVQUNsQixJQUFJLENBQUNILE1BQU0sRUFBRTtZQUNYOUUsT0FBTyxDQUFDa0YsSUFBSSxDQUFDLHVLQUF1SyxDQUFDO1lBQ3JMSixNQUFNLEdBQUcsSUFBSTtVQUNmO1FBQ0Y7UUFDQTVJLEtBQUssQ0FBQytJLFFBQVEsQ0FBQyxHQUFHUCxJQUFJLENBQUNPLFFBQVEsQ0FBQztNQUNsQztNQUNBLElBQUksT0FBTy9JLEtBQUssQ0FBQytJLFFBQVEsQ0FBQyxLQUFLLFVBQVUsRUFBRTtRQUN6QyxNQUFNLElBQUloRyxLQUFLLENBQUMsU0FBd0MvSyxDQUE0QiwrQ0FBQTBCLE1BQUEsQ0FBK0NpUCxTQUFTLENBQUN4UCxNQUFNLGtDQUFBTyxNQUFBLENBQStCaVAsU0FBUyxDQUFDTSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQUF2UCxNQUFBLENBQ3ZNcVAsUUFBUSxnREFBNkMsQ0FBQztNQUN2RDtJQUNGO0VBQ0Y7RUFDQSxPQUFPO0lBQ0xuSCxJQUFJLEVBQUVxRyxvQkFBb0I7SUFDMUJpQixJQUFJLFdBQUFBLEtBQUN0SixHQUFHLEVBQUF1SixNQUFBLEVBRUwvSSxPQUFPLEVBQUU7TUFBQSxJQURWRCxrQkFBa0IsR0FBQWdKLE1BQUEsQ0FBbEJoSixrQkFBa0I7TUFFbEIsSUFBTWlKLE1BQU0sR0FBR3hKLEdBQUc7TUFDbEIsSUFBQXlKLFdBQUEsR0FJSTNKLFVBQVUsQ0FBQztVQUNiRSxHQUFHLEVBQUhBLEdBQUc7VUFDSEUsYUFBYSxFQUFFO1lBQ2I3SCxLQUFLLEVBQUxBLEtBQUs7WUFDTCtILEtBQUssRUFBTEEsS0FBSztZQUNMQyw2QkFBNkIsRUFBN0JBLDZCQUE2QjtZQUM3QnhILGNBQWMsRUFBRXlIO1VBQ2xCLENBQUM7VUFDREMsa0JBQWtCLEVBQWxCQSxrQkFBa0I7VUFDbEJDLE9BQU8sRUFBUEE7UUFDRixDQUFDLENBQUM7UUFiQUcsZUFBZSxHQUFBOEksV0FBQSxDQUFmOUksZUFBZTtRQUNmQyxpQkFBaUIsR0FBQTZJLFdBQUEsQ0FBakI3SSxpQkFBaUI7UUFDakJDLFdBQVcsR0FBQTRJLFdBQUEsQ0FBWDVJLFdBQVc7TUFZYjFILFVBQVUsQ0FBQ3FRLE1BQU0sRUFBRTtRQUNqQjNJLFdBQVcsRUFBWEE7TUFDRixDQUFDLENBQUM7TUFDRjFILFVBQVUsQ0FBQ3FILE9BQU8sRUFBRTtRQUNsQm5JLEtBQUssRUFBTEE7TUFDRixDQUFDLENBQUM7TUFDRixPQUFPO1FBQ0xxUixjQUFjLFdBQUFBLGVBQUM5TSxZQUFZLEVBQUUrTSxVQUFVLEVBQUU7VUFDdkMsSUFBSTVRLGlCQUFpQixDQUFDNFEsVUFBVSxDQUFDLEVBQUU7WUFDakMsSUFBQUMsZ0JBQUEsR0FNSWpKLGVBQWUsQ0FBQy9ELFlBQVksQ0FBQztjQUwvQndLLFFBQVEsR0FBQXdDLGdCQUFBLENBQVJ4QyxRQUFRO2NBQ1JOLFlBQVksR0FBQThDLGdCQUFBLENBQVo5QyxZQUFZO2NBQ1pqQyx3QkFBd0IsR0FBQStFLGdCQUFBLENBQXhCL0Usd0JBQXdCO2NBQ3hCZ0IsYUFBYSxHQUFBK0QsZ0JBQUEsQ0FBYi9ELGFBQWE7Y0FDYjVELG9CQUFvQixHQUFBMkgsZ0JBQUEsQ0FBcEIzSCxvQkFBb0I7WUFFdEI5SSxVQUFVLENBQUNxUSxNQUFNLENBQUMxRyxTQUFTLENBQUNsRyxZQUFZLENBQUMsRUFBRTtjQUN6Q3dLLFFBQVEsRUFBUkEsUUFBUTtjQUNSTixZQUFZLEVBQVpBLFlBQVk7Y0FDWmpDLHdCQUF3QixFQUF4QkEsd0JBQXdCO2NBQ3hCZ0IsYUFBYSxFQUFiQSxhQUFhO2NBQ2I1RCxvQkFBb0IsRUFBcEJBO1lBQ0YsQ0FBQyxDQUFDO1lBQ0ZqQyxHQUFHLE9BQUFsRyxNQUFBLENBQU9DLFVBQVUsQ0FBQzZDLFlBQVksQ0FBQyxXQUFRLEdBQUd3SyxRQUFRO1lBQ3JEcEgsR0FBRyxXQUFBbEcsTUFBQSxDQUFXQyxVQUFVLENBQUM2QyxZQUFZLENBQUMsV0FBUSxHQUFHa0ssWUFBWTtVQUMvRCxDQUFDLE1BQU0sSUFBSTVOLG9CQUFvQixDQUFDeVEsVUFBVSxDQUFDLEVBQUU7WUFDM0MsSUFBTUUsV0FBVyxHQUFHakosaUJBQWlCLENBQUNoRSxZQUFZLENBQUM7WUFDbkR6RCxVQUFVLENBQUNxUSxNQUFNLENBQUMxRyxTQUFTLENBQUNsRyxZQUFZLENBQUMsRUFBRTtjQUN6Q2lOLFdBQVcsRUFBWEE7WUFDRixDQUFDLENBQUM7WUFDRjdKLEdBQUcsT0FBQWxHLE1BQUEsQ0FBT0MsVUFBVSxDQUFDNkMsWUFBWSxDQUFDLGNBQVcsR0FBR2lOLFdBQVc7VUFDN0Q7UUFDRjtNQUNGLENBQUM7SUFDSDtFQUNGLENBQUM7QUFDSCxDQUFDOztBQUVEO0FBQ3VDOztBQUV2QztBQUNzRjtBQUNwQztBQUNmO0FBQ2E7QUFDdEI7QUFDZ0M7QUFDRjtBQUN4RCxTQUFTUyxXQUFXQSxDQUFDQyxLQUFLLEVBQUU7RUFDMUIsSUFBTS9KLE9BQU8sR0FBRytKLEtBQUssQ0FBQy9KLE9BQU8sSUFBSTRKLDBEQUFpQjtFQUNsRCxJQUFNSSxlQUFlLEdBQUdSLGlEQUFVLENBQUN4SixPQUFPLENBQUM7RUFDM0MsSUFBSWdLLGVBQWUsRUFBRTtJQUNuQixNQUFNLElBQUlySCxLQUFLLENBQUMsU0FBd0MyRyxDQUE0QixHQUFHLDhHQUE4RyxDQUFDO0VBQ3hNO0VBQ0EsSUFBQVcsZUFBQSxHQUFnQlAsMkNBQWMsQ0FBQztNQUFBLE9BQU1ILGdFQUFjLENBQUM7UUFDbERXLE9BQU8sRUFBQUMsZUFBQSxLQUNKSixLQUFLLENBQUN2SyxHQUFHLENBQUNvRCxXQUFXLEVBQUdtSCxLQUFLLENBQUN2SyxHQUFHLENBQUMwSyxPQUFPLENBQzNDO1FBQ0RFLFVBQVUsRUFBRSxTQUFBQSxXQUFDQyxHQUFHO1VBQUEsT0FBS0EsR0FBRyxDQUFDLENBQUMsQ0FBQy9RLE1BQU0sQ0FBQ3lRLEtBQUssQ0FBQ3ZLLEdBQUcsQ0FBQzRLLFVBQVUsQ0FBQztRQUFBO01BQ3pELENBQUMsQ0FBQztJQUFBLEVBQUM7SUFBQUUsZ0JBQUEsR0FBQTNGLGNBQUEsQ0FBQXNGLGVBQUE7SUFMSTlELEtBQUssR0FBQW1FLGdCQUFBO0VBTVpiLGdEQUFVLENBQUM7SUFBQSxPQUFNTSxLQUFLLENBQUNGLGNBQWMsS0FBSyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUdBLHNFQUFjLENBQUMxRCxLQUFLLENBQUNqRixRQUFRLEVBQUU2SSxLQUFLLENBQUNGLGNBQWMsQ0FBQztFQUFBLEdBQUUsQ0FBQ0UsS0FBSyxDQUFDRixjQUFjLEVBQUUxRCxLQUFLLENBQUNqRixRQUFRLENBQUMsQ0FBQztFQUN4SixPQUFPLGVBQWdCd0ksZ0RBQW1CLENBQUNDLGlEQUFRLEVBQUU7SUFBRXhELEtBQUssRUFBTEEsS0FBSztJQUFFbkcsT0FBTyxFQUFQQTtFQUFRLENBQUMsRUFBRStKLEtBQUssQ0FBQ1EsUUFBUSxDQUFDO0FBQzFGOztBQUVBO0FBQ0EsSUFBSUMsU0FBUyxHQUFHLGVBQWdCL1Msc0VBQWMsQ0FBQ0Msa0VBQVUsQ0FBQyxDQUFDLEVBQUVvUSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXRlLXJlYWN0LXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvcXVlcnkvcmVhY3QvcnRrLXF1ZXJ5LXJlYWN0Lm1vZGVybi5tanM/Yzg0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvcXVlcnkvcmVhY3QvaW5kZXgudHNcbmltcG9ydCB7IGJ1aWxkQ3JlYXRlQXBpLCBjb3JlTW9kdWxlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXQvcXVlcnlcIjtcblxuLy8gc3JjL3F1ZXJ5L3JlYWN0L21vZHVsZS50c1xuaW1wb3J0IHsgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSBhcyBfZm9ybWF0UHJvZEVycm9yTWVzc2FnZTMgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xuaW1wb3J0IHsgYmF0Y2ggYXMgcnJCYXRjaCwgdXNlRGlzcGF0Y2ggYXMgcnJVc2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgYXMgcnJVc2VTZWxlY3RvciwgdXNlU3RvcmUgYXMgcnJVc2VTdG9yZSB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgYXMgX2NyZWF0ZVNlbGVjdG9yIH0gZnJvbSBcInJlc2VsZWN0XCI7XG5cbi8vIHNyYy9xdWVyeS9lbmRwb2ludERlZmluaXRpb25zLnRzXG5mdW5jdGlvbiBpc1F1ZXJ5RGVmaW5pdGlvbihlKSB7XG4gIHJldHVybiBlLnR5cGUgPT09IFwicXVlcnlcIiAvKiBxdWVyeSAqLztcbn1cbmZ1bmN0aW9uIGlzTXV0YXRpb25EZWZpbml0aW9uKGUpIHtcbiAgcmV0dXJuIGUudHlwZSA9PT0gXCJtdXRhdGlvblwiIC8qIG11dGF0aW9uICovO1xufVxuXG4vLyBzcmMvcXVlcnkvdHNIZWxwZXJzLnRzXG5mdW5jdGlvbiBzYWZlQXNzaWduKHRhcmdldCwgLi4uYXJncykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih0YXJnZXQsIC4uLmFyZ3MpO1xufVxuXG4vLyBzcmMvcXVlcnkvdXRpbHMvY2FwaXRhbGl6ZS50c1xuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHN0clswXSwgc3RyWzBdLnRvVXBwZXJDYXNlKCkpO1xufVxuXG4vLyBzcmMvcXVlcnkvY29yZS9ydGtJbXBvcnRzLnRzXG5pbXBvcnQgeyBjcmVhdGVBY3Rpb24sIGNyZWF0ZVNsaWNlLCBjcmVhdGVTZWxlY3RvciwgY3JlYXRlQXN5bmNUaHVuaywgY29tYmluZVJlZHVjZXJzLCBjcmVhdGVOZXh0U3RhdGUsIGlzQW55T2YsIGlzQWxsT2YsIGlzQWN0aW9uLCBpc1BlbmRpbmcsIGlzUmVqZWN0ZWQsIGlzRnVsZmlsbGVkLCBpc1JlamVjdGVkV2l0aFZhbHVlLCBpc0FzeW5jVGh1bmtBY3Rpb24sIHByZXBhcmVBdXRvQmF0Y2hlZCwgU0hPVUxEX0FVVE9CQVRDSCwgaXNQbGFpbk9iamVjdCwgbmFub2lkIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2NvdW50T2JqZWN0S2V5cy50c1xuZnVuY3Rpb24gY291bnRPYmplY3RLZXlzKG9iaikge1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGNvbnN0IF9rZXkgaW4gb2JqKSB7XG4gICAgY291bnQrKztcbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5cbi8vIHNyYy9xdWVyeS9yZWFjdC9idWlsZEhvb2tzLnRzXG5pbXBvcnQgeyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlMiB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgeyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcbmltcG9ydCB7IFF1ZXJ5U3RhdHVzLCBza2lwVG9rZW4gfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdC9xdWVyeVwiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZURlYnVnVmFsdWUsIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QzLCB1c2VMYXlvdXRFZmZlY3QsIHVzZU1lbW8gYXMgdXNlTWVtbzIsIHVzZVJlZiBhcyB1c2VSZWYzLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2hhbGxvd0VxdWFsIGFzIHNoYWxsb3dFcXVhbDIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcblxuLy8gc3JjL3F1ZXJ5L2RlZmF1bHRTZXJpYWxpemVRdWVyeUFyZ3MudHNcbnZhciBjYWNoZSA9IFdlYWtNYXAgPyAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSA6IHZvaWQgMDtcbnZhciBkZWZhdWx0U2VyaWFsaXplUXVlcnlBcmdzID0gKHtcbiAgZW5kcG9pbnROYW1lLFxuICBxdWVyeUFyZ3Ncbn0pID0+IHtcbiAgbGV0IHNlcmlhbGl6ZWQgPSBcIlwiO1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZT8uZ2V0KHF1ZXJ5QXJncyk7XG4gIGlmICh0eXBlb2YgY2FjaGVkID09PSBcInN0cmluZ1wiKSB7XG4gICAgc2VyaWFsaXplZCA9IGNhY2hlZDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdHJpbmdpZmllZCA9IEpTT04uc3RyaW5naWZ5KHF1ZXJ5QXJncywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIHZhbHVlID0gdHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiID8ge1xuICAgICAgICAkYmlnaW50OiB2YWx1ZS50b1N0cmluZygpXG4gICAgICB9IDogdmFsdWU7XG4gICAgICB2YWx1ZSA9IGlzUGxhaW5PYmplY3QodmFsdWUpID8gT2JqZWN0LmtleXModmFsdWUpLnNvcnQoKS5yZWR1Y2UoKGFjYywga2V5MikgPT4ge1xuICAgICAgICBhY2Nba2V5Ml0gPSB2YWx1ZVtrZXkyXTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KSA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHF1ZXJ5QXJncykpIHtcbiAgICAgIGNhY2hlPy5zZXQocXVlcnlBcmdzLCBzdHJpbmdpZmllZCk7XG4gICAgfVxuICAgIHNlcmlhbGl6ZWQgPSBzdHJpbmdpZmllZDtcbiAgfVxuICByZXR1cm4gYCR7ZW5kcG9pbnROYW1lfSgke3NlcmlhbGl6ZWR9KWA7XG59O1xuXG4vLyBzcmMvcXVlcnkvcmVhY3QvY29uc3RhbnRzLnRzXG52YXIgVU5JTklUSUFMSVpFRF9WQUxVRSA9IFN5bWJvbCgpO1xuXG4vLyBzcmMvcXVlcnkvcmVhY3QvdXNlU2VyaWFsaXplZFN0YWJsZVZhbHVlLnRzXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlU3RhYmxlUXVlcnlBcmdzKHF1ZXJ5QXJncywgc2VyaWFsaXplLCBlbmRwb2ludERlZmluaXRpb24sIGVuZHBvaW50TmFtZSkge1xuICBjb25zdCBpbmNvbWluZyA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBxdWVyeUFyZ3MsXG4gICAgc2VyaWFsaXplZDogdHlwZW9mIHF1ZXJ5QXJncyA9PSBcIm9iamVjdFwiID8gc2VyaWFsaXplKHtcbiAgICAgIHF1ZXJ5QXJncyxcbiAgICAgIGVuZHBvaW50RGVmaW5pdGlvbixcbiAgICAgIGVuZHBvaW50TmFtZVxuICAgIH0pIDogcXVlcnlBcmdzXG4gIH0pLCBbcXVlcnlBcmdzLCBzZXJpYWxpemUsIGVuZHBvaW50RGVmaW5pdGlvbiwgZW5kcG9pbnROYW1lXSk7XG4gIGNvbnN0IGNhY2hlMiA9IHVzZVJlZihpbmNvbWluZyk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNhY2hlMi5jdXJyZW50LnNlcmlhbGl6ZWQgIT09IGluY29taW5nLnNlcmlhbGl6ZWQpIHtcbiAgICAgIGNhY2hlMi5jdXJyZW50ID0gaW5jb21pbmc7XG4gICAgfVxuICB9LCBbaW5jb21pbmddKTtcbiAgcmV0dXJuIGNhY2hlMi5jdXJyZW50LnNlcmlhbGl6ZWQgPT09IGluY29taW5nLnNlcmlhbGl6ZWQgPyBjYWNoZTIuY3VycmVudC5xdWVyeUFyZ3MgOiBxdWVyeUFyZ3M7XG59XG5cbi8vIHNyYy9xdWVyeS9yZWFjdC91c2VTaGFsbG93U3RhYmxlVmFsdWUudHNcbmltcG9ydCB7IHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QyLCB1c2VSZWYgYXMgdXNlUmVmMiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2hhbGxvd0VxdWFsIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5mdW5jdGlvbiB1c2VTaGFsbG93U3RhYmxlVmFsdWUodmFsdWUpIHtcbiAgY29uc3QgY2FjaGUyID0gdXNlUmVmMih2YWx1ZSk7XG4gIHVzZUVmZmVjdDIoKCkgPT4ge1xuICAgIGlmICghc2hhbGxvd0VxdWFsKGNhY2hlMi5jdXJyZW50LCB2YWx1ZSkpIHtcbiAgICAgIGNhY2hlMi5jdXJyZW50ID0gdmFsdWU7XG4gICAgfVxuICB9LCBbdmFsdWVdKTtcbiAgcmV0dXJuIHNoYWxsb3dFcXVhbChjYWNoZTIuY3VycmVudCwgdmFsdWUpID8gY2FjaGUyLmN1cnJlbnQgOiB2YWx1ZTtcbn1cblxuLy8gc3JjL3F1ZXJ5L3JlYWN0L2J1aWxkSG9va3MudHNcbnZhciBjYW5Vc2VET00gPSAoKSA9PiAhISh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiKTtcbnZhciBpc0RPTSA9IC8qIEBfX1BVUkVfXyAqLyBjYW5Vc2VET00oKTtcbnZhciBpc1J1bm5pbmdJblJlYWN0TmF0aXZlID0gKCkgPT4gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJSZWFjdE5hdGl2ZVwiO1xudmFyIGlzUmVhY3ROYXRpdmUgPSAvKiBAX19QVVJFX18gKi8gaXNSdW5uaW5nSW5SZWFjdE5hdGl2ZSgpO1xudmFyIGdldFVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSAoKSA9PiBpc0RPTSB8fCBpc1JlYWN0TmF0aXZlID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0MztcbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gLyogQF9fUFVSRV9fICovIGdldFVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKTtcbnZhciBub1BlbmRpbmdRdWVyeVN0YXRlU2VsZWN0b3IgPSAoc2VsZWN0ZWQpID0+IHtcbiAgaWYgKHNlbGVjdGVkLmlzVW5pbml0aWFsaXplZCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zZWxlY3RlZCxcbiAgICAgIGlzVW5pbml0aWFsaXplZDogZmFsc2UsXG4gICAgICBpc0ZldGNoaW5nOiB0cnVlLFxuICAgICAgaXNMb2FkaW5nOiBzZWxlY3RlZC5kYXRhICE9PSB2b2lkIDAgPyBmYWxzZSA6IHRydWUsXG4gICAgICBzdGF0dXM6IFF1ZXJ5U3RhdHVzLnBlbmRpbmdcbiAgICB9O1xuICB9XG4gIHJldHVybiBzZWxlY3RlZDtcbn07XG5mdW5jdGlvbiBidWlsZEhvb2tzKHtcbiAgYXBpLFxuICBtb2R1bGVPcHRpb25zOiB7XG4gICAgYmF0Y2gsXG4gICAgaG9va3M6IHtcbiAgICAgIHVzZURpc3BhdGNoLFxuICAgICAgdXNlU2VsZWN0b3IsXG4gICAgICB1c2VTdG9yZVxuICAgIH0sXG4gICAgdW5zdGFibGVfX3NpZGVFZmZlY3RzSW5SZW5kZXIsXG4gICAgY3JlYXRlU2VsZWN0b3I6IGNyZWF0ZVNlbGVjdG9yMlxuICB9LFxuICBzZXJpYWxpemVRdWVyeUFyZ3MsXG4gIGNvbnRleHRcbn0pIHtcbiAgY29uc3QgdXNlUG9zc2libHlJbW1lZGlhdGVFZmZlY3QgPSB1bnN0YWJsZV9fc2lkZUVmZmVjdHNJblJlbmRlciA/IChjYikgPT4gY2IoKSA6IHVzZUVmZmVjdDM7XG4gIHJldHVybiB7XG4gICAgYnVpbGRRdWVyeUhvb2tzLFxuICAgIGJ1aWxkTXV0YXRpb25Ib29rLFxuICAgIHVzZVByZWZldGNoXG4gIH07XG4gIGZ1bmN0aW9uIHF1ZXJ5U3RhdGVQcmVTZWxlY3RvcihjdXJyZW50U3RhdGUsIGxhc3RSZXN1bHQsIHF1ZXJ5QXJncykge1xuICAgIGlmIChsYXN0UmVzdWx0Py5lbmRwb2ludE5hbWUgJiYgY3VycmVudFN0YXRlLmlzVW5pbml0aWFsaXplZCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbmRwb2ludE5hbWVcbiAgICAgIH0gPSBsYXN0UmVzdWx0O1xuICAgICAgY29uc3QgZW5kcG9pbnREZWZpbml0aW9uID0gY29udGV4dC5lbmRwb2ludERlZmluaXRpb25zW2VuZHBvaW50TmFtZV07XG4gICAgICBpZiAoc2VyaWFsaXplUXVlcnlBcmdzKHtcbiAgICAgICAgcXVlcnlBcmdzOiBsYXN0UmVzdWx0Lm9yaWdpbmFsQXJncyxcbiAgICAgICAgZW5kcG9pbnREZWZpbml0aW9uLFxuICAgICAgICBlbmRwb2ludE5hbWVcbiAgICAgIH0pID09PSBzZXJpYWxpemVRdWVyeUFyZ3Moe1xuICAgICAgICBxdWVyeUFyZ3MsXG4gICAgICAgIGVuZHBvaW50RGVmaW5pdGlvbixcbiAgICAgICAgZW5kcG9pbnROYW1lXG4gICAgICB9KSkgbGFzdFJlc3VsdCA9IHZvaWQgMDtcbiAgICB9XG4gICAgbGV0IGRhdGEgPSBjdXJyZW50U3RhdGUuaXNTdWNjZXNzID8gY3VycmVudFN0YXRlLmRhdGEgOiBsYXN0UmVzdWx0Py5kYXRhO1xuICAgIGlmIChkYXRhID09PSB2b2lkIDApIGRhdGEgPSBjdXJyZW50U3RhdGUuZGF0YTtcbiAgICBjb25zdCBoYXNEYXRhID0gZGF0YSAhPT0gdm9pZCAwO1xuICAgIGNvbnN0IGlzRmV0Y2hpbmcgPSBjdXJyZW50U3RhdGUuaXNMb2FkaW5nO1xuICAgIGNvbnN0IGlzTG9hZGluZyA9ICghbGFzdFJlc3VsdCB8fCBsYXN0UmVzdWx0LmlzTG9hZGluZyB8fCBsYXN0UmVzdWx0LmlzVW5pbml0aWFsaXplZCkgJiYgIWhhc0RhdGEgJiYgaXNGZXRjaGluZztcbiAgICBjb25zdCBpc1N1Y2Nlc3MgPSBjdXJyZW50U3RhdGUuaXNTdWNjZXNzIHx8IGlzRmV0Y2hpbmcgJiYgaGFzRGF0YTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY3VycmVudFN0YXRlLFxuICAgICAgZGF0YSxcbiAgICAgIGN1cnJlbnREYXRhOiBjdXJyZW50U3RhdGUuZGF0YSxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICBpc0xvYWRpbmcsXG4gICAgICBpc1N1Y2Nlc3NcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHVzZVByZWZldGNoKGVuZHBvaW50TmFtZSwgZGVmYXVsdE9wdGlvbnMpIHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3Qgc3RhYmxlRGVmYXVsdE9wdGlvbnMgPSB1c2VTaGFsbG93U3RhYmxlVmFsdWUoZGVmYXVsdE9wdGlvbnMpO1xuICAgIHJldHVybiB1c2VDYWxsYmFjaygoYXJnLCBvcHRpb25zKSA9PiBkaXNwYXRjaChhcGkudXRpbC5wcmVmZXRjaChlbmRwb2ludE5hbWUsIGFyZywge1xuICAgICAgLi4uc3RhYmxlRGVmYXVsdE9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfSkpLCBbZW5kcG9pbnROYW1lLCBkaXNwYXRjaCwgc3RhYmxlRGVmYXVsdE9wdGlvbnNdKTtcbiAgfVxuICBmdW5jdGlvbiBidWlsZFF1ZXJ5SG9va3MobmFtZSkge1xuICAgIGNvbnN0IHVzZVF1ZXJ5U3Vic2NyaXB0aW9uID0gKGFyZywge1xuICAgICAgcmVmZXRjaE9uUmVjb25uZWN0LFxuICAgICAgcmVmZXRjaE9uRm9jdXMsXG4gICAgICByZWZldGNoT25Nb3VudE9yQXJnQ2hhbmdlLFxuICAgICAgc2tpcCA9IGZhbHNlLFxuICAgICAgcG9sbGluZ0ludGVydmFsID0gMCxcbiAgICAgIHNraXBQb2xsaW5nSWZVbmZvY3VzZWQgPSBmYWxzZVxuICAgIH0gPSB7fSkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpbml0aWF0ZVxuICAgICAgfSA9IGFwaS5lbmRwb2ludHNbbmFtZV07XG4gICAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb25TZWxlY3RvcnNSZWYgPSB1c2VSZWYzKHZvaWQgMCk7XG4gICAgICBpZiAoIXN1YnNjcmlwdGlvblNlbGVjdG9yc1JlZi5jdXJyZW50KSB7XG4gICAgICAgIGNvbnN0IHJldHVybmVkVmFsdWUgPSBkaXNwYXRjaChhcGkuaW50ZXJuYWxBY3Rpb25zLmludGVybmFsX2dldFJUS1FTdWJzY3JpcHRpb25zKCkpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXR1cm5lZFZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiByZXR1cm5lZFZhbHVlPy50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gX2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzcpIDogYFdhcm5pbmc6IE1pZGRsZXdhcmUgZm9yIFJUSy1RdWVyeSBBUEkgYXQgcmVkdWNlclBhdGggXCIke2FwaS5yZWR1Y2VyUGF0aH1cIiBoYXMgbm90IGJlZW4gYWRkZWQgdG8gdGhlIHN0b3JlLlxuICAgIFlvdSBtdXN0IGFkZCB0aGUgbWlkZGxld2FyZSBmb3IgUlRLLVF1ZXJ5IHRvIGZ1bmN0aW9uIGNvcnJlY3RseSFgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaXB0aW9uU2VsZWN0b3JzUmVmLmN1cnJlbnQgPSByZXR1cm5lZFZhbHVlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhYmxlQXJnID0gdXNlU3RhYmxlUXVlcnlBcmdzKFxuICAgICAgICBza2lwID8gc2tpcFRva2VuIDogYXJnLFxuICAgICAgICAvLyBFdmVuIGlmIHRoZSB1c2VyIHByb3ZpZGVkIGEgcGVyLWVuZHBvaW50IGBzZXJpYWxpemVRdWVyeUFyZ3NgIHdpdGhcbiAgICAgICAgLy8gYSBjb25zaXN0ZW50IHJldHVybiB2YWx1ZSwgX2hlcmVfIHdlIHdhbnQgdG8gdXNlIHRoZSBkZWZhdWx0IGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIGNhbiB0ZWxsIGlmIF9hbnl0aGluZ18gYWN0dWFsbHkgY2hhbmdlZC4gT3RoZXJ3aXNlLCB3ZSBjYW4gZW5kIHVwXG4gICAgICAgIC8vIHdpdGggYSBjYXNlIHdoZXJlIHRoZSBxdWVyeSBhcmdzIGRpZCBjaGFuZ2UgYnV0IHRoZSBzZXJpYWxpemF0aW9uIGRvZXNuJ3QsXG4gICAgICAgIC8vIGFuZCB0aGVuIHdlIG5ldmVyIHRyeSB0byBpbml0aWF0ZSBhIHJlZmV0Y2guXG4gICAgICAgIGRlZmF1bHRTZXJpYWxpemVRdWVyeUFyZ3MsXG4gICAgICAgIGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tuYW1lXSxcbiAgICAgICAgbmFtZVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHN0YWJsZVN1YnNjcmlwdGlvbk9wdGlvbnMgPSB1c2VTaGFsbG93U3RhYmxlVmFsdWUoe1xuICAgICAgICByZWZldGNoT25SZWNvbm5lY3QsXG4gICAgICAgIHJlZmV0Y2hPbkZvY3VzLFxuICAgICAgICBwb2xsaW5nSW50ZXJ2YWwsXG4gICAgICAgIHNraXBQb2xsaW5nSWZVbmZvY3VzZWRcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbGFzdFJlbmRlckhhZFN1YnNjcmlwdGlvbiA9IHVzZVJlZjMoZmFsc2UpO1xuICAgICAgY29uc3QgcHJvbWlzZVJlZiA9IHVzZVJlZjModm9pZCAwKTtcbiAgICAgIGxldCB7XG4gICAgICAgIHF1ZXJ5Q2FjaGVLZXksXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSA9IHByb21pc2VSZWYuY3VycmVudCB8fCB7fTtcbiAgICAgIGxldCBjdXJyZW50UmVuZGVySGFzU3Vic2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICBpZiAocXVlcnlDYWNoZUtleSAmJiByZXF1ZXN0SWQpIHtcbiAgICAgICAgY3VycmVudFJlbmRlckhhc1N1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvblNlbGVjdG9yc1JlZi5jdXJyZW50LmlzUmVxdWVzdFN1YnNjcmliZWQocXVlcnlDYWNoZUtleSwgcmVxdWVzdElkKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvblJlbW92ZWQgPSAhY3VycmVudFJlbmRlckhhc1N1YnNjcmlwdGlvbiAmJiBsYXN0UmVuZGVySGFkU3Vic2NyaXB0aW9uLmN1cnJlbnQ7XG4gICAgICB1c2VQb3NzaWJseUltbWVkaWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxhc3RSZW5kZXJIYWRTdWJzY3JpcHRpb24uY3VycmVudCA9IGN1cnJlbnRSZW5kZXJIYXNTdWJzY3JpcHRpb247XG4gICAgICB9KTtcbiAgICAgIHVzZVBvc3NpYmx5SW1tZWRpYXRlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvblJlbW92ZWQpIHtcbiAgICAgICAgICBwcm9taXNlUmVmLmN1cnJlbnQgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0sIFtzdWJzY3JpcHRpb25SZW1vdmVkXSk7XG4gICAgICB1c2VQb3NzaWJseUltbWVkaWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxhc3RQcm9taXNlID0gcHJvbWlzZVJlZi5jdXJyZW50O1xuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicmVtb3ZlTWVPbkNvbXBpbGF0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhzdWJzY3JpcHRpb25SZW1vdmVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhYmxlQXJnID09PSBza2lwVG9rZW4pIHtcbiAgICAgICAgICBsYXN0UHJvbWlzZT8udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICBwcm9taXNlUmVmLmN1cnJlbnQgPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RTdWJzY3JpcHRpb25PcHRpb25zID0gcHJvbWlzZVJlZi5jdXJyZW50Py5zdWJzY3JpcHRpb25PcHRpb25zO1xuICAgICAgICBpZiAoIWxhc3RQcm9taXNlIHx8IGxhc3RQcm9taXNlLmFyZyAhPT0gc3RhYmxlQXJnKSB7XG4gICAgICAgICAgbGFzdFByb21pc2U/LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgY29uc3QgcHJvbWlzZSA9IGRpc3BhdGNoKGluaXRpYXRlKHN0YWJsZUFyZywge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uT3B0aW9uczogc3RhYmxlU3Vic2NyaXB0aW9uT3B0aW9ucyxcbiAgICAgICAgICAgIGZvcmNlUmVmZXRjaDogcmVmZXRjaE9uTW91bnRPckFyZ0NoYW5nZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBwcm9taXNlUmVmLmN1cnJlbnQgPSBwcm9taXNlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YWJsZVN1YnNjcmlwdGlvbk9wdGlvbnMgIT09IGxhc3RTdWJzY3JpcHRpb25PcHRpb25zKSB7XG4gICAgICAgICAgbGFzdFByb21pc2UudXBkYXRlU3Vic2NyaXB0aW9uT3B0aW9ucyhzdGFibGVTdWJzY3JpcHRpb25PcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSwgW2Rpc3BhdGNoLCBpbml0aWF0ZSwgcmVmZXRjaE9uTW91bnRPckFyZ0NoYW5nZSwgc3RhYmxlQXJnLCBzdGFibGVTdWJzY3JpcHRpb25PcHRpb25zLCBzdWJzY3JpcHRpb25SZW1vdmVkXSk7XG4gICAgICB1c2VFZmZlY3QzKCgpID0+IHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBwcm9taXNlUmVmLmN1cnJlbnQ/LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgcHJvbWlzZVJlZi5jdXJyZW50ID0gdm9pZCAwO1xuICAgICAgICB9O1xuICAgICAgfSwgW10pO1xuICAgICAgcmV0dXJuIHVzZU1lbW8yKCgpID0+ICh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG1ldGhvZCB0byBtYW51YWxseSByZWZldGNoIGRhdGEgZm9yIHRoZSBxdWVyeVxuICAgICAgICAgKi9cbiAgICAgICAgcmVmZXRjaDogKCkgPT4ge1xuICAgICAgICAgIGlmICghcHJvbWlzZVJlZi5jdXJyZW50KSB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gX2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UyKDM4KSA6IFwiQ2Fubm90IHJlZmV0Y2ggYSBxdWVyeSB0aGF0IGhhcyBub3QgYmVlbiBzdGFydGVkIHlldC5cIik7XG4gICAgICAgICAgcmV0dXJuIHByb21pc2VSZWYuY3VycmVudD8ucmVmZXRjaCgpO1xuICAgICAgICB9XG4gICAgICB9KSwgW10pO1xuICAgIH07XG4gICAgY29uc3QgdXNlTGF6eVF1ZXJ5U3Vic2NyaXB0aW9uID0gKHtcbiAgICAgIHJlZmV0Y2hPblJlY29ubmVjdCxcbiAgICAgIHJlZmV0Y2hPbkZvY3VzLFxuICAgICAgcG9sbGluZ0ludGVydmFsID0gMCxcbiAgICAgIHNraXBQb2xsaW5nSWZVbmZvY3VzZWQgPSBmYWxzZVxuICAgIH0gPSB7fSkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpbml0aWF0ZVxuICAgICAgfSA9IGFwaS5lbmRwb2ludHNbbmFtZV07XG4gICAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgICBjb25zdCBbYXJnLCBzZXRBcmddID0gdXNlU3RhdGUoVU5JTklUSUFMSVpFRF9WQUxVRSk7XG4gICAgICBjb25zdCBwcm9taXNlUmVmID0gdXNlUmVmMyh2b2lkIDApO1xuICAgICAgY29uc3Qgc3RhYmxlU3Vic2NyaXB0aW9uT3B0aW9ucyA9IHVzZVNoYWxsb3dTdGFibGVWYWx1ZSh7XG4gICAgICAgIHJlZmV0Y2hPblJlY29ubmVjdCxcbiAgICAgICAgcmVmZXRjaE9uRm9jdXMsXG4gICAgICAgIHBvbGxpbmdJbnRlcnZhbCxcbiAgICAgICAgc2tpcFBvbGxpbmdJZlVuZm9jdXNlZFxuICAgICAgfSk7XG4gICAgICB1c2VQb3NzaWJseUltbWVkaWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxhc3RTdWJzY3JpcHRpb25PcHRpb25zID0gcHJvbWlzZVJlZi5jdXJyZW50Py5zdWJzY3JpcHRpb25PcHRpb25zO1xuICAgICAgICBpZiAoc3RhYmxlU3Vic2NyaXB0aW9uT3B0aW9ucyAhPT0gbGFzdFN1YnNjcmlwdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgICBwcm9taXNlUmVmLmN1cnJlbnQ/LnVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnMoc3RhYmxlU3Vic2NyaXB0aW9uT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0sIFtzdGFibGVTdWJzY3JpcHRpb25PcHRpb25zXSk7XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb25PcHRpb25zUmVmID0gdXNlUmVmMyhzdGFibGVTdWJzY3JpcHRpb25PcHRpb25zKTtcbiAgICAgIHVzZVBvc3NpYmx5SW1tZWRpYXRlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc3Vic2NyaXB0aW9uT3B0aW9uc1JlZi5jdXJyZW50ID0gc3RhYmxlU3Vic2NyaXB0aW9uT3B0aW9ucztcbiAgICAgIH0sIFtzdGFibGVTdWJzY3JpcHRpb25PcHRpb25zXSk7XG4gICAgICBjb25zdCB0cmlnZ2VyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24oYXJnMiwgcHJlZmVyQ2FjaGVWYWx1ZSA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBwcm9taXNlO1xuICAgICAgICBiYXRjaCgoKSA9PiB7XG4gICAgICAgICAgcHJvbWlzZVJlZi5jdXJyZW50Py51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIHByb21pc2VSZWYuY3VycmVudCA9IHByb21pc2UgPSBkaXNwYXRjaChpbml0aWF0ZShhcmcyLCB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25PcHRpb25zOiBzdWJzY3JpcHRpb25PcHRpb25zUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICBmb3JjZVJlZmV0Y2g6ICFwcmVmZXJDYWNoZVZhbHVlXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHNldEFyZyhhcmcyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfSwgW2Rpc3BhdGNoLCBpbml0aWF0ZV0pO1xuICAgICAgdXNlRWZmZWN0MygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgcHJvbWlzZVJlZj8uY3VycmVudD8udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfTtcbiAgICAgIH0sIFtdKTtcbiAgICAgIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgICAgICBpZiAoYXJnICE9PSBVTklOSVRJQUxJWkVEX1ZBTFVFICYmICFwcm9taXNlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGFyZywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIFthcmcsIHRyaWdnZXJdKTtcbiAgICAgIHJldHVybiB1c2VNZW1vMigoKSA9PiBbdHJpZ2dlciwgYXJnXSwgW3RyaWdnZXIsIGFyZ10pO1xuICAgIH07XG4gICAgY29uc3QgdXNlUXVlcnlTdGF0ZSA9IChhcmcsIHtcbiAgICAgIHNraXAgPSBmYWxzZSxcbiAgICAgIHNlbGVjdEZyb21SZXN1bHRcbiAgICB9ID0ge30pID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2VsZWN0XG4gICAgICB9ID0gYXBpLmVuZHBvaW50c1tuYW1lXTtcbiAgICAgIGNvbnN0IHN0YWJsZUFyZyA9IHVzZVN0YWJsZVF1ZXJ5QXJncyhza2lwID8gc2tpcFRva2VuIDogYXJnLCBzZXJpYWxpemVRdWVyeUFyZ3MsIGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tuYW1lXSwgbmFtZSk7XG4gICAgICBjb25zdCBsYXN0VmFsdWUgPSB1c2VSZWYzKHZvaWQgMCk7XG4gICAgICBjb25zdCBzZWxlY3REZWZhdWx0UmVzdWx0ID0gdXNlTWVtbzIoKCkgPT4gY3JlYXRlU2VsZWN0b3IyKFtzZWxlY3Qoc3RhYmxlQXJnKSwgKF8sIGxhc3RSZXN1bHQpID0+IGxhc3RSZXN1bHQsIChfKSA9PiBzdGFibGVBcmddLCBxdWVyeVN0YXRlUHJlU2VsZWN0b3IsIHtcbiAgICAgICAgbWVtb2l6ZU9wdGlvbnM6IHtcbiAgICAgICAgICByZXN1bHRFcXVhbGl0eUNoZWNrOiBzaGFsbG93RXF1YWwyXG4gICAgICAgIH1cbiAgICAgIH0pLCBbc2VsZWN0LCBzdGFibGVBcmddKTtcbiAgICAgIGNvbnN0IHF1ZXJ5U2VsZWN0b3IgPSB1c2VNZW1vMigoKSA9PiBzZWxlY3RGcm9tUmVzdWx0ID8gY3JlYXRlU2VsZWN0b3IyKFtzZWxlY3REZWZhdWx0UmVzdWx0XSwgc2VsZWN0RnJvbVJlc3VsdCwge1xuICAgICAgICBkZXZNb2RlQ2hlY2tzOiB7XG4gICAgICAgICAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrOiBcIm5ldmVyXCJcbiAgICAgICAgfVxuICAgICAgfSkgOiBzZWxlY3REZWZhdWx0UmVzdWx0LCBbc2VsZWN0RGVmYXVsdFJlc3VsdCwgc2VsZWN0RnJvbVJlc3VsdF0pO1xuICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBxdWVyeVNlbGVjdG9yKHN0YXRlLCBsYXN0VmFsdWUuY3VycmVudCksIHNoYWxsb3dFcXVhbDIpO1xuICAgICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgICAgY29uc3QgbmV3TGFzdFZhbHVlID0gc2VsZWN0RGVmYXVsdFJlc3VsdChzdG9yZS5nZXRTdGF0ZSgpLCBsYXN0VmFsdWUuY3VycmVudCk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGFzdFZhbHVlLmN1cnJlbnQgPSBuZXdMYXN0VmFsdWU7XG4gICAgICB9LCBbbmV3TGFzdFZhbHVlXSk7XG4gICAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZVF1ZXJ5U3RhdGUsXG4gICAgICB1c2VRdWVyeVN1YnNjcmlwdGlvbixcbiAgICAgIHVzZUxhenlRdWVyeVN1YnNjcmlwdGlvbixcbiAgICAgIHVzZUxhenlRdWVyeShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IFt0cmlnZ2VyLCBhcmddID0gdXNlTGF6eVF1ZXJ5U3Vic2NyaXB0aW9uKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBxdWVyeVN0YXRlUmVzdWx0cyA9IHVzZVF1ZXJ5U3RhdGUoYXJnLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICBza2lwOiBhcmcgPT09IFVOSU5JVElBTElaRURfVkFMVUVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGluZm8gPSB1c2VNZW1vMigoKSA9PiAoe1xuICAgICAgICAgIGxhc3RBcmc6IGFyZ1xuICAgICAgICB9KSwgW2FyZ10pO1xuICAgICAgICByZXR1cm4gdXNlTWVtbzIoKCkgPT4gW3RyaWdnZXIsIHF1ZXJ5U3RhdGVSZXN1bHRzLCBpbmZvXSwgW3RyaWdnZXIsIHF1ZXJ5U3RhdGVSZXN1bHRzLCBpbmZvXSk7XG4gICAgICB9LFxuICAgICAgdXNlUXVlcnkoYXJnLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3Vic2NyaXB0aW9uUmVzdWx0cyA9IHVzZVF1ZXJ5U3Vic2NyaXB0aW9uKGFyZywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RhdGVSZXN1bHRzID0gdXNlUXVlcnlTdGF0ZShhcmcsIHtcbiAgICAgICAgICBzZWxlY3RGcm9tUmVzdWx0OiBhcmcgPT09IHNraXBUb2tlbiB8fCBvcHRpb25zPy5za2lwID8gdm9pZCAwIDogbm9QZW5kaW5nUXVlcnlTdGF0ZVNlbGVjdG9yLFxuICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICBpc0xvYWRpbmcsXG4gICAgICAgICAgaXNTdWNjZXNzLFxuICAgICAgICAgIGlzRXJyb3IsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgfSA9IHF1ZXJ5U3RhdGVSZXN1bHRzO1xuICAgICAgICB1c2VEZWJ1Z1ZhbHVlKHtcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICBpc0xvYWRpbmcsXG4gICAgICAgICAgaXNTdWNjZXNzLFxuICAgICAgICAgIGlzRXJyb3IsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1c2VNZW1vMigoKSA9PiAoe1xuICAgICAgICAgIC4uLnF1ZXJ5U3RhdGVSZXN1bHRzLFxuICAgICAgICAgIC4uLnF1ZXJ5U3Vic2NyaXB0aW9uUmVzdWx0c1xuICAgICAgICB9KSwgW3F1ZXJ5U3RhdGVSZXN1bHRzLCBxdWVyeVN1YnNjcmlwdGlvblJlc3VsdHNdKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGJ1aWxkTXV0YXRpb25Ib29rKG5hbWUpIHtcbiAgICByZXR1cm4gKHtcbiAgICAgIHNlbGVjdEZyb21SZXN1bHQsXG4gICAgICBmaXhlZENhY2hlS2V5XG4gICAgfSA9IHt9KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHNlbGVjdCxcbiAgICAgICAgaW5pdGlhdGVcbiAgICAgIH0gPSBhcGkuZW5kcG9pbnRzW25hbWVdO1xuICAgICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgICAgY29uc3QgW3Byb21pc2UsIHNldFByb21pc2VdID0gdXNlU3RhdGUoKTtcbiAgICAgIHVzZUVmZmVjdDMoKCkgPT4gKCkgPT4ge1xuICAgICAgICBpZiAoIXByb21pc2U/LmFyZy5maXhlZENhY2hlS2V5KSB7XG4gICAgICAgICAgcHJvbWlzZT8ucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgW3Byb21pc2VdKTtcbiAgICAgIGNvbnN0IHRyaWdnZXJNdXRhdGlvbiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uKGFyZykge1xuICAgICAgICBjb25zdCBwcm9taXNlMiA9IGRpc3BhdGNoKGluaXRpYXRlKGFyZywge1xuICAgICAgICAgIGZpeGVkQ2FjaGVLZXlcbiAgICAgICAgfSkpO1xuICAgICAgICBzZXRQcm9taXNlKHByb21pc2UyKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2UyO1xuICAgICAgfSwgW2Rpc3BhdGNoLCBpbml0aWF0ZSwgZml4ZWRDYWNoZUtleV0pO1xuICAgICAgY29uc3Qge1xuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0gPSBwcm9taXNlIHx8IHt9O1xuICAgICAgY29uc3Qgc2VsZWN0RGVmYXVsdFJlc3VsdCA9IHVzZU1lbW8yKCgpID0+IHNlbGVjdCh7XG4gICAgICAgIGZpeGVkQ2FjaGVLZXksXG4gICAgICAgIHJlcXVlc3RJZDogcHJvbWlzZT8ucmVxdWVzdElkXG4gICAgICB9KSwgW2ZpeGVkQ2FjaGVLZXksIHByb21pc2UsIHNlbGVjdF0pO1xuICAgICAgY29uc3QgbXV0YXRpb25TZWxlY3RvciA9IHVzZU1lbW8yKCgpID0+IHNlbGVjdEZyb21SZXN1bHQgPyBjcmVhdGVTZWxlY3RvcjIoW3NlbGVjdERlZmF1bHRSZXN1bHRdLCBzZWxlY3RGcm9tUmVzdWx0KSA6IHNlbGVjdERlZmF1bHRSZXN1bHQsIFtzZWxlY3RGcm9tUmVzdWx0LCBzZWxlY3REZWZhdWx0UmVzdWx0XSk7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB1c2VTZWxlY3RvcihtdXRhdGlvblNlbGVjdG9yLCBzaGFsbG93RXF1YWwyKTtcbiAgICAgIGNvbnN0IG9yaWdpbmFsQXJncyA9IGZpeGVkQ2FjaGVLZXkgPT0gbnVsbCA/IHByb21pc2U/LmFyZy5vcmlnaW5hbEFyZ3MgOiB2b2lkIDA7XG4gICAgICBjb25zdCByZXNldCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgYmF0Y2goKCkgPT4ge1xuICAgICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgICBzZXRQcm9taXNlKHZvaWQgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaXhlZENhY2hlS2V5KSB7XG4gICAgICAgICAgICBkaXNwYXRjaChhcGkuaW50ZXJuYWxBY3Rpb25zLnJlbW92ZU11dGF0aW9uUmVzdWx0KHtcbiAgICAgICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgICAgICBmaXhlZENhY2hlS2V5XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaXNwYXRjaCwgZml4ZWRDYWNoZUtleSwgcHJvbWlzZSwgcmVxdWVzdElkXSk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGVuZHBvaW50TmFtZSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBpc0xvYWRpbmcsXG4gICAgICAgIGlzU3VjY2VzcyxcbiAgICAgICAgaXNFcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH0gPSBjdXJyZW50U3RhdGU7XG4gICAgICB1c2VEZWJ1Z1ZhbHVlKHtcbiAgICAgICAgZW5kcG9pbnROYW1lLFxuICAgICAgICBkYXRhLFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGlzTG9hZGluZyxcbiAgICAgICAgaXNTdWNjZXNzLFxuICAgICAgICBpc0Vycm9yLFxuICAgICAgICBlcnJvclxuICAgICAgfSk7XG4gICAgICBjb25zdCBmaW5hbFN0YXRlID0gdXNlTWVtbzIoKCkgPT4gKHtcbiAgICAgICAgLi4uY3VycmVudFN0YXRlLFxuICAgICAgICBvcmlnaW5hbEFyZ3MsXG4gICAgICAgIHJlc2V0XG4gICAgICB9KSwgW2N1cnJlbnRTdGF0ZSwgb3JpZ2luYWxBcmdzLCByZXNldF0pO1xuICAgICAgcmV0dXJuIHVzZU1lbW8yKCgpID0+IFt0cmlnZ2VyTXV0YXRpb24sIGZpbmFsU3RhdGVdLCBbdHJpZ2dlck11dGF0aW9uLCBmaW5hbFN0YXRlXSk7XG4gICAgfTtcbiAgfVxufVxuXG4vLyBzcmMvcXVlcnkvcmVhY3QvbW9kdWxlLnRzXG52YXIgcmVhY3RIb29rc01vZHVsZU5hbWUgPSAvKiBAX19QVVJFX18gKi8gU3ltYm9sKCk7XG52YXIgcmVhY3RIb29rc01vZHVsZSA9ICh7XG4gIGJhdGNoID0gcnJCYXRjaCxcbiAgaG9va3MgPSB7XG4gICAgdXNlRGlzcGF0Y2g6IHJyVXNlRGlzcGF0Y2gsXG4gICAgdXNlU2VsZWN0b3I6IHJyVXNlU2VsZWN0b3IsXG4gICAgdXNlU3RvcmU6IHJyVXNlU3RvcmVcbiAgfSxcbiAgY3JlYXRlU2VsZWN0b3I6IGNyZWF0ZVNlbGVjdG9yMiA9IF9jcmVhdGVTZWxlY3RvcixcbiAgdW5zdGFibGVfX3NpZGVFZmZlY3RzSW5SZW5kZXIgPSBmYWxzZSxcbiAgLi4ucmVzdFxufSA9IHt9KSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zdCBob29rTmFtZXMgPSBbXCJ1c2VEaXNwYXRjaFwiLCBcInVzZVNlbGVjdG9yXCIsIFwidXNlU3RvcmVcIl07XG4gICAgbGV0IHdhcm5lZCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgaG9va05hbWUgb2YgaG9va05hbWVzKSB7XG4gICAgICBpZiAoY291bnRPYmplY3RLZXlzKHJlc3QpID4gMCkge1xuICAgICAgICBpZiAocmVzdFtob29rTmFtZV0pIHtcbiAgICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQXMgb2YgUlRLIDIuMCwgdGhlIGhvb2tzIG5vdyBuZWVkIHRvIGJlIHNwZWNpZmllZCBhcyBvbmUgb2JqZWN0LCBwcm92aWRlZCB1bmRlciBhIGBob29rc2Aga2V5OlxcbmByZWFjdEhvb2tzTW9kdWxlKHsgaG9va3M6IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yLCB1c2VTdG9yZSB9IH0pYFwiKTtcbiAgICAgICAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGhvb2tzW2hvb2tOYW1lXSA9IHJlc3RbaG9va05hbWVdO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBob29rc1tob29rTmFtZV0gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gX2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UzKDM2KSA6IGBXaGVuIHVzaW5nIGN1c3RvbSBob29rcyBmb3IgY29udGV4dCwgYWxsICR7aG9va05hbWVzLmxlbmd0aH0gaG9va3MgbmVlZCB0byBiZSBwcm92aWRlZDogJHtob29rTmFtZXMuam9pbihcIiwgXCIpfS5cbkhvb2sgJHtob29rTmFtZX0gd2FzIGVpdGhlciBub3QgcHJvdmlkZWQgb3Igbm90IGEgZnVuY3Rpb24uYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogcmVhY3RIb29rc01vZHVsZU5hbWUsXG4gICAgaW5pdChhcGksIHtcbiAgICAgIHNlcmlhbGl6ZVF1ZXJ5QXJnc1xuICAgIH0sIGNvbnRleHQpIHtcbiAgICAgIGNvbnN0IGFueUFwaSA9IGFwaTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYnVpbGRRdWVyeUhvb2tzLFxuICAgICAgICBidWlsZE11dGF0aW9uSG9vayxcbiAgICAgICAgdXNlUHJlZmV0Y2hcbiAgICAgIH0gPSBidWlsZEhvb2tzKHtcbiAgICAgICAgYXBpLFxuICAgICAgICBtb2R1bGVPcHRpb25zOiB7XG4gICAgICAgICAgYmF0Y2gsXG4gICAgICAgICAgaG9va3MsXG4gICAgICAgICAgdW5zdGFibGVfX3NpZGVFZmZlY3RzSW5SZW5kZXIsXG4gICAgICAgICAgY3JlYXRlU2VsZWN0b3I6IGNyZWF0ZVNlbGVjdG9yMlxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemVRdWVyeUFyZ3MsXG4gICAgICAgIGNvbnRleHRcbiAgICAgIH0pO1xuICAgICAgc2FmZUFzc2lnbihhbnlBcGksIHtcbiAgICAgICAgdXNlUHJlZmV0Y2hcbiAgICAgIH0pO1xuICAgICAgc2FmZUFzc2lnbihjb250ZXh0LCB7XG4gICAgICAgIGJhdGNoXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluamVjdEVuZHBvaW50KGVuZHBvaW50TmFtZSwgZGVmaW5pdGlvbikge1xuICAgICAgICAgIGlmIChpc1F1ZXJ5RGVmaW5pdGlvbihkZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICB1c2VRdWVyeSxcbiAgICAgICAgICAgICAgdXNlTGF6eVF1ZXJ5LFxuICAgICAgICAgICAgICB1c2VMYXp5UXVlcnlTdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAgIHVzZVF1ZXJ5U3RhdGUsXG4gICAgICAgICAgICAgIHVzZVF1ZXJ5U3Vic2NyaXB0aW9uXG4gICAgICAgICAgICB9ID0gYnVpbGRRdWVyeUhvb2tzKGVuZHBvaW50TmFtZSk7XG4gICAgICAgICAgICBzYWZlQXNzaWduKGFueUFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXSwge1xuICAgICAgICAgICAgICB1c2VRdWVyeSxcbiAgICAgICAgICAgICAgdXNlTGF6eVF1ZXJ5LFxuICAgICAgICAgICAgICB1c2VMYXp5UXVlcnlTdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAgIHVzZVF1ZXJ5U3RhdGUsXG4gICAgICAgICAgICAgIHVzZVF1ZXJ5U3Vic2NyaXB0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFwaVtgdXNlJHtjYXBpdGFsaXplKGVuZHBvaW50TmFtZSl9UXVlcnlgXSA9IHVzZVF1ZXJ5O1xuICAgICAgICAgICAgYXBpW2B1c2VMYXp5JHtjYXBpdGFsaXplKGVuZHBvaW50TmFtZSl9UXVlcnlgXSA9IHVzZUxhenlRdWVyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTXV0YXRpb25EZWZpbml0aW9uKGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VNdXRhdGlvbiA9IGJ1aWxkTXV0YXRpb25Ib29rKGVuZHBvaW50TmFtZSk7XG4gICAgICAgICAgICBzYWZlQXNzaWduKGFueUFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXSwge1xuICAgICAgICAgICAgICB1c2VNdXRhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhcGlbYHVzZSR7Y2FwaXRhbGl6ZShlbmRwb2ludE5hbWUpfU11dGF0aW9uYF0gPSB1c2VNdXRhdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLy8gc3JjL3F1ZXJ5L3JlYWN0L2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdC9xdWVyeVwiO1xuXG4vLyBzcmMvcXVlcnkvcmVhY3QvQXBpUHJvdmlkZXIudHN4XG5pbXBvcnQgeyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlNCB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0NCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUHJvdmlkZXIsIFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBzZXR1cExpc3RlbmVycyB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0L3F1ZXJ5XCI7XG5mdW5jdGlvbiBBcGlQcm92aWRlcihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gcHJvcHMuY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgY29uc3QgZXhpc3RpbmdDb250ZXh0ID0gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgaWYgKGV4aXN0aW5nQ29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBfZm9ybWF0UHJvZEVycm9yTWVzc2FnZTQoMzUpIDogXCJFeGlzdGluZyBSZWR1eCBjb250ZXh0IGRldGVjdGVkLiBJZiB5b3UgYWxyZWFkeSBoYXZlIGEgc3RvcmUgc2V0IHVwLCBwbGVhc2UgdXNlIHRoZSB0cmFkaXRpb25hbCBSZWR1eCBzZXR1cC5cIik7XG4gIH1cbiAgY29uc3QgW3N0b3JlXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IGNvbmZpZ3VyZVN0b3JlKHtcbiAgICByZWR1Y2VyOiB7XG4gICAgICBbcHJvcHMuYXBpLnJlZHVjZXJQYXRoXTogcHJvcHMuYXBpLnJlZHVjZXJcbiAgICB9LFxuICAgIG1pZGRsZXdhcmU6IChnRE0pID0+IGdETSgpLmNvbmNhdChwcm9wcy5hcGkubWlkZGxld2FyZSlcbiAgfSkpO1xuICB1c2VFZmZlY3Q0KCgpID0+IHByb3BzLnNldHVwTGlzdGVuZXJzID09PSBmYWxzZSA/IHZvaWQgMCA6IHNldHVwTGlzdGVuZXJzKHN0b3JlLmRpc3BhdGNoLCBwcm9wcy5zZXR1cExpc3RlbmVycyksIFtwcm9wcy5zZXR1cExpc3RlbmVycywgc3RvcmUuZGlzcGF0Y2hdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7IHN0b3JlLCBjb250ZXh0IH0sIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuLy8gc3JjL3F1ZXJ5L3JlYWN0L2luZGV4LnRzXG52YXIgY3JlYXRlQXBpID0gLyogQF9fUFVSRV9fICovIGJ1aWxkQ3JlYXRlQXBpKGNvcmVNb2R1bGUoKSwgcmVhY3RIb29rc01vZHVsZSgpKTtcbmV4cG9ydCB7XG4gIEFwaVByb3ZpZGVyLFxuICBVTklOSVRJQUxJWkVEX1ZBTFVFLFxuICBjcmVhdGVBcGksXG4gIHJlYWN0SG9va3NNb2R1bGUsXG4gIHJlYWN0SG9va3NNb2R1bGVOYW1lXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnRrLXF1ZXJ5LXJlYWN0Lm1vZGVybi5tanMubWFwIl0sIm5hbWVzIjpbImJ1aWxkQ3JlYXRlQXBpIiwiY29yZU1vZHVsZSIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJfZm9ybWF0UHJvZEVycm9yTWVzc2FnZTMiLCJiYXRjaCIsInJyQmF0Y2giLCJ1c2VEaXNwYXRjaCIsInJyVXNlRGlzcGF0Y2giLCJ1c2VTZWxlY3RvciIsInJyVXNlU2VsZWN0b3IiLCJ1c2VTdG9yZSIsInJyVXNlU3RvcmUiLCJjcmVhdGVTZWxlY3RvciIsIl9jcmVhdGVTZWxlY3RvciIsImlzUXVlcnlEZWZpbml0aW9uIiwiZSIsInR5cGUiLCJpc011dGF0aW9uRGVmaW5pdGlvbiIsInNhZmVBc3NpZ24iLCJ0YXJnZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleTIiLCJPYmplY3QiLCJhc3NpZ24iLCJhcHBseSIsImNvbmNhdCIsImNhcGl0YWxpemUiLCJzdHIiLCJyZXBsYWNlIiwidG9VcHBlckNhc2UiLCJjcmVhdGVBY3Rpb24iLCJjcmVhdGVTbGljZSIsImNyZWF0ZUFzeW5jVGh1bmsiLCJjb21iaW5lUmVkdWNlcnMiLCJjcmVhdGVOZXh0U3RhdGUiLCJpc0FueU9mIiwiaXNBbGxPZiIsImlzQWN0aW9uIiwiaXNQZW5kaW5nIiwiaXNSZWplY3RlZCIsImlzRnVsZmlsbGVkIiwiaXNSZWplY3RlZFdpdGhWYWx1ZSIsImlzQXN5bmNUaHVua0FjdGlvbiIsInByZXBhcmVBdXRvQmF0Y2hlZCIsIlNIT1VMRF9BVVRPQkFUQ0giLCJpc1BsYWluT2JqZWN0IiwibmFub2lkIiwiY291bnRPYmplY3RLZXlzIiwib2JqIiwiY291bnQiLCJfa2V5IiwiX2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UyIiwiX2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJRdWVyeVN0YXR1cyIsInNraXBUb2tlbiIsInVzZUNhbGxiYWNrIiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUVmZmVjdDMiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlTWVtbzIiLCJ1c2VSZWYiLCJ1c2VSZWYzIiwidXNlU3RhdGUiLCJzaGFsbG93RXF1YWwiLCJzaGFsbG93RXF1YWwyIiwiY2FjaGUiLCJXZWFrTWFwIiwiZGVmYXVsdFNlcmlhbGl6ZVF1ZXJ5QXJncyIsIl9yZWYiLCJlbmRwb2ludE5hbWUiLCJxdWVyeUFyZ3MiLCJzZXJpYWxpemVkIiwiY2FjaGVkIiwiZ2V0Iiwic3RyaW5naWZpZWQiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5IiwidmFsdWUiLCIkYmlnaW50IiwidG9TdHJpbmciLCJrZXlzIiwic29ydCIsInJlZHVjZSIsImFjYyIsImtleTIiLCJzZXQiLCJVTklOSVRJQUxJWkVEX1ZBTFVFIiwiU3ltYm9sIiwidXNlU3RhYmxlUXVlcnlBcmdzIiwic2VyaWFsaXplIiwiZW5kcG9pbnREZWZpbml0aW9uIiwiaW5jb21pbmciLCJfdHlwZW9mIiwiY2FjaGUyIiwiY3VycmVudCIsInVzZUVmZmVjdDIiLCJ1c2VSZWYyIiwidXNlU2hhbGxvd1N0YWJsZVZhbHVlIiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaXNET00iLCJpc1J1bm5pbmdJblJlYWN0TmF0aXZlIiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImlzUmVhY3ROYXRpdmUiLCJnZXRVc2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIm5vUGVuZGluZ1F1ZXJ5U3RhdGVTZWxlY3RvciIsInNlbGVjdGVkIiwiaXNVbmluaXRpYWxpemVkIiwiX29iamVjdFNwcmVhZCIsImlzRmV0Y2hpbmciLCJpc0xvYWRpbmciLCJkYXRhIiwic3RhdHVzIiwicGVuZGluZyIsImJ1aWxkSG9va3MiLCJfcmVmMiIsImFwaSIsIl9yZWYyJG1vZHVsZU9wdGlvbnMiLCJtb2R1bGVPcHRpb25zIiwiX3JlZjIkbW9kdWxlT3B0aW9ucyRoIiwiaG9va3MiLCJ1bnN0YWJsZV9fc2lkZUVmZmVjdHNJblJlbmRlciIsImNyZWF0ZVNlbGVjdG9yMiIsInNlcmlhbGl6ZVF1ZXJ5QXJncyIsImNvbnRleHQiLCJ1c2VQb3NzaWJseUltbWVkaWF0ZUVmZmVjdCIsImNiIiwiYnVpbGRRdWVyeUhvb2tzIiwiYnVpbGRNdXRhdGlvbkhvb2siLCJ1c2VQcmVmZXRjaCIsInF1ZXJ5U3RhdGVQcmVTZWxlY3RvciIsImN1cnJlbnRTdGF0ZSIsImxhc3RSZXN1bHQiLCJfbGFzdFJlc3VsdCIsIl9sYXN0UmVzdWx0MyIsIl9sYXN0UmVzdWx0MiIsImVuZHBvaW50RGVmaW5pdGlvbnMiLCJvcmlnaW5hbEFyZ3MiLCJpc1N1Y2Nlc3MiLCJoYXNEYXRhIiwiY3VycmVudERhdGEiLCJkZWZhdWx0T3B0aW9ucyIsImRpc3BhdGNoIiwic3RhYmxlRGVmYXVsdE9wdGlvbnMiLCJhcmciLCJvcHRpb25zIiwidXRpbCIsInByZWZldGNoIiwibmFtZSIsInVzZVF1ZXJ5U3Vic2NyaXB0aW9uIiwiX3JlZjMiLCJ1bmRlZmluZWQiLCJyZWZldGNoT25SZWNvbm5lY3QiLCJyZWZldGNoT25Gb2N1cyIsInJlZmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2UiLCJfcmVmMyRza2lwIiwic2tpcCIsIl9yZWYzJHBvbGxpbmdJbnRlcnZhbCIsInBvbGxpbmdJbnRlcnZhbCIsIl9yZWYzJHNraXBQb2xsaW5nSWZVbiIsInNraXBQb2xsaW5nSWZVbmZvY3VzZWQiLCJpbml0aWF0ZSIsImVuZHBvaW50cyIsInN1YnNjcmlwdGlvblNlbGVjdG9yc1JlZiIsInJldHVybmVkVmFsdWUiLCJpbnRlcm5hbEFjdGlvbnMiLCJpbnRlcm5hbF9nZXRSVEtRU3Vic2NyaXB0aW9ucyIsIkVycm9yIiwicmVkdWNlclBhdGgiLCJzdGFibGVBcmciLCJzdGFibGVTdWJzY3JpcHRpb25PcHRpb25zIiwibGFzdFJlbmRlckhhZFN1YnNjcmlwdGlvbiIsInByb21pc2VSZWYiLCJfcmVmNCIsInF1ZXJ5Q2FjaGVLZXkiLCJyZXF1ZXN0SWQiLCJjdXJyZW50UmVuZGVySGFzU3Vic2NyaXB0aW9uIiwiaXNSZXF1ZXN0U3Vic2NyaWJlZCIsInN1YnNjcmlwdGlvblJlbW92ZWQiLCJfcHJvbWlzZVJlZiRjdXJyZW50IiwibGFzdFByb21pc2UiLCJwcm9jZXNzIiwiY29uc29sZSIsImxvZyIsInVuc3Vic2NyaWJlIiwibGFzdFN1YnNjcmlwdGlvbk9wdGlvbnMiLCJzdWJzY3JpcHRpb25PcHRpb25zIiwicHJvbWlzZSIsImZvcmNlUmVmZXRjaCIsInVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnMiLCJfcHJvbWlzZVJlZiRjdXJyZW50MiIsInJlZmV0Y2giLCJfcHJvbWlzZVJlZiRjdXJyZW50MyIsInVzZUxhenlRdWVyeVN1YnNjcmlwdGlvbiIsIl9yZWY1IiwiX3JlZjUkcG9sbGluZ0ludGVydmFsIiwiX3JlZjUkc2tpcFBvbGxpbmdJZlVuIiwiX3VzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5Iiwic2V0QXJnIiwiX3Byb21pc2VSZWYkY3VycmVudDQiLCJfcHJvbWlzZVJlZiRjdXJyZW50NSIsInN1YnNjcmlwdGlvbk9wdGlvbnNSZWYiLCJ0cmlnZ2VyIiwiYXJnMiIsInByZWZlckNhY2hlVmFsdWUiLCJfcHJvbWlzZVJlZiRjdXJyZW50NiIsIl9wcm9taXNlUmVmJGN1cnJlbnQ3IiwidXNlUXVlcnlTdGF0ZSIsIl9yZWY2IiwiX3JlZjYkc2tpcCIsInNlbGVjdEZyb21SZXN1bHQiLCJzZWxlY3QiLCJsYXN0VmFsdWUiLCJzZWxlY3REZWZhdWx0UmVzdWx0IiwiXyIsIm1lbW9pemVPcHRpb25zIiwicmVzdWx0RXF1YWxpdHlDaGVjayIsInF1ZXJ5U2VsZWN0b3IiLCJkZXZNb2RlQ2hlY2tzIiwiaWRlbnRpdHlGdW5jdGlvbkNoZWNrIiwic3RhdGUiLCJzdG9yZSIsIm5ld0xhc3RWYWx1ZSIsImdldFN0YXRlIiwidXNlTGF6eVF1ZXJ5IiwiX3VzZUxhenlRdWVyeVN1YnNjcmlwIiwiX3VzZUxhenlRdWVyeVN1YnNjcmlwMiIsInF1ZXJ5U3RhdGVSZXN1bHRzIiwiaW5mbyIsImxhc3RBcmciLCJ1c2VRdWVyeSIsInF1ZXJ5U3Vic2NyaXB0aW9uUmVzdWx0cyIsImlzRXJyb3IiLCJlcnJvciIsIl9yZWY3IiwiZml4ZWRDYWNoZUtleSIsIl9hcGkkZW5kcG9pbnRzJG5hbWUiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInNldFByb21pc2UiLCJyZXNldCIsInRyaWdnZXJNdXRhdGlvbiIsInByb21pc2UyIiwiX3JlZjgiLCJtdXRhdGlvblNlbGVjdG9yIiwicmVtb3ZlTXV0YXRpb25SZXN1bHQiLCJmaW5hbFN0YXRlIiwicmVhY3RIb29rc01vZHVsZU5hbWUiLCJyZWFjdEhvb2tzTW9kdWxlIiwiX3JlZjkiLCJfcmVmOSRiYXRjaCIsIl9yZWY5JGhvb2tzIiwiX3JlZjkkY3JlYXRlU2VsZWN0b3IiLCJfcmVmOSR1bnN0YWJsZV9fc2lkZUUiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwiaG9va05hbWVzIiwid2FybmVkIiwiX2kiLCJfaG9va05hbWVzIiwiaG9va05hbWUiLCJ3YXJuIiwiam9pbiIsImluaXQiLCJfcmVmMTAiLCJhbnlBcGkiLCJfYnVpbGRIb29rcyIsImluamVjdEVuZHBvaW50IiwiZGVmaW5pdGlvbiIsIl9idWlsZFF1ZXJ5SG9va3MiLCJ1c2VNdXRhdGlvbiIsIl9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlNCIsImNvbmZpZ3VyZVN0b3JlIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdDQiLCJSZWFjdCIsIlByb3ZpZGVyIiwiUmVhY3RSZWR1eENvbnRleHQiLCJzZXR1cExpc3RlbmVycyIsIkFwaVByb3ZpZGVyIiwicHJvcHMiLCJleGlzdGluZ0NvbnRleHQiLCJfUmVhY3QkdXNlU3RhdGUiLCJyZWR1Y2VyIiwiX2RlZmluZVByb3BlcnR5IiwibWlkZGxld2FyZSIsImdETSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJjaGlsZHJlbiIsImNyZWF0ZUFwaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryStatus: () => (/* binding */ QueryStatus),\n/* harmony export */   buildCreateApi: () => (/* binding */ buildCreateApi),\n/* harmony export */   copyWithStructuralSharing: () => (/* binding */ copyWithStructuralSharing),\n/* harmony export */   coreModule: () => (/* binding */ coreModule),\n/* harmony export */   coreModuleName: () => (/* binding */ coreModuleName),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   defaultSerializeQueryArgs: () => (/* binding */ defaultSerializeQueryArgs),\n/* harmony export */   fakeBaseQuery: () => (/* binding */ fakeBaseQuery),\n/* harmony export */   fetchBaseQuery: () => (/* binding */ fetchBaseQuery),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   setupListeners: () => (/* binding */ setupListeners),\n/* harmony export */   skipToken: () => (/* binding */ skipToken)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\nvar _excluded = [\"baseUrl\", \"prepareHeaders\", \"fetchFn\", \"paramsSerializer\", \"isJsonContentType\", \"jsonContentType\", \"jsonReplacer\", \"timeout\", \"responseHandler\", \"validateStatus\"],\n  _excluded2 = [\"url\", \"headers\", \"params\", \"responseHandler\", \"validateStatus\", \"timeout\"];\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n// src/query/core/apiState.ts\nvar QueryStatus = /* @__PURE__ */function (QueryStatus2) {\n  QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n  QueryStatus2[\"pending\"] = \"pending\";\n  QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n  QueryStatus2[\"rejected\"] = \"rejected\";\n  return QueryStatus2;\n}(QueryStatus || {});\nfunction getRequestStatusFlags(status) {\n  return {\n    status: status,\n    isUninitialized: status === \"uninitialized\" /* uninitialized */,\n    isLoading: status === \"pending\" /* pending */,\n    isSuccess: status === \"fulfilled\" /* fulfilled */,\n    isError: status === \"rejected\" /* rejected */\n  };\n}\n\n// src/query/core/rtkImports.ts\n\n\n// src/query/utils/copyWithStructuralSharing.ts\nvar isPlainObject2 = _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject;\nfunction copyWithStructuralSharing(oldObj, newObj) {\n  if (oldObj === newObj || !(isPlainObject2(oldObj) && isPlainObject2(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n    return newObj;\n  }\n  var newKeys = Object.keys(newObj);\n  var oldKeys = Object.keys(oldObj);\n  var isSameObject = newKeys.length === oldKeys.length;\n  var mergeObj = Array.isArray(newObj) ? [] : {};\n  for (var _i = 0, _newKeys = newKeys; _i < _newKeys.length; _i++) {\n    var key = _newKeys[_i];\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n  }\n  return isSameObject ? oldObj : mergeObj;\n}\n\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n  var count = 0;\n  for (var _key in obj) {\n    count++;\n  }\n  return count;\n}\n\n// src/query/utils/flatten.ts\nvar flatten = function flatten(arr) {\n  var _ref;\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arr));\n};\n\n// src/query/utils/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n  return new RegExp(\"(^|:)//\").test(url);\n}\n\n// src/query/utils/isDocumentVisible.ts\nfunction isDocumentVisible() {\n  if (typeof document === \"undefined\") {\n    return true;\n  }\n  return document.visibilityState !== \"hidden\";\n}\n\n// src/query/utils/isNotNullish.ts\nfunction isNotNullish(v) {\n  return v != null;\n}\n\n// src/query/utils/isOnline.ts\nfunction isOnline() {\n  return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n}\n\n// src/query/utils/joinUrls.ts\nvar withoutTrailingSlash = function withoutTrailingSlash(url) {\n  return url.replace(/\\/$/, \"\");\n};\nvar withoutLeadingSlash = function withoutLeadingSlash(url) {\n  return url.replace(/^\\//, \"\");\n};\nfunction joinUrls(base, url) {\n  if (!base) {\n    return url;\n  }\n  if (!url) {\n    return base;\n  }\n  if (isAbsoluteUrl(url)) {\n    return url;\n  }\n  var delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\n  base = withoutTrailingSlash(base);\n  url = withoutLeadingSlash(url);\n  return \"\".concat(base).concat(delimiter).concat(url);\n}\n\n// src/query/fetchBaseQuery.ts\nvar defaultFetchFn = function defaultFetchFn() {\n  return fetch.apply(void 0, arguments);\n};\nvar defaultValidateStatus = function defaultValidateStatus(response) {\n  return response.status >= 200 && response.status <= 299;\n};\nvar defaultIsJsonContentType = function defaultIsJsonContentType(headers) {\n  return (/*applicat*/\n    /ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\")\n  );\n};\nfunction stripUndefined(obj) {\n  if (!(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(obj)) {\n    return obj;\n  }\n  var copy = _objectSpread({}, obj);\n  for (var _i2 = 0, _Object$entries = Object.entries(copy); _i2 < _Object$entries.length; _i2++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n      k = _Object$entries$_i[0],\n      v = _Object$entries$_i[1];\n    if (v === void 0) delete copy[k];\n  }\n  return copy;\n}\nfunction fetchBaseQuery() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    baseUrl = _ref2.baseUrl,\n    _ref2$prepareHeaders = _ref2.prepareHeaders,\n    prepareHeaders = _ref2$prepareHeaders === void 0 ? function (x) {\n      return x;\n    } : _ref2$prepareHeaders,\n    _ref2$fetchFn = _ref2.fetchFn,\n    fetchFn = _ref2$fetchFn === void 0 ? defaultFetchFn : _ref2$fetchFn,\n    paramsSerializer = _ref2.paramsSerializer,\n    _ref2$isJsonContentTy = _ref2.isJsonContentType,\n    isJsonContentType = _ref2$isJsonContentTy === void 0 ? defaultIsJsonContentType : _ref2$isJsonContentTy,\n    _ref2$jsonContentType = _ref2.jsonContentType,\n    jsonContentType = _ref2$jsonContentType === void 0 ? \"application/json\" : _ref2$jsonContentType,\n    jsonReplacer = _ref2.jsonReplacer,\n    defaultTimeout = _ref2.timeout,\n    globalResponseHandler = _ref2.responseHandler,\n    globalValidateStatus = _ref2.validateStatus,\n    baseFetchOptions = _objectWithoutProperties(_ref2, _excluded);\n  if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n    console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n  }\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(arg, api) {\n      var signal, getState, extra, endpoint, forced, type, meta, _ref4, url, _ref4$headers, headers, _ref4$params, params, _ref4$responseHandler, responseHandler, _ref4$validateStatus, validateStatus, _ref4$timeout, timeout, rest, config, isJsonifiable, divider, query, request, requestClone, response, timedOut, timeoutId, responseClone, resultData, responseText, handleResponseError;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            signal = api.signal, getState = api.getState, extra = api.extra, endpoint = api.endpoint, forced = api.forced, type = api.type;\n            _ref4 = typeof arg == \"string\" ? {\n              url: arg\n            } : arg, url = _ref4.url, _ref4$headers = _ref4.headers, headers = _ref4$headers === void 0 ? new Headers(baseFetchOptions.headers) : _ref4$headers, _ref4$params = _ref4.params, params = _ref4$params === void 0 ? void 0 : _ref4$params, _ref4$responseHandler = _ref4.responseHandler, responseHandler = _ref4$responseHandler === void 0 ? globalResponseHandler !== null && globalResponseHandler !== void 0 ? globalResponseHandler : \"json\" : _ref4$responseHandler, _ref4$validateStatus = _ref4.validateStatus, validateStatus = _ref4$validateStatus === void 0 ? globalValidateStatus !== null && globalValidateStatus !== void 0 ? globalValidateStatus : defaultValidateStatus : _ref4$validateStatus, _ref4$timeout = _ref4.timeout, timeout = _ref4$timeout === void 0 ? defaultTimeout : _ref4$timeout, rest = _objectWithoutProperties(_ref4, _excluded2);\n            config = _objectSpread(_objectSpread({}, baseFetchOptions), {}, {\n              signal: signal\n            }, rest);\n            headers = new Headers(stripUndefined(headers));\n            _context.next = 6;\n            return prepareHeaders(headers, {\n              getState: getState,\n              extra: extra,\n              endpoint: endpoint,\n              forced: forced,\n              type: type\n            });\n          case 6:\n            _context.t0 = _context.sent;\n            if (_context.t0) {\n              _context.next = 9;\n              break;\n            }\n            _context.t0 = headers;\n          case 9:\n            config.headers = _context.t0;\n            isJsonifiable = function isJsonifiable(body) {\n              return _typeof(body) === \"object\" && ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(body) || Array.isArray(body) || typeof body.toJSON === \"function\");\n            };\n            if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\n              config.headers.set(\"content-type\", jsonContentType);\n            }\n            if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n              config.body = JSON.stringify(config.body, jsonReplacer);\n            }\n            if (params) {\n              divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n              query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n              url += divider + query;\n            }\n            url = joinUrls(baseUrl, url);\n            request = new Request(url, config);\n            requestClone = new Request(url, config);\n            meta = {\n              request: requestClone\n            };\n            timedOut = false, timeoutId = timeout && setTimeout(function () {\n              timedOut = true;\n              api.abort();\n            }, timeout);\n            _context.prev = 19;\n            _context.next = 22;\n            return fetchFn(request);\n          case 22:\n            response = _context.sent;\n            _context.next = 28;\n            break;\n          case 25:\n            _context.prev = 25;\n            _context.t1 = _context[\"catch\"](19);\n            return _context.abrupt(\"return\", {\n              error: {\n                status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\n                error: String(_context.t1)\n              },\n              meta: meta\n            });\n          case 28:\n            _context.prev = 28;\n            if (timeoutId) clearTimeout(timeoutId);\n            return _context.finish(28);\n          case 31:\n            responseClone = response.clone();\n            meta.response = responseClone;\n            responseText = \"\";\n            _context.prev = 34;\n            _context.next = 37;\n            return Promise.all([handleResponse(response, responseHandler).then(function (r) {\n              return resultData = r;\n            }, function (e) {\n              return handleResponseError = e;\n            }),\n            // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n            // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n            responseClone.text().then(function (r) {\n              return responseText = r;\n            }, function () {})]);\n          case 37:\n            if (!handleResponseError) {\n              _context.next = 39;\n              break;\n            }\n            throw handleResponseError;\n          case 39:\n            _context.next = 44;\n            break;\n          case 41:\n            _context.prev = 41;\n            _context.t2 = _context[\"catch\"](34);\n            return _context.abrupt(\"return\", {\n              error: {\n                status: \"PARSING_ERROR\",\n                originalStatus: response.status,\n                data: responseText,\n                error: String(_context.t2)\n              },\n              meta: meta\n            });\n          case 44:\n            return _context.abrupt(\"return\", validateStatus(response, resultData) ? {\n              data: resultData,\n              meta: meta\n            } : {\n              error: {\n                status: response.status,\n                data: resultData\n              },\n              meta: meta\n            });\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[19, 25, 28, 31], [34, 41]]);\n    }));\n    return function (_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  function handleResponse(_x3, _x4) {\n    return _handleResponse.apply(this, arguments);\n  }\n  function _handleResponse() {\n    _handleResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(response, responseHandler) {\n      var text;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof responseHandler === \"function\")) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt(\"return\", responseHandler(response));\n          case 2:\n            if (responseHandler === \"content-type\") {\n              responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\n            }\n            if (!(responseHandler === \"json\")) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.next = 6;\n            return response.text();\n          case 6:\n            text = _context2.sent;\n            return _context2.abrupt(\"return\", text.length ? JSON.parse(text) : null);\n          case 8:\n            return _context2.abrupt(\"return\", response.text());\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _handleResponse.apply(this, arguments);\n  }\n}\n\n// src/query/HandledError.ts\nvar HandledError = /*#__PURE__*/_createClass(function HandledError(value) {\n  var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n  _classCallCheck(this, HandledError);\n  this.value = value;\n  this.meta = meta;\n});\n\n// src/query/retry.ts\nfunction defaultBackoff() {\n  return _defaultBackoff.apply(this, arguments);\n}\nfunction _defaultBackoff() {\n  _defaultBackoff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var attempt,\n      maxRetries,\n      attempts,\n      timeout,\n      _args6 = arguments;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          attempt = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : 0;\n          maxRetries = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 5;\n          attempts = Math.min(attempt, maxRetries);\n          timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n          _context6.next = 6;\n          return new Promise(function (resolve) {\n            return setTimeout(function (res) {\n              return resolve(res);\n            }, timeout);\n          });\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _defaultBackoff.apply(this, arguments);\n}\nfunction fail(e) {\n  throw Object.assign(new HandledError({\n    error: e\n  }), {\n    throwImmediately: true\n  });\n}\nvar EMPTY_OPTIONS = {};\nvar retryWithBackoff = function retryWithBackoff(baseQuery, defaultOptions) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(args, api, extraOptions) {\n      var possibleMaxRetries, _possibleMaxRetries$s, _possibleMaxRetries$s2, maxRetries, defaultRetryCondition, options, retry2, result;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            possibleMaxRetries = [5, (defaultOptions || EMPTY_OPTIONS).maxRetries, (extraOptions || EMPTY_OPTIONS).maxRetries].filter(function (x) {\n              return x !== void 0;\n            });\n            _possibleMaxRetries$s = possibleMaxRetries.slice(-1), _possibleMaxRetries$s2 = _slicedToArray(_possibleMaxRetries$s, 1), maxRetries = _possibleMaxRetries$s2[0];\n            defaultRetryCondition = function defaultRetryCondition(_, __, _ref6) {\n              var attempt = _ref6.attempt;\n              return attempt <= maxRetries;\n            };\n            options = _objectSpread(_objectSpread({\n              maxRetries: maxRetries,\n              backoff: defaultBackoff,\n              retryCondition: defaultRetryCondition\n            }, defaultOptions), extraOptions);\n            retry2 = 0;\n          case 5:\n            if (false) {}\n            _context3.prev = 6;\n            _context3.next = 9;\n            return baseQuery(args, api, extraOptions);\n          case 9:\n            result = _context3.sent;\n            if (!result.error) {\n              _context3.next = 12;\n              break;\n            }\n            throw new HandledError(result);\n          case 12:\n            return _context3.abrupt(\"return\", result);\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](6);\n            retry2++;\n            if (!_context3.t0.throwImmediately) {\n              _context3.next = 22;\n              break;\n            }\n            if (!(_context3.t0 instanceof HandledError)) {\n              _context3.next = 21;\n              break;\n            }\n            return _context3.abrupt(\"return\", _context3.t0.value);\n          case 21:\n            throw _context3.t0;\n          case 22:\n            if (!(_context3.t0 instanceof HandledError && !options.retryCondition(_context3.t0.value.error, args, {\n              attempt: retry2,\n              baseQueryApi: api,\n              extraOptions: extraOptions\n            }))) {\n              _context3.next = 24;\n              break;\n            }\n            return _context3.abrupt(\"return\", _context3.t0.value);\n          case 24:\n            _context3.next = 26;\n            return options.backoff(retry2, options.maxRetries);\n          case 26:\n            _context3.next = 5;\n            break;\n          case 28:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[6, 15]]);\n    }));\n    return function (_x5, _x6, _x7) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nvar retry = /* @__PURE__ */Object.assign(retryWithBackoff, {\n  fail: fail\n});\n\n// src/query/core/setupListeners.ts\nvar onFocus = /* @__PURE__ */(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/offline\");\nvar initialized = false;\nfunction setupListeners(dispatch, customHandler) {\n  function defaultHandler() {\n    var handleFocus = function handleFocus() {\n      return dispatch(onFocus());\n    };\n    var handleFocusLost = function handleFocusLost() {\n      return dispatch(onFocusLost());\n    };\n    var handleOnline = function handleOnline() {\n      return dispatch(onOnline());\n    };\n    var handleOffline = function handleOffline() {\n      return dispatch(onOffline());\n    };\n    var handleVisibilityChange = function handleVisibilityChange() {\n      if (window.document.visibilityState === \"visible\") {\n        handleFocus();\n      } else {\n        handleFocusLost();\n      }\n    };\n    if (!initialized) {\n      if (false) {}\n    }\n    var unsubscribe = function unsubscribe() {\n      window.removeEventListener(\"focus\", handleFocus);\n      window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n      initialized = false;\n    };\n    return unsubscribe;\n  }\n  return customHandler ? customHandler(dispatch, {\n    onFocus: onFocus,\n    onFocusLost: onFocusLost,\n    onOffline: onOffline,\n    onOnline: onOnline\n  }) : defaultHandler();\n}\n\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n  return e.type === \"query\" /* query */;\n}\n\nfunction isMutationDefinition(e) {\n  return e.type === \"mutation\" /* mutation */;\n}\n\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n  if (isFunction(description)) {\n    return description(result, error, queryArg, meta).map(expandTagDescription).map(assertTagTypes);\n  }\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n  return [];\n}\nfunction isFunction(t) {\n  return typeof t === \"function\";\n}\nfunction expandTagDescription(description) {\n  return typeof description === \"string\" ? {\n    type: description\n  } : description;\n}\n\n// src/query/core/buildThunks.ts\n\n\n// src/query/core/buildInitiate.ts\n\n\n// src/tsHelpers.ts\nfunction asSafePromise(promise, fallback) {\n  return promise[\"catch\"](fallback);\n}\n\n// src/query/core/buildInitiate.ts\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\nvar isUpsertQuery = function isUpsertQuery(arg) {\n  return typeof arg[forceQueryFnSymbol] === \"function\";\n};\nfunction buildInitiate(_ref7) {\n  var serializeQueryArgs = _ref7.serializeQueryArgs,\n    queryThunk = _ref7.queryThunk,\n    mutationThunk = _ref7.mutationThunk,\n    api = _ref7.api,\n    context = _ref7.context;\n  var runningQueries = /* @__PURE__ */new Map();\n  var runningMutations = /* @__PURE__ */new Map();\n  var _api$internalActions = api.internalActions,\n    unsubscribeQueryResult = _api$internalActions.unsubscribeQueryResult,\n    removeMutationResult = _api$internalActions.removeMutationResult,\n    _updateSubscriptionOptions = _api$internalActions.updateSubscriptionOptions;\n  return {\n    buildInitiateQuery: buildInitiateQuery,\n    buildInitiateMutation: buildInitiateMutation,\n    getRunningQueryThunk: getRunningQueryThunk,\n    getRunningMutationThunk: getRunningMutationThunk,\n    getRunningQueriesThunk: getRunningQueriesThunk,\n    getRunningMutationsThunk: getRunningMutationsThunk\n  };\n  function getRunningQueryThunk(endpointName, queryArgs) {\n    return function (dispatch) {\n      var _runningQueries$get;\n      var endpointDefinition = context.endpointDefinitions[endpointName];\n      var queryCacheKey = serializeQueryArgs({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      });\n      return (_runningQueries$get = runningQueries.get(dispatch)) === null || _runningQueries$get === void 0 ? void 0 : _runningQueries$get[queryCacheKey];\n    };\n  }\n  function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\n    return function (dispatch) {\n      var _runningMutations$get;\n      return (_runningMutations$get = runningMutations.get(dispatch)) === null || _runningMutations$get === void 0 ? void 0 : _runningMutations$get[fixedCacheKeyOrRequestId];\n    };\n  }\n  function getRunningQueriesThunk() {\n    return function (dispatch) {\n      return Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n    };\n  }\n  function getRunningMutationsThunk() {\n    return function (dispatch) {\n      return Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n    };\n  }\n  function middlewareWarning(dispatch) {\n    if (true) {\n      if (middlewareWarning.triggered) return;\n      var returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n      middlewareWarning.triggered = true;\n      if (_typeof(returnedValue) !== \"object\" || typeof (returnedValue === null || returnedValue === void 0 ? void 0 : returnedValue.type) === \"string\") {\n        throw new Error( false ? 0 : \"Warning: Middleware for RTK-Query API at reducerPath \\\"\".concat(api.reducerPath, \"\\\" has not been added to the store.\\nYou must add the middleware for RTK-Query to function correctly!\"));\n      }\n    }\n  }\n  function buildInitiateQuery(endpointName, endpointDefinition) {\n    var queryAction = function queryAction(arg) {\n      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref8$subscribe = _ref8.subscribe,\n        subscribe = _ref8$subscribe === void 0 ? true : _ref8$subscribe,\n        forceRefetch = _ref8.forceRefetch,\n        subscriptionOptions = _ref8.subscriptionOptions,\n        forceQueryFn = _ref8[forceQueryFnSymbol],\n        rest = _objectWithoutProperties(_ref8, [\"subscribe\", \"forceRefetch\", \"subscriptionOptions\", forceQueryFnSymbol].map(_toPropertyKey));\n      return function (dispatch, getState) {\n        var _runningQueries$get2;\n        var queryCacheKey = serializeQueryArgs({\n          queryArgs: arg,\n          endpointDefinition: endpointDefinition,\n          endpointName: endpointName\n        });\n        var thunk = queryThunk(_objectSpread(_objectSpread({}, rest), {}, _defineProperty({\n          type: \"query\",\n          subscribe: subscribe,\n          forceRefetch: forceRefetch,\n          subscriptionOptions: subscriptionOptions,\n          endpointName: endpointName,\n          originalArgs: arg,\n          queryCacheKey: queryCacheKey\n        }, forceQueryFnSymbol, forceQueryFn)));\n        var selector = api.endpoints[endpointName].select(arg);\n        var thunkResult = dispatch(thunk);\n        var stateAfter = selector(getState());\n        middlewareWarning(dispatch);\n        var requestId = thunkResult.requestId,\n          abort = thunkResult.abort;\n        var skippedSynchronously = stateAfter.requestId !== requestId;\n        var runningQuery = (_runningQueries$get2 = runningQueries.get(dispatch)) === null || _runningQueries$get2 === void 0 ? void 0 : _runningQueries$get2[queryCacheKey];\n        var selectFromState = function selectFromState() {\n          return selector(getState());\n        };\n        var statePromise = Object.assign(forceQueryFn ?\n        // a query has been forced (upsertQueryData)\n        // -> we want to resolve it once data has been written with the data that will be written\n        thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ?\n        // a query has been skipped due to a condition and we do not have any currently running query\n        // -> we want to resolve it immediately with the current data\n        Promise.resolve(stateAfter) :\n        // query just started or one is already in flight\n        // -> wait for the running query, then resolve with data from after that\n        Promise.all([runningQuery, thunkResult]).then(selectFromState), {\n          arg: arg,\n          requestId: requestId,\n          subscriptionOptions: subscriptionOptions,\n          queryCacheKey: queryCacheKey,\n          abort: abort,\n          unwrap: function unwrap() {\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n              var result;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return statePromise;\n                  case 2:\n                    result = _context4.sent;\n                    if (!result.isError) {\n                      _context4.next = 5;\n                      break;\n                    }\n                    throw result.error;\n                  case 5:\n                    return _context4.abrupt(\"return\", result.data);\n                  case 6:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }))();\n          },\n          refetch: function refetch() {\n            return dispatch(queryAction(arg, {\n              subscribe: false,\n              forceRefetch: true\n            }));\n          },\n          unsubscribe: function unsubscribe() {\n            if (subscribe) dispatch(unsubscribeQueryResult({\n              queryCacheKey: queryCacheKey,\n              requestId: requestId\n            }));\n          },\n          updateSubscriptionOptions: function updateSubscriptionOptions(options) {\n            statePromise.subscriptionOptions = options;\n            dispatch(_updateSubscriptionOptions({\n              endpointName: endpointName,\n              requestId: requestId,\n              queryCacheKey: queryCacheKey,\n              options: options\n            }));\n          }\n        });\n        if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n          var running = runningQueries.get(dispatch) || {};\n          running[queryCacheKey] = statePromise;\n          runningQueries.set(dispatch, running);\n          statePromise.then(function () {\n            delete running[queryCacheKey];\n            if (!countObjectKeys(running)) {\n              runningQueries[\"delete\"](dispatch);\n            }\n          });\n        }\n        return statePromise;\n      };\n    };\n    return queryAction;\n  }\n  function buildInitiateMutation(endpointName) {\n    return function (arg) {\n      var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref9$track = _ref9.track,\n        track = _ref9$track === void 0 ? true : _ref9$track,\n        fixedCacheKey = _ref9.fixedCacheKey;\n      return function (dispatch, getState) {\n        var thunk = mutationThunk({\n          type: \"mutation\",\n          endpointName: endpointName,\n          originalArgs: arg,\n          track: track,\n          fixedCacheKey: fixedCacheKey\n        });\n        var thunkResult = dispatch(thunk);\n        middlewareWarning(dispatch);\n        var requestId = thunkResult.requestId,\n          abort = thunkResult.abort,\n          unwrap = thunkResult.unwrap;\n        var returnValuePromise = asSafePromise(thunkResult.unwrap().then(function (data) {\n          return {\n            data: data\n          };\n        }), function (error) {\n          return {\n            error: error\n          };\n        });\n        var reset = function reset() {\n          dispatch(removeMutationResult({\n            requestId: requestId,\n            fixedCacheKey: fixedCacheKey\n          }));\n        };\n        var ret = Object.assign(returnValuePromise, {\n          arg: thunkResult.arg,\n          requestId: requestId,\n          abort: abort,\n          unwrap: unwrap,\n          reset: reset\n        });\n        var running = runningMutations.get(dispatch) || {};\n        runningMutations.set(dispatch, running);\n        running[requestId] = ret;\n        ret.then(function () {\n          delete running[requestId];\n          if (!countObjectKeys(running)) {\n            runningMutations[\"delete\"](dispatch);\n          }\n        });\n        if (fixedCacheKey) {\n          running[fixedCacheKey] = ret;\n          ret.then(function () {\n            if (running[fixedCacheKey] === ret) {\n              delete running[fixedCacheKey];\n              if (!countObjectKeys(running)) {\n                runningMutations[\"delete\"](dispatch);\n              }\n            }\n          });\n        }\n        return ret;\n      };\n    };\n  }\n}\n\n// src/query/core/buildThunks.ts\nfunction defaultTransformResponse(baseQueryReturnValue) {\n  return baseQueryReturnValue;\n}\nfunction buildThunks(_ref10) {\n  var reducerPath = _ref10.reducerPath,\n    baseQuery = _ref10.baseQuery,\n    endpointDefinitions = _ref10.context.endpointDefinitions,\n    serializeQueryArgs = _ref10.serializeQueryArgs,\n    api = _ref10.api,\n    assertTagType = _ref10.assertTagType;\n  var patchQueryData = function patchQueryData(endpointName, args, patches, updateProvided) {\n    return function (dispatch, getState) {\n      var endpointDefinition = endpointDefinitions[endpointName];\n      var queryCacheKey = serializeQueryArgs({\n        queryArgs: args,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      });\n      dispatch(api.internalActions.queryResultPatched({\n        queryCacheKey: queryCacheKey,\n        patches: patches\n      }));\n      if (!updateProvided) {\n        return;\n      }\n      var newValue = api.endpoints[endpointName].select(args)(\n      // Work around TS 4.1 mismatch\n      getState());\n      var providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, args, {}, assertTagType);\n      dispatch(api.internalActions.updateProvidedBy({\n        queryCacheKey: queryCacheKey,\n        providedTags: providedTags\n      }));\n    };\n  };\n  var updateQueryData = function updateQueryData(endpointName, args, updateRecipe) {\n    var updateProvided = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return function (dispatch, getState) {\n      var endpointDefinition = api.endpoints[endpointName];\n      var currentState = endpointDefinition.select(args)(\n      // Work around TS 4.1 mismatch\n      getState());\n      var ret = {\n        patches: [],\n        inversePatches: [],\n        undo: function undo() {\n          return dispatch(api.util.patchQueryData(endpointName, args, ret.inversePatches, updateProvided));\n        }\n      };\n      if (currentState.status === \"uninitialized\" /* uninitialized */) {\n        return ret;\n      }\n      var newValue;\n      if (\"data\" in currentState) {\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(currentState.data)) {\n          var _ret$patches, _ret$inversePatches;\n          var _produceWithPatches = (0,immer__WEBPACK_IMPORTED_MODULE_2__.produceWithPatches)(currentState.data, updateRecipe),\n            _produceWithPatches2 = _slicedToArray(_produceWithPatches, 3),\n            value = _produceWithPatches2[0],\n            patches = _produceWithPatches2[1],\n            inversePatches = _produceWithPatches2[2];\n          (_ret$patches = ret.patches).push.apply(_ret$patches, _toConsumableArray(patches));\n          (_ret$inversePatches = ret.inversePatches).push.apply(_ret$inversePatches, _toConsumableArray(inversePatches));\n          newValue = value;\n        } else {\n          newValue = updateRecipe(currentState.data);\n          ret.patches.push({\n            op: \"replace\",\n            path: [],\n            value: newValue\n          });\n          ret.inversePatches.push({\n            op: \"replace\",\n            path: [],\n            value: currentState.data\n          });\n        }\n      }\n      if (ret.patches.length === 0) {\n        return ret;\n      }\n      dispatch(api.util.patchQueryData(endpointName, args, ret.patches, updateProvided));\n      return ret;\n    };\n  };\n  var upsertQueryData = function upsertQueryData(endpointName, args, value) {\n    return function (dispatch) {\n      return dispatch(api.endpoints[endpointName].initiate(args, _defineProperty({\n        subscribe: false,\n        forceRefetch: true\n      }, forceQueryFnSymbol, function () {\n        return {\n          data: value\n        };\n      })));\n    };\n  };\n  var executeEndpoint = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(arg, _ref11) {\n      var signal, abort, rejectWithValue, fulfillWithValue, dispatch, getState, extra, endpointDefinition, transformResponse, result, baseQueryApi, forceQueryFn, what, err, _i3, _Object$keys, key, catchedError, transformErrorResponse;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            signal = _ref11.signal, abort = _ref11.abort, rejectWithValue = _ref11.rejectWithValue, fulfillWithValue = _ref11.fulfillWithValue, dispatch = _ref11.dispatch, getState = _ref11.getState, extra = _ref11.extra;\n            endpointDefinition = endpointDefinitions[arg.endpointName];\n            _context5.prev = 2;\n            transformResponse = defaultTransformResponse;\n            baseQueryApi = {\n              signal: signal,\n              abort: abort,\n              dispatch: dispatch,\n              getState: getState,\n              extra: extra,\n              endpoint: arg.endpointName,\n              type: arg.type,\n              forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0\n            };\n            forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\n            if (!forceQueryFn) {\n              _context5.next = 10;\n              break;\n            }\n            result = forceQueryFn();\n            _context5.next = 20;\n            break;\n          case 10:\n            if (!endpointDefinition.query) {\n              _context5.next = 17;\n              break;\n            }\n            _context5.next = 13;\n            return baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi, endpointDefinition.extraOptions);\n          case 13:\n            result = _context5.sent;\n            if (endpointDefinition.transformResponse) {\n              transformResponse = endpointDefinition.transformResponse;\n            }\n            _context5.next = 20;\n            break;\n          case 17:\n            _context5.next = 19;\n            return endpointDefinition.queryFn(arg.originalArgs, baseQueryApi, endpointDefinition.extraOptions, function (arg2) {\n              return baseQuery(arg2, baseQueryApi, endpointDefinition.extraOptions);\n            });\n          case 19:\n            result = _context5.sent;\n          case 20:\n            if (!(typeof process !== \"undefined\" && true)) {\n              _context5.next = 48;\n              break;\n            }\n            what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n            if (result) {\n              _context5.next = 26;\n              break;\n            }\n            err = \"\".concat(what, \" did not return anything.\");\n            _context5.next = 47;\n            break;\n          case 26:\n            if (!(_typeof(result) !== \"object\")) {\n              _context5.next = 30;\n              break;\n            }\n            err = \"\".concat(what, \" did not return an object.\");\n            _context5.next = 47;\n            break;\n          case 30:\n            if (!(result.error && result.data)) {\n              _context5.next = 34;\n              break;\n            }\n            err = \"\".concat(what, \" returned an object containing both `error` and `result`.\");\n            _context5.next = 47;\n            break;\n          case 34:\n            if (!(result.error === void 0 && result.data === void 0)) {\n              _context5.next = 38;\n              break;\n            }\n            err = \"\".concat(what, \" returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`\");\n            _context5.next = 47;\n            break;\n          case 38:\n            _i3 = 0, _Object$keys = Object.keys(result);\n          case 39:\n            if (!(_i3 < _Object$keys.length)) {\n              _context5.next = 47;\n              break;\n            }\n            key = _Object$keys[_i3];\n            if (!(key !== \"error\" && key !== \"data\" && key !== \"meta\")) {\n              _context5.next = 44;\n              break;\n            }\n            err = \"The object returned by \".concat(what, \" has the unknown property \").concat(key, \".\");\n            return _context5.abrupt(\"break\", 47);\n          case 44:\n            _i3++;\n            _context5.next = 39;\n            break;\n          case 47:\n            if (err) {\n              console.error(\"Error encountered handling the endpoint \".concat(arg.endpointName, \".\\n              \").concat(err, \"\\n              It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\\n              Object returned was:\"), result);\n            }\n          case 48:\n            if (!result.error) {\n              _context5.next = 50;\n              break;\n            }\n            throw new HandledError(result.error, result.meta);\n          case 50:\n            _context5.t0 = fulfillWithValue;\n            _context5.next = 53;\n            return transformResponse(result.data, result.meta, arg.originalArgs);\n          case 53:\n            _context5.t1 = _context5.sent;\n            _context5.t2 = _defineProperty({\n              fulfilledTimeStamp: Date.now(),\n              baseQueryMeta: result.meta\n            }, _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH, true);\n            return _context5.abrupt(\"return\", (0, _context5.t0)(_context5.t1, _context5.t2));\n          case 58:\n            _context5.prev = 58;\n            _context5.t3 = _context5[\"catch\"](2);\n            catchedError = _context5.t3;\n            if (!(catchedError instanceof HandledError)) {\n              _context5.next = 76;\n              break;\n            }\n            transformErrorResponse = defaultTransformResponse;\n            if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\n              transformErrorResponse = endpointDefinition.transformErrorResponse;\n            }\n            _context5.prev = 64;\n            _context5.t4 = rejectWithValue;\n            _context5.next = 68;\n            return transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs);\n          case 68:\n            _context5.t5 = _context5.sent;\n            _context5.t6 = _defineProperty({\n              baseQueryMeta: catchedError.meta\n            }, _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH, true);\n            return _context5.abrupt(\"return\", (0, _context5.t4)(_context5.t5, _context5.t6));\n          case 73:\n            _context5.prev = 73;\n            _context5.t7 = _context5[\"catch\"](64);\n            catchedError = _context5.t7;\n          case 76:\n            if (typeof process !== \"undefined\" && true) {\n              console.error(\"An unhandled error occurred processing a request for the endpoint \\\"\".concat(arg.endpointName, \"\\\".\\nIn the case of an unhandled error, no tags will be \\\"provided\\\" or \\\"invalidated\\\".\"), catchedError);\n            } else {\n              console.error(catchedError);\n            }\n            throw catchedError;\n          case 78:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[2, 58], [64, 73]]);\n    }));\n    return function executeEndpoint(_x8, _x9) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n  function isForcedQuery(arg, state) {\n    var _state$reducerPath, _state$reducerPath2, _arg$forceRefetch;\n    var requestState = (_state$reducerPath = state[reducerPath]) === null || _state$reducerPath === void 0 || (_state$reducerPath = _state$reducerPath.queries) === null || _state$reducerPath === void 0 ? void 0 : _state$reducerPath[arg.queryCacheKey];\n    var baseFetchOnMountOrArgChange = (_state$reducerPath2 = state[reducerPath]) === null || _state$reducerPath2 === void 0 ? void 0 : _state$reducerPath2.config.refetchOnMountOrArgChange;\n    var fulfilledVal = requestState === null || requestState === void 0 ? void 0 : requestState.fulfilledTimeStamp;\n    var refetchVal = (_arg$forceRefetch = arg.forceRefetch) !== null && _arg$forceRefetch !== void 0 ? _arg$forceRefetch : arg.subscribe && baseFetchOnMountOrArgChange;\n    if (refetchVal) {\n      return refetchVal === true || (Number( /* @__PURE__ */new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n    }\n    return false;\n  }\n  var queryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)(\"\".concat(reducerPath, \"/executeQuery\"), executeEndpoint, {\n    getPendingMeta: function getPendingMeta() {\n      return _defineProperty({\n        startedTimeStamp: Date.now()\n      }, _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH, true);\n    },\n    condition: function condition(queryThunkArgs, _ref14) {\n      var _state$reducerPath3, _endpointDefinition$f;\n      var getState = _ref14.getState;\n      var state = getState();\n      var requestState = (_state$reducerPath3 = state[reducerPath]) === null || _state$reducerPath3 === void 0 || (_state$reducerPath3 = _state$reducerPath3.queries) === null || _state$reducerPath3 === void 0 ? void 0 : _state$reducerPath3[queryThunkArgs.queryCacheKey];\n      var fulfilledVal = requestState === null || requestState === void 0 ? void 0 : requestState.fulfilledTimeStamp;\n      var currentArg = queryThunkArgs.originalArgs;\n      var previousArg = requestState === null || requestState === void 0 ? void 0 : requestState.originalArgs;\n      var endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\n      if (isUpsertQuery(queryThunkArgs)) {\n        return true;\n      }\n      if ((requestState === null || requestState === void 0 ? void 0 : requestState.status) === \"pending\") {\n        return false;\n      }\n      if (isForcedQuery(queryThunkArgs, state)) {\n        return true;\n      }\n      if (isQueryDefinition(endpointDefinition) && endpointDefinition !== null && endpointDefinition !== void 0 && (_endpointDefinition$f = endpointDefinition.forceRefetch) !== null && _endpointDefinition$f !== void 0 && _endpointDefinition$f.call(endpointDefinition, {\n        currentArg: currentArg,\n        previousArg: previousArg,\n        endpointState: requestState,\n        state: state\n      })) {\n        return true;\n      }\n      if (fulfilledVal) {\n        return false;\n      }\n      return true;\n    },\n    dispatchConditionRejection: true\n  });\n  var mutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)(\"\".concat(reducerPath, \"/executeMutation\"), executeEndpoint, {\n    getPendingMeta: function getPendingMeta() {\n      return _defineProperty({\n        startedTimeStamp: Date.now()\n      }, _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH, true);\n    }\n  });\n  var hasTheForce = function hasTheForce(options) {\n    return \"force\" in options;\n  };\n  var hasMaxAge = function hasMaxAge(options) {\n    return \"ifOlderThan\" in options;\n  };\n  var prefetch = function prefetch(endpointName, arg, options) {\n    return function (dispatch, getState) {\n      var force = hasTheForce(options) && options.force;\n      var maxAge = hasMaxAge(options) && options.ifOlderThan;\n      var queryAction = function queryAction() {\n        var force2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var options2 = {\n          forceRefetch: force2,\n          isPrefetch: true\n        };\n        return api.endpoints[endpointName].initiate(arg, options2);\n      };\n      var latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n      if (force) {\n        dispatch(queryAction());\n      } else if (maxAge) {\n        var lastFulfilledTs = latestStateValue === null || latestStateValue === void 0 ? void 0 : latestStateValue.fulfilledTimeStamp;\n        if (!lastFulfilledTs) {\n          dispatch(queryAction());\n          return;\n        }\n        var shouldRetrigger = (Number( /* @__PURE__ */new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n        if (shouldRetrigger) {\n          dispatch(queryAction());\n        }\n      } else {\n        dispatch(queryAction(false));\n      }\n    };\n  };\n  function matchesEndpoint(endpointName) {\n    return function (action) {\n      var _action$meta;\n      return (action === null || action === void 0 || (_action$meta = action.meta) === null || _action$meta === void 0 || (_action$meta = _action$meta.arg) === null || _action$meta === void 0 ? void 0 : _action$meta.endpointName) === endpointName;\n    };\n  }\n  function buildMatchThunkActions(thunk, endpointName) {\n    return {\n      matchPending: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPending)(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(thunk), matchesEndpoint(endpointName)),\n      matchRejected: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(thunk), matchesEndpoint(endpointName))\n    };\n  }\n  return {\n    queryThunk: queryThunk,\n    mutationThunk: mutationThunk,\n    prefetch: prefetch,\n    updateQueryData: updateQueryData,\n    upsertQueryData: upsertQueryData,\n    patchQueryData: patchQueryData,\n    buildMatchThunkActions: buildMatchThunkActions\n  };\n}\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n  return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(action) ? action.payload : void 0, (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n}\n\n// src/query/core/buildSlice.ts\n\n\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n  var substate = state[queryCacheKey];\n  if (substate) {\n    update(substate);\n  }\n}\nfunction getMutationCacheKey(id) {\n  var _ref16;\n  return (_ref16 = \"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) !== null && _ref16 !== void 0 ? _ref16 : id.requestId;\n}\nfunction updateMutationSubstateIfExists(state, id, update) {\n  var substate = state[getMutationCacheKey(id)];\n  if (substate) {\n    update(substate);\n  }\n}\nvar initialState = {};\nfunction buildSlice(_ref17) {\n  var reducerPath = _ref17.reducerPath,\n    queryThunk = _ref17.queryThunk,\n    mutationThunk = _ref17.mutationThunk,\n    _ref17$context = _ref17.context,\n    definitions = _ref17$context.endpointDefinitions,\n    apiUid = _ref17$context.apiUid,\n    extractRehydrationInfo = _ref17$context.extractRehydrationInfo,\n    hasRehydrationInfo = _ref17$context.hasRehydrationInfo,\n    assertTagType = _ref17.assertTagType,\n    config = _ref17.config;\n  var resetApiState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"\".concat(reducerPath, \"/resetApiState\"));\n  var querySlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n    name: \"\".concat(reducerPath, \"/queries\"),\n    initialState: initialState,\n    reducers: {\n      removeQueryResult: {\n        reducer: function reducer(draft, _ref18) {\n          var queryCacheKey = _ref18.payload.queryCacheKey;\n          delete draft[queryCacheKey];\n        },\n        prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n      },\n      queryResultPatched: {\n        reducer: function reducer(draft, _ref19) {\n          var _ref19$payload = _ref19.payload,\n            queryCacheKey = _ref19$payload.queryCacheKey,\n            patches = _ref19$payload.patches;\n          updateQuerySubstateIfExists(draft, queryCacheKey, function (substate) {\n            substate.data = (0,immer__WEBPACK_IMPORTED_MODULE_2__.applyPatches)(substate.data, patches.concat());\n          });\n        },\n        prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n      }\n    },\n    extraReducers: function extraReducers(builder) {\n      builder.addCase(queryThunk.pending, function (draft, _ref20) {\n        var _arg$queryCacheKey, _draft$_arg$queryCach;\n        var meta = _ref20.meta,\n          arg = _ref20.meta.arg;\n        var upserting = isUpsertQuery(arg);\n        (_draft$_arg$queryCach = draft[_arg$queryCacheKey = arg.queryCacheKey]) !== null && _draft$_arg$queryCach !== void 0 ? _draft$_arg$queryCach : draft[_arg$queryCacheKey] = {\n          status: \"uninitialized\" /* uninitialized */,\n          endpointName: arg.endpointName\n        };\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\n          substate.status = \"pending\" /* pending */;\n          substate.requestId = upserting && substate.requestId ?\n          // for `upsertQuery` **updates**, keep the current `requestId`\n          substate.requestId :\n          // for normal queries or `upsertQuery` **inserts** always update the `requestId`\n          meta.requestId;\n          if (arg.originalArgs !== void 0) {\n            substate.originalArgs = arg.originalArgs;\n          }\n          substate.startedTimeStamp = meta.startedTimeStamp;\n        });\n      }).addCase(queryThunk.fulfilled, function (draft, _ref21) {\n        var meta = _ref21.meta,\n          payload = _ref21.payload;\n        updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, function (substate) {\n          if (substate.requestId !== meta.requestId && !isUpsertQuery(meta.arg)) return;\n          var merge = definitions[meta.arg.endpointName].merge;\n          substate.status = \"fulfilled\" /* fulfilled */;\n          if (merge) {\n            if (substate.data !== void 0) {\n              var fulfilledTimeStamp = meta.fulfilledTimeStamp,\n                arg = meta.arg,\n                baseQueryMeta = meta.baseQueryMeta,\n                requestId = meta.requestId;\n              var newData = (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(substate.data, function (draftSubstateData) {\n                return merge(draftSubstateData, payload, {\n                  arg: arg.originalArgs,\n                  baseQueryMeta: baseQueryMeta,\n                  fulfilledTimeStamp: fulfilledTimeStamp,\n                  requestId: requestId\n                });\n              });\n              substate.data = newData;\n            } else {\n              substate.data = payload;\n            }\n          } else {\n            var _definitions$meta$arg;\n            substate.data = ((_definitions$meta$arg = definitions[meta.arg.endpointName].structuralSharing) !== null && _definitions$meta$arg !== void 0 ? _definitions$meta$arg : true) ? copyWithStructuralSharing((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(substate.data) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.original)(substate.data) : substate.data, payload) : payload;\n          }\n          delete substate.error;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(queryThunk.rejected, function (draft, _ref22) {\n        var _ref22$meta = _ref22.meta,\n          condition = _ref22$meta.condition,\n          arg = _ref22$meta.arg,\n          requestId = _ref22$meta.requestId,\n          error = _ref22.error,\n          payload = _ref22.payload;\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\n          if (condition) {} else {\n            if (substate.requestId !== requestId) return;\n            substate.status = \"rejected\" /* rejected */;\n            substate.error = payload !== null && payload !== void 0 ? payload : error;\n          }\n        });\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var _extractRehydrationIn = extractRehydrationInfo(action),\n          queries = _extractRehydrationIn.queries;\n        for (var _i4 = 0, _Object$entries2 = Object.entries(queries); _i4 < _Object$entries2.length; _i4++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i4], 2),\n            key = _Object$entries2$_i[0],\n            entry = _Object$entries2$_i[1];\n          if (\n          // do not rehydrate entries that were currently in flight.\n          (entry === null || entry === void 0 ? void 0 : entry.status) === \"fulfilled\" /* fulfilled */ || (entry === null || entry === void 0 ? void 0 : entry.status) === \"rejected\" /* rejected */) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  var mutationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n    name: \"\".concat(reducerPath, \"/mutations\"),\n    initialState: initialState,\n    reducers: {\n      removeMutationResult: {\n        reducer: function reducer(draft, _ref23) {\n          var payload = _ref23.payload;\n          var cacheKey = getMutationCacheKey(payload);\n          if (cacheKey in draft) {\n            delete draft[cacheKey];\n          }\n        },\n        prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n      }\n    },\n    extraReducers: function extraReducers(builder) {\n      builder.addCase(mutationThunk.pending, function (draft, _ref24) {\n        var meta = _ref24.meta,\n          _ref24$meta = _ref24.meta,\n          requestId = _ref24$meta.requestId,\n          arg = _ref24$meta.arg,\n          startedTimeStamp = _ref24$meta.startedTimeStamp;\n        if (!arg.track) return;\n        draft[getMutationCacheKey(meta)] = {\n          requestId: requestId,\n          status: \"pending\" /* pending */,\n          endpointName: arg.endpointName,\n          startedTimeStamp: startedTimeStamp\n        };\n      }).addCase(mutationThunk.fulfilled, function (draft, _ref25) {\n        var payload = _ref25.payload,\n          meta = _ref25.meta;\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, function (substate) {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = \"fulfilled\" /* fulfilled */;\n          substate.data = payload;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(mutationThunk.rejected, function (draft, _ref26) {\n        var payload = _ref26.payload,\n          error = _ref26.error,\n          meta = _ref26.meta;\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, function (substate) {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = \"rejected\" /* rejected */;\n          substate.error = payload !== null && payload !== void 0 ? payload : error;\n        });\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var _extractRehydrationIn2 = extractRehydrationInfo(action),\n          mutations = _extractRehydrationIn2.mutations;\n        for (var _i5 = 0, _Object$entries3 = Object.entries(mutations); _i5 < _Object$entries3.length; _i5++) {\n          var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i5], 2),\n            key = _Object$entries3$_i[0],\n            entry = _Object$entries3$_i[1];\n          if (\n          // do not rehydrate entries that were currently in flight.\n          ((entry === null || entry === void 0 ? void 0 : entry.status) === \"fulfilled\" /* fulfilled */ || (entry === null || entry === void 0 ? void 0 : entry.status) === \"rejected\" /* rejected */) &&\n          // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n          key !== (entry === null || entry === void 0 ? void 0 : entry.requestId)) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  var invalidationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n    name: \"\".concat(reducerPath, \"/invalidation\"),\n    initialState: initialState,\n    reducers: {\n      updateProvidedBy: {\n        reducer: function reducer(draft, action) {\n          var _action$payload = action.payload,\n            queryCacheKey = _action$payload.queryCacheKey,\n            providedTags = _action$payload.providedTags;\n          for (var _i6 = 0, _Object$values = Object.values(draft); _i6 < _Object$values.length; _i6++) {\n            var tagTypeSubscriptions = _Object$values[_i6];\n            for (var _i7 = 0, _Object$values2 = Object.values(tagTypeSubscriptions); _i7 < _Object$values2.length; _i7++) {\n              var idSubscriptions = _Object$values2[_i7];\n              var foundAt = idSubscriptions.indexOf(queryCacheKey);\n              if (foundAt !== -1) {\n                idSubscriptions.splice(foundAt, 1);\n              }\n            }\n          }\n          var _iterator = _createForOfIteratorHelper(providedTags),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _draft$type, _ref27, _draft$type$_ref, _draft$type2;\n              var _step$value = _step.value,\n                type = _step$value.type,\n                id = _step$value.id;\n              var subscribedQueries = (_draft$type$_ref = (_draft$type = (_draft$type2 = draft[type]) !== null && _draft$type2 !== void 0 ? _draft$type2 : draft[type] = {})[_ref27 = id || \"__internal_without_id\"]) !== null && _draft$type$_ref !== void 0 ? _draft$type$_ref : _draft$type[_ref27] = [];\n              var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        },\n        prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n      }\n    },\n    extraReducers: function extraReducers(builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, function (draft, _ref28) {\n        var queryCacheKey = _ref28.payload.queryCacheKey;\n        for (var _i8 = 0, _Object$values3 = Object.values(draft); _i8 < _Object$values3.length; _i8++) {\n          var tagTypeSubscriptions = _Object$values3[_i8];\n          for (var _i9 = 0, _Object$values4 = Object.values(tagTypeSubscriptions); _i9 < _Object$values4.length; _i9++) {\n            var idSubscriptions = _Object$values4[_i9];\n            var foundAt = idSubscriptions.indexOf(queryCacheKey);\n            if (foundAt !== -1) {\n              idSubscriptions.splice(foundAt, 1);\n            }\n          }\n        }\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var _extractRehydrationIn3 = extractRehydrationInfo(action),\n          provided = _extractRehydrationIn3.provided;\n        for (var _i10 = 0, _Object$entries4 = Object.entries(provided); _i10 < _Object$entries4.length; _i10++) {\n          var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i10], 2),\n            type = _Object$entries4$_i[0],\n            incomingTags = _Object$entries4$_i[1];\n          for (var _i11 = 0, _Object$entries5 = Object.entries(incomingTags); _i11 < _Object$entries5.length; _i11++) {\n            var _draft$type3, _ref29, _draft$type3$_ref, _draft$type4;\n            var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i11], 2),\n              id = _Object$entries5$_i[0],\n              cacheKeys = _Object$entries5$_i[1];\n            var subscribedQueries = (_draft$type3$_ref = (_draft$type3 = (_draft$type4 = draft[type]) !== null && _draft$type4 !== void 0 ? _draft$type4 : draft[type] = {})[_ref29 = id || \"__internal_without_id\"]) !== null && _draft$type3$_ref !== void 0 ? _draft$type3$_ref : _draft$type3[_ref29] = [];\n            var _iterator2 = _createForOfIteratorHelper(cacheKeys),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var queryCacheKey = _step2.value;\n                var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n                if (!alreadySubscribed) {\n                  subscribedQueries.push(queryCacheKey);\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        }\n      }).addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(queryThunk)), function (draft, action) {\n        var providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n        var queryCacheKey = action.meta.arg.queryCacheKey;\n        invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({\n          queryCacheKey: queryCacheKey,\n          providedTags: providedTags\n        }));\n      });\n    }\n  });\n  var subscriptionSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n    name: \"\".concat(reducerPath, \"/subscriptions\"),\n    initialState: initialState,\n    reducers: {\n      updateSubscriptionOptions: function updateSubscriptionOptions(d, a) {},\n      unsubscribeQueryResult: function unsubscribeQueryResult(d, a) {},\n      internal_getRTKQSubscriptions: function internal_getRTKQSubscriptions() {}\n    }\n  });\n  var internalSubscriptionsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n    name: \"\".concat(reducerPath, \"/internalSubscriptions\"),\n    initialState: initialState,\n    reducers: {\n      subscriptionsUpdated: {\n        reducer: function reducer(state, action) {\n          return (0,immer__WEBPACK_IMPORTED_MODULE_2__.applyPatches)(state, action.payload);\n        },\n        prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n      }\n    }\n  });\n  var configSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n    name: \"\".concat(reducerPath, \"/config\"),\n    initialState: _objectSpread({\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false\n    }, config),\n    reducers: {\n      middlewareRegistered: function middlewareRegistered(state, _ref30) {\n        var payload = _ref30.payload;\n        state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n      }\n    },\n    extraReducers: function extraReducers(builder) {\n      builder.addCase(onOnline, function (state) {\n        state.online = true;\n      }).addCase(onOffline, function (state) {\n        state.online = false;\n      }).addCase(onFocus, function (state) {\n        state.focused = true;\n      }).addCase(onFocusLost, function (state) {\n        state.focused = false;\n      }).addMatcher(hasRehydrationInfo, function (draft) {\n        return _objectSpread({}, draft);\n      });\n    }\n  });\n  var combinedReducer = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.combineReducers)({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: internalSubscriptionsSlice.reducer,\n    config: configSlice.reducer\n  });\n  var reducer = function reducer(state, action) {\n    return combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n  };\n  var actions = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, configSlice.actions), querySlice.actions), subscriptionSlice.actions), internalSubscriptionsSlice.actions), mutationSlice.actions), invalidationSlice.actions), {}, {\n    resetApiState: resetApiState\n  });\n  return {\n    reducer: reducer,\n    actions: actions\n  };\n}\n\n// src/query/core/buildSelectors.ts\nvar skipToken = /* @__PURE__ */Symbol[\"for\"](\"RTKQ/skipToken\");\nvar initialSubState = {\n  status: \"uninitialized\" /* uninitialized */\n};\n\nvar defaultQuerySubState = /* @__PURE__ */(0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(initialSubState, function () {});\nvar defaultMutationSubState = /* @__PURE__ */(0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(initialSubState, function () {});\nfunction buildSelectors(_ref31) {\n  var serializeQueryArgs = _ref31.serializeQueryArgs,\n    reducerPath = _ref31.reducerPath,\n    createSelector2 = _ref31.createSelector;\n  var selectSkippedQuery = function selectSkippedQuery(state) {\n    return defaultQuerySubState;\n  };\n  var selectSkippedMutation = function selectSkippedMutation(state) {\n    return defaultMutationSubState;\n  };\n  return {\n    buildQuerySelector: buildQuerySelector,\n    buildMutationSelector: buildMutationSelector,\n    selectInvalidatedBy: selectInvalidatedBy,\n    selectCachedArgsForQuery: selectCachedArgsForQuery\n  };\n  function withRequestFlags(substate) {\n    return _objectSpread(_objectSpread({}, substate), getRequestStatusFlags(substate.status));\n  }\n  function selectInternalState(rootState) {\n    var state = rootState[reducerPath];\n    if (true) {\n      if (!state) {\n        if (selectInternalState.triggered) return state;\n        selectInternalState.triggered = true;\n        console.error(\"Error: No data found at `state.\".concat(reducerPath, \"`. Did you forget to add the reducer to the store?\"));\n      }\n    }\n    return state;\n  }\n  function buildQuerySelector(endpointName, endpointDefinition) {\n    return function (queryArgs) {\n      var serializedArgs = serializeQueryArgs({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      });\n      var selectQuerySubstate = function selectQuerySubstate(state) {\n        var _selectInternalState$, _selectInternalState;\n        return (_selectInternalState$ = (_selectInternalState = selectInternalState(state)) === null || _selectInternalState === void 0 || (_selectInternalState = _selectInternalState.queries) === null || _selectInternalState === void 0 ? void 0 : _selectInternalState[serializedArgs]) !== null && _selectInternalState$ !== void 0 ? _selectInternalState$ : defaultQuerySubState;\n      };\n      var finalSelectQuerySubState = queryArgs === skipToken ? selectSkippedQuery : selectQuerySubstate;\n      return createSelector2(finalSelectQuerySubState, withRequestFlags);\n    };\n  }\n  function buildMutationSelector() {\n    return function (id) {\n      var mutationId;\n      if (_typeof(id) === \"object\") {\n        var _getMutationCacheKey;\n        mutationId = (_getMutationCacheKey = getMutationCacheKey(id)) !== null && _getMutationCacheKey !== void 0 ? _getMutationCacheKey : skipToken;\n      } else {\n        mutationId = id;\n      }\n      var selectMutationSubstate = function selectMutationSubstate(state) {\n        var _selectInternalState$2, _selectInternalState2;\n        return (_selectInternalState$2 = (_selectInternalState2 = selectInternalState(state)) === null || _selectInternalState2 === void 0 || (_selectInternalState2 = _selectInternalState2.mutations) === null || _selectInternalState2 === void 0 ? void 0 : _selectInternalState2[mutationId]) !== null && _selectInternalState$2 !== void 0 ? _selectInternalState$2 : defaultMutationSubState;\n      };\n      var finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n      return createSelector2(finalSelectMutationSubstate, withRequestFlags);\n    };\n  }\n  function selectInvalidatedBy(state, tags) {\n    var apiState = state[reducerPath];\n    var toInvalidate = /* @__PURE__ */new Set();\n    var _iterator3 = _createForOfIteratorHelper(tags.map(expandTagDescription)),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _ref32;\n        var tag = _step3.value;\n        var provided = apiState.provided[tag.type];\n        if (!provided) {\n          continue;\n        }\n        var invalidateSubscriptions = (_ref32 = tag.id !== void 0 ?\n        // id given: invalidate all queries that provide this type & id\n        provided[tag.id] :\n        // no id: invalidate all queries that provide this type\n        flatten(Object.values(provided))) !== null && _ref32 !== void 0 ? _ref32 : [];\n        var _iterator4 = _createForOfIteratorHelper(invalidateSubscriptions),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var invalidate = _step4.value;\n            toInvalidate.add(invalidate);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return flatten(Array.from(toInvalidate.values()).map(function (queryCacheKey) {\n      var querySubState = apiState.queries[queryCacheKey];\n      return querySubState ? [{\n        queryCacheKey: queryCacheKey,\n        endpointName: querySubState.endpointName,\n        originalArgs: querySubState.originalArgs\n      }] : [];\n    }));\n  }\n  function selectCachedArgsForQuery(state, queryName) {\n    return Object.values(state[reducerPath].queries).filter(function (entry) {\n      return (entry === null || entry === void 0 ? void 0 : entry.endpointName) === queryName && entry.status !== \"uninitialized\";\n    } /* uninitialized */).map(function (entry) {\n      return entry.originalArgs;\n    });\n  }\n}\n\n// src/query/createApi.ts\n\n\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = function defaultSerializeQueryArgs(_ref33) {\n  var endpointName = _ref33.endpointName,\n    queryArgs = _ref33.queryArgs;\n  var serialized = \"\";\n  var cached = cache === null || cache === void 0 ? void 0 : cache.get(queryArgs);\n  if (typeof cached === \"string\") {\n    serialized = cached;\n  } else {\n    var stringified = JSON.stringify(queryArgs, function (key, value) {\n      value = typeof value === \"bigint\" ? {\n        $bigint: value.toString()\n      } : value;\n      value = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\n        acc[key2] = value[key2];\n        return acc;\n      }, {}) : value;\n      return value;\n    });\n    if ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(queryArgs)) {\n      cache === null || cache === void 0 || cache.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return \"\".concat(endpointName, \"(\").concat(serialized, \")\");\n};\n\n// src/query/createApi.ts\n\nfunction buildCreateApi() {\n  for (var _len = arguments.length, modules = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    modules[_key2] = arguments[_key2];\n  }\n  return function baseCreateApi(options) {\n    var extractRehydrationInfo = (0,reselect__WEBPACK_IMPORTED_MODULE_3__.weakMapMemoize)(function (action) {\n      var _options$extractRehyd, _options$reducerPath;\n      return (_options$extractRehyd = options.extractRehydrationInfo) === null || _options$extractRehyd === void 0 ? void 0 : _options$extractRehyd.call(options, action, {\n        reducerPath: (_options$reducerPath = options.reducerPath) !== null && _options$reducerPath !== void 0 ? _options$reducerPath : \"api\"\n      });\n    });\n    var optionsWithDefaults = _objectSpread(_objectSpread({\n      reducerPath: \"api\",\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false,\n      invalidationBehavior: \"delayed\"\n    }, options), {}, {\n      extractRehydrationInfo: extractRehydrationInfo,\n      serializeQueryArgs: function serializeQueryArgs(queryArgsApi) {\n        var finalSerializeQueryArgs = defaultSerializeQueryArgs;\n        if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\n          var endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs;\n          finalSerializeQueryArgs = function finalSerializeQueryArgs(queryArgsApi2) {\n            var initialResult = endpointSQA(queryArgsApi2);\n            if (typeof initialResult === \"string\") {\n              return initialResult;\n            } else {\n              return defaultSerializeQueryArgs(_objectSpread(_objectSpread({}, queryArgsApi2), {}, {\n                queryArgs: initialResult\n              }));\n            }\n          };\n        } else if (options.serializeQueryArgs) {\n          finalSerializeQueryArgs = options.serializeQueryArgs;\n        }\n        return finalSerializeQueryArgs(queryArgsApi);\n      },\n      tagTypes: _toConsumableArray(options.tagTypes || [])\n    });\n    var context = {\n      endpointDefinitions: {},\n      batch: function batch(fn) {\n        fn();\n      },\n      apiUid: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.nanoid)(),\n      extractRehydrationInfo: extractRehydrationInfo,\n      hasRehydrationInfo: (0,reselect__WEBPACK_IMPORTED_MODULE_3__.weakMapMemoize)(function (action) {\n        return extractRehydrationInfo(action) != null;\n      })\n    };\n    var api = {\n      injectEndpoints: injectEndpoints,\n      enhanceEndpoints: function enhanceEndpoints(_ref34) {\n        var addTagTypes = _ref34.addTagTypes,\n          endpoints = _ref34.endpoints;\n        if (addTagTypes) {\n          var _iterator5 = _createForOfIteratorHelper(addTagTypes),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var eT = _step5.value;\n              if (!optionsWithDefaults.tagTypes.includes(eT)) {\n                ;\n                optionsWithDefaults.tagTypes.push(eT);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n        if (endpoints) {\n          for (var _i12 = 0, _Object$entries6 = Object.entries(endpoints); _i12 < _Object$entries6.length; _i12++) {\n            var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i12], 2),\n              endpointName = _Object$entries6$_i[0],\n              partialDefinition = _Object$entries6$_i[1];\n            if (typeof partialDefinition === \"function\") {\n              partialDefinition(context.endpointDefinitions[endpointName]);\n            } else {\n              Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n            }\n          }\n        }\n        return api;\n      }\n    };\n    var initializedModules = modules.map(function (m) {\n      return m.init(api, optionsWithDefaults, context);\n    });\n    function injectEndpoints(inject) {\n      var evaluatedEndpoints = inject.endpoints({\n        query: function query(x) {\n          return _objectSpread(_objectSpread({}, x), {}, {\n            type: \"query\" /* query */\n          });\n        },\n\n        mutation: function mutation(x) {\n          return _objectSpread(_objectSpread({}, x), {}, {\n            type: \"mutation\" /* mutation */\n          });\n        }\n      });\n\n      for (var _i13 = 0, _Object$entries7 = Object.entries(evaluatedEndpoints); _i13 < _Object$entries7.length; _i13++) {\n        var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i13], 2),\n          endpointName = _Object$entries7$_i[0],\n          definition = _Object$entries7$_i[1];\n        if (inject.overrideExisting !== true && endpointName in context.endpointDefinitions) {\n          if (inject.overrideExisting === \"throw\") {\n            throw new Error( false ? 0 : \"called `injectEndpoints` to override already-existing endpointName \".concat(endpointName, \" without specifying `overrideExisting: true`\"));\n          } else if (typeof process !== \"undefined\" && true) {\n            console.error(\"called `injectEndpoints` to override already-existing endpointName \".concat(endpointName, \" without specifying `overrideExisting: true`\"));\n          }\n          continue;\n        }\n        context.endpointDefinitions[endpointName] = definition;\n        var _iterator6 = _createForOfIteratorHelper(initializedModules),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var m = _step6.value;\n            m.injectEndpoint(endpointName, definition);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n      return api;\n    }\n    return api.injectEndpoints({\n      endpoints: options.endpoints\n    });\n  };\n}\n\n// src/query/fakeBaseQuery.ts\n\nfunction fakeBaseQuery() {\n  return function () {\n    throw new Error( false ? 0 : \"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n  };\n}\n\n// src/query/core/module.ts\n\n\n// src/query/tsHelpers.ts\nfunction assertCast(v) {}\nfunction safeAssign(target) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n  return Object.assign.apply(Object, [target].concat(args));\n}\n\n// src/query/core/buildMiddleware/batchActions.ts\n\nvar buildBatchedActionsHandler = function buildBatchedActionsHandler(_ref35) {\n  var api = _ref35.api,\n    queryThunk = _ref35.queryThunk,\n    internalState = _ref35.internalState;\n  var subscriptionsPrefix = \"\".concat(api.reducerPath, \"/subscriptions\");\n  var previousSubscriptions = null;\n  var updateSyncTimer = null;\n  var _api$internalActions2 = api.internalActions,\n    updateSubscriptionOptions = _api$internalActions2.updateSubscriptionOptions,\n    unsubscribeQueryResult = _api$internalActions2.unsubscribeQueryResult;\n  var actuallyMutateSubscriptions = function actuallyMutateSubscriptions(mutableState, action) {\n    if (updateSubscriptionOptions.match(action)) {\n      var _mutableState$queryCa;\n      var _action$payload2 = action.payload,\n        queryCacheKey = _action$payload2.queryCacheKey,\n        requestId = _action$payload2.requestId,\n        options = _action$payload2.options;\n      if (mutableState !== null && mutableState !== void 0 && (_mutableState$queryCa = mutableState[queryCacheKey]) !== null && _mutableState$queryCa !== void 0 && _mutableState$queryCa[requestId]) {\n        mutableState[queryCacheKey][requestId] = options;\n      }\n      return true;\n    }\n    if (unsubscribeQueryResult.match(action)) {\n      var _action$payload3 = action.payload,\n        _queryCacheKey = _action$payload3.queryCacheKey,\n        _requestId = _action$payload3.requestId;\n      if (mutableState[_queryCacheKey]) {\n        delete mutableState[_queryCacheKey][_requestId];\n      }\n      return true;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) {\n      delete mutableState[action.payload.queryCacheKey];\n      return true;\n    }\n    if (queryThunk.pending.match(action)) {\n      var _arg$queryCacheKey2, _mutableState$_arg$qu;\n      var _action$meta2 = action.meta,\n        arg = _action$meta2.arg,\n        _requestId2 = _action$meta2.requestId;\n      var substate = (_mutableState$_arg$qu = mutableState[_arg$queryCacheKey2 = arg.queryCacheKey]) !== null && _mutableState$_arg$qu !== void 0 ? _mutableState$_arg$qu : mutableState[_arg$queryCacheKey2] = {};\n      substate[\"\".concat(_requestId2, \"_running\")] = {};\n      if (arg.subscribe) {\n        var _ref36, _arg$subscriptionOpti;\n        substate[_requestId2] = (_ref36 = (_arg$subscriptionOpti = arg.subscriptionOptions) !== null && _arg$subscriptionOpti !== void 0 ? _arg$subscriptionOpti : substate[_requestId2]) !== null && _ref36 !== void 0 ? _ref36 : {};\n      }\n      return true;\n    }\n    var mutated = false;\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {\n      var state = mutableState[action.meta.arg.queryCacheKey] || {};\n      var key = \"\".concat(action.meta.requestId, \"_running\");\n      mutated || (mutated = !!state[key]);\n      delete state[key];\n    }\n    if (queryThunk.rejected.match(action)) {\n      var _action$meta3 = action.meta,\n        condition = _action$meta3.condition,\n        _arg = _action$meta3.arg,\n        _requestId3 = _action$meta3.requestId;\n      if (condition && _arg.subscribe) {\n        var _arg$queryCacheKey3, _mutableState$_arg$qu2, _ref37, _arg$subscriptionOpti2;\n        var _substate = (_mutableState$_arg$qu2 = mutableState[_arg$queryCacheKey3 = _arg.queryCacheKey]) !== null && _mutableState$_arg$qu2 !== void 0 ? _mutableState$_arg$qu2 : mutableState[_arg$queryCacheKey3] = {};\n        _substate[_requestId3] = (_ref37 = (_arg$subscriptionOpti2 = _arg.subscriptionOptions) !== null && _arg$subscriptionOpti2 !== void 0 ? _arg$subscriptionOpti2 : _substate[_requestId3]) !== null && _ref37 !== void 0 ? _ref37 : {};\n        mutated = true;\n      }\n    }\n    return mutated;\n  };\n  var getSubscriptions = function getSubscriptions() {\n    return internalState.currentSubscriptions;\n  };\n  var getSubscriptionCount = function getSubscriptionCount(queryCacheKey) {\n    var _subscriptions$queryC;\n    var subscriptions = getSubscriptions();\n    var subscriptionsForQueryArg = (_subscriptions$queryC = subscriptions[queryCacheKey]) !== null && _subscriptions$queryC !== void 0 ? _subscriptions$queryC : {};\n    return countObjectKeys(subscriptionsForQueryArg);\n  };\n  var isRequestSubscribed = function isRequestSubscribed(queryCacheKey, requestId) {\n    var _subscriptions$queryC2;\n    var subscriptions = getSubscriptions();\n    return !!(subscriptions !== null && subscriptions !== void 0 && (_subscriptions$queryC2 = subscriptions[queryCacheKey]) !== null && _subscriptions$queryC2 !== void 0 && _subscriptions$queryC2[requestId]);\n  };\n  var subscriptionSelectors = {\n    getSubscriptions: getSubscriptions,\n    getSubscriptionCount: getSubscriptionCount,\n    isRequestSubscribed: isRequestSubscribed\n  };\n  return function (action, mwApi) {\n    if (!previousSubscriptions) {\n      previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n    }\n    if (api.util.resetApiState.match(action)) {\n      previousSubscriptions = internalState.currentSubscriptions = {};\n      updateSyncTimer = null;\n      return [true, false];\n    }\n    if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {\n      return [false, subscriptionSelectors];\n    }\n    var didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n    var actionShouldContinue = true;\n    if (didMutate) {\n      if (!updateSyncTimer) {\n        updateSyncTimer = setTimeout(function () {\n          var newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n          var _produceWithPatches3 = (0,immer__WEBPACK_IMPORTED_MODULE_2__.produceWithPatches)(previousSubscriptions, function () {\n              return newSubscriptions;\n            }),\n            _produceWithPatches4 = _slicedToArray(_produceWithPatches3, 2),\n            patches = _produceWithPatches4[1];\n          mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n          previousSubscriptions = newSubscriptions;\n          updateSyncTimer = null;\n        }, 500);\n      }\n      var isSubscriptionSliceAction = typeof action.type == \"string\" && !!action.type.startsWith(subscriptionsPrefix);\n      var isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n      actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n    }\n    return [actionShouldContinue, false];\n  };\n};\n\n// src/query/core/buildMiddleware/cacheCollection.ts\nfunction isObjectEmpty(obj) {\n  for (var k in obj) {\n    return false;\n  }\n  return true;\n}\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\nvar buildCacheCollectionHandler = function buildCacheCollectionHandler(_ref38) {\n  var reducerPath = _ref38.reducerPath,\n    api = _ref38.api,\n    queryThunk = _ref38.queryThunk,\n    context = _ref38.context,\n    internalState = _ref38.internalState;\n  var _api$internalActions3 = api.internalActions,\n    removeQueryResult = _api$internalActions3.removeQueryResult,\n    unsubscribeQueryResult = _api$internalActions3.unsubscribeQueryResult;\n  var canTriggerUnsubscribe = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)(unsubscribeQueryResult.match, queryThunk.fulfilled, queryThunk.rejected);\n  function anySubscriptionsRemainingForKey(queryCacheKey) {\n    var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    return !!subscriptions && !isObjectEmpty(subscriptions);\n  }\n  var currentRemovalTimeouts = {};\n  var handler = function handler(action, mwApi, internalState2) {\n    if (canTriggerUnsubscribe(action)) {\n      var _state$queries$queryC;\n      var state = mwApi.getState()[reducerPath];\n      var _ref39 = unsubscribeQueryResult.match(action) ? action.payload : action.meta.arg,\n        queryCacheKey = _ref39.queryCacheKey;\n      handleUnsubscribe(queryCacheKey, (_state$queries$queryC = state.queries[queryCacheKey]) === null || _state$queries$queryC === void 0 ? void 0 : _state$queries$queryC.endpointName, mwApi, state.config);\n    }\n    if (api.util.resetApiState.match(action)) {\n      for (var _i14 = 0, _Object$entries8 = Object.entries(currentRemovalTimeouts); _i14 < _Object$entries8.length; _i14++) {\n        var _Object$entries8$_i = _slicedToArray(_Object$entries8[_i14], 2),\n          key = _Object$entries8$_i[0],\n          timeout = _Object$entries8$_i[1];\n        if (timeout) clearTimeout(timeout);\n        delete currentRemovalTimeouts[key];\n      }\n    }\n    if (context.hasRehydrationInfo(action)) {\n      var _state = mwApi.getState()[reducerPath];\n      var _context$extractRehyd = context.extractRehydrationInfo(action),\n        queries = _context$extractRehyd.queries;\n      for (var _i15 = 0, _Object$entries9 = Object.entries(queries); _i15 < _Object$entries9.length; _i15++) {\n        var _Object$entries9$_i = _slicedToArray(_Object$entries9[_i15], 2),\n          _queryCacheKey2 = _Object$entries9$_i[0],\n          queryState = _Object$entries9$_i[1];\n        handleUnsubscribe(_queryCacheKey2, queryState === null || queryState === void 0 ? void 0 : queryState.endpointName, mwApi, _state.config);\n      }\n    }\n  };\n  function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n    var _endpointDefinition$k;\n    var endpointDefinition = context.endpointDefinitions[endpointName];\n    var keepUnusedDataFor = (_endpointDefinition$k = endpointDefinition === null || endpointDefinition === void 0 ? void 0 : endpointDefinition.keepUnusedDataFor) !== null && _endpointDefinition$k !== void 0 ? _endpointDefinition$k : config.keepUnusedDataFor;\n    if (keepUnusedDataFor === Infinity) {\n      return;\n    }\n    var finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n    if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n      var currentTimeout = currentRemovalTimeouts[queryCacheKey];\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(function () {\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n          api2.dispatch(removeQueryResult({\n            queryCacheKey: queryCacheKey\n          }));\n        }\n        delete currentRemovalTimeouts[queryCacheKey];\n      }, finalKeepUnusedDataFor * 1e3);\n    }\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/cacheLifecycle.ts\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\nvar buildCacheLifecycleHandler = function buildCacheLifecycleHandler(_ref40) {\n  var api = _ref40.api,\n    reducerPath = _ref40.reducerPath,\n    context = _ref40.context,\n    queryThunk = _ref40.queryThunk,\n    mutationThunk = _ref40.mutationThunk,\n    internalState = _ref40.internalState;\n  var isQueryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAsyncThunkAction)(queryThunk);\n  var isMutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAsyncThunkAction)(mutationThunk);\n  var isFulfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk, mutationThunk);\n  var lifecycleMap = {};\n  var handler = function handler(action, mwApi, stateBefore) {\n    var cacheKey = getCacheKey(action);\n    if (queryThunk.pending.match(action)) {\n      var oldState = stateBefore[reducerPath].queries[cacheKey];\n      var state = mwApi.getState()[reducerPath].queries[cacheKey];\n      if (!oldState && state) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (mutationThunk.pending.match(action)) {\n      var _state2 = mwApi.getState()[reducerPath].mutations[cacheKey];\n      if (_state2) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (isFulfilledThunk(action)) {\n      var lifecycle = lifecycleMap[cacheKey];\n      if (lifecycle !== null && lifecycle !== void 0 && lifecycle.valueResolved) {\n        lifecycle.valueResolved({\n          data: action.payload,\n          meta: action.meta.baseQueryMeta\n        });\n        delete lifecycle.valueResolved;\n      }\n    } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n      var _lifecycle = lifecycleMap[cacheKey];\n      if (_lifecycle) {\n        delete lifecycleMap[cacheKey];\n        _lifecycle.cacheEntryRemoved();\n      }\n    } else if (api.util.resetApiState.match(action)) {\n      for (var _i16 = 0, _Object$entries10 = Object.entries(lifecycleMap); _i16 < _Object$entries10.length; _i16++) {\n        var _Object$entries10$_i = _slicedToArray(_Object$entries10[_i16], 2),\n          cacheKey2 = _Object$entries10$_i[0],\n          _lifecycle2 = _Object$entries10$_i[1];\n        delete lifecycleMap[cacheKey2];\n        _lifecycle2.cacheEntryRemoved();\n      }\n    }\n  };\n  function getCacheKey(action) {\n    if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n    if (isMutationThunk(action)) {\n      var _action$meta$arg$fixe;\n      return (_action$meta$arg$fixe = action.meta.arg.fixedCacheKey) !== null && _action$meta$arg$fixe !== void 0 ? _action$meta$arg$fixe : action.meta.requestId;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n    if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n    return \"\";\n  }\n  function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\n    var endpointDefinition = context.endpointDefinitions[endpointName];\n    var onCacheEntryAdded = endpointDefinition === null || endpointDefinition === void 0 ? void 0 : endpointDefinition.onCacheEntryAdded;\n    if (!onCacheEntryAdded) return;\n    var lifecycle = {};\n    var cacheEntryRemoved = new Promise(function (resolve) {\n      lifecycle.cacheEntryRemoved = resolve;\n    });\n    var cacheDataLoaded = Promise.race([new Promise(function (resolve) {\n      lifecycle.valueResolved = resolve;\n    }), cacheEntryRemoved.then(function () {\n      throw neverResolvedError;\n    })]);\n    cacheDataLoaded[\"catch\"](function () {});\n    lifecycleMap[queryCacheKey] = lifecycle;\n    var selector = api.endpoints[endpointName].select(endpointDefinition.type === \"query\" /* query */ ? originalArgs : queryCacheKey);\n    var extra = mwApi.dispatch(function (_, __, extra2) {\n      return extra2;\n    });\n    var lifecycleApi = _objectSpread(_objectSpread({}, mwApi), {}, {\n      getCacheEntry: function getCacheEntry() {\n        return selector(mwApi.getState());\n      },\n      requestId: requestId,\n      extra: extra,\n      updateCachedData: endpointDefinition.type === \"query\" /* query */ ? function (updateRecipe) {\n        return mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe));\n      } : void 0,\n      cacheDataLoaded: cacheDataLoaded,\n      cacheEntryRemoved: cacheEntryRemoved\n    });\n    var runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n    Promise.resolve(runningHandler)[\"catch\"](function (e) {\n      if (e === neverResolvedError) return;\n      throw e;\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/devMiddleware.ts\nvar buildDevCheckHandler = function buildDevCheckHandler(_ref41) {\n  var api = _ref41.api,\n    apiUid = _ref41.context.apiUid,\n    reducerPath = _ref41.reducerPath;\n  return function (action, mwApi) {\n    if (api.util.resetApiState.match(action)) {\n      mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n    }\n    if (typeof process !== \"undefined\" && true) {\n      var _mwApi$getState$reduc;\n      if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && ((_mwApi$getState$reduc = mwApi.getState()[reducerPath]) === null || _mwApi$getState$reduc === void 0 || (_mwApi$getState$reduc = _mwApi$getState$reduc.config) === null || _mwApi$getState$reduc === void 0 ? void 0 : _mwApi$getState$reduc.middlewareRegistered) === \"conflict\") {\n        console.warn(\"There is a mismatch between slice and middleware for the reducerPath \\\"\".concat(reducerPath, \"\\\".\\nYou can only have one api per reducer path, this will lead to crashes in various situations!\").concat(reducerPath === \"api\" ? \"\\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!\" : \"\"));\n      }\n    }\n  };\n};\n\n// src/query/core/buildMiddleware/invalidationByTags.ts\nvar buildInvalidationByTagsHandler = function buildInvalidationByTagsHandler(_ref42) {\n  var reducerPath = _ref42.reducerPath,\n    context = _ref42.context,\n    endpointDefinitions = _ref42.context.endpointDefinitions,\n    mutationThunk = _ref42.mutationThunk,\n    queryThunk = _ref42.queryThunk,\n    api = _ref42.api,\n    assertTagType = _ref42.assertTagType,\n    refetchQuery = _ref42.refetchQuery,\n    internalState = _ref42.internalState;\n  var removeQueryResult = api.internalActions.removeQueryResult;\n  var isThunkActionWithTags = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(mutationThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(mutationThunk));\n  var isQueryEnd = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(mutationThunk, queryThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(mutationThunk, queryThunk));\n  var pendingTagInvalidations = [];\n  var handler = function handler(action, mwApi) {\n    if (isThunkActionWithTags(action)) {\n      invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n    } else if (isQueryEnd(action)) {\n      invalidateTags([], mwApi);\n    } else if (api.util.invalidateTags.match(action)) {\n      invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n    }\n  };\n  function hasPendingRequests(state) {\n    for (var key in state.queries) {\n      var _state$queries$key;\n      if (((_state$queries$key = state.queries[key]) === null || _state$queries$key === void 0 ? void 0 : _state$queries$key.status) === \"pending\" /* pending */) return true;\n    }\n    for (var _key4 in state.mutations) {\n      var _state$mutations$_key;\n      if (((_state$mutations$_key = state.mutations[_key4]) === null || _state$mutations$_key === void 0 ? void 0 : _state$mutations$_key.status) === \"pending\" /* pending */) return true;\n    }\n    return false;\n  }\n  function invalidateTags(newTags, mwApi) {\n    var _pendingTagInvalidati;\n    var rootState = mwApi.getState();\n    var state = rootState[reducerPath];\n    (_pendingTagInvalidati = pendingTagInvalidations).push.apply(_pendingTagInvalidati, _toConsumableArray(newTags));\n    if (state.config.invalidationBehavior === \"delayed\" && hasPendingRequests(state)) {\n      return;\n    }\n    var tags = pendingTagInvalidations;\n    pendingTagInvalidations = [];\n    if (tags.length === 0) return;\n    var toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n    context.batch(function () {\n      var valuesArray = Array.from(toInvalidate.values());\n      for (var _i17 = 0, _valuesArray = valuesArray; _i17 < _valuesArray.length; _i17++) {\n        var _internalState$curren;\n        var queryCacheKey = _valuesArray[_i17].queryCacheKey;\n        var querySubState = state.queries[queryCacheKey];\n        var subscriptionSubState = (_internalState$curren = internalState.currentSubscriptions[queryCacheKey]) !== null && _internalState$curren !== void 0 ? _internalState$curren : {};\n        if (querySubState) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            mwApi.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey\n            }));\n          } else if (querySubState.status !== \"uninitialized\" /* uninitialized */) {\n            mwApi.dispatch(refetchQuery(querySubState, queryCacheKey));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/polling.ts\nvar buildPollingHandler = function buildPollingHandler(_ref43) {\n  var reducerPath = _ref43.reducerPath,\n    queryThunk = _ref43.queryThunk,\n    api = _ref43.api,\n    refetchQuery = _ref43.refetchQuery,\n    internalState = _ref43.internalState;\n  var currentPolls = {};\n  var handler = function handler(action, mwApi) {\n    if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n      updatePollingInterval(action.payload, mwApi);\n    }\n    if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n      updatePollingInterval(action.meta.arg, mwApi);\n    }\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n      startNextPoll(action.meta.arg, mwApi);\n    }\n    if (api.util.resetApiState.match(action)) {\n      clearPolls();\n    }\n  };\n  function startNextPoll(_ref44, api2) {\n    var queryCacheKey = _ref44.queryCacheKey;\n    var state = api2.getState()[reducerPath];\n    var querySubState = state.queries[queryCacheKey];\n    var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */) return;\n    var _findLowestPollingInt = findLowestPollingInterval(subscriptions),\n      lowestPollingInterval = _findLowestPollingInt.lowestPollingInterval,\n      skipPollingIfUnfocused = _findLowestPollingInt.skipPollingIfUnfocused;\n    if (!Number.isFinite(lowestPollingInterval)) return;\n    var currentPoll = currentPolls[queryCacheKey];\n    if (currentPoll !== null && currentPoll !== void 0 && currentPoll.timeout) {\n      clearTimeout(currentPoll.timeout);\n      currentPoll.timeout = void 0;\n    }\n    var nextPollTimestamp = Date.now() + lowestPollingInterval;\n    currentPolls[queryCacheKey] = {\n      nextPollTimestamp: nextPollTimestamp,\n      pollingInterval: lowestPollingInterval,\n      timeout: setTimeout(function () {\n        if (state.config.focused || !skipPollingIfUnfocused) {\n          api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n        }\n        startNextPoll({\n          queryCacheKey: queryCacheKey\n        }, api2);\n      }, lowestPollingInterval)\n    };\n  }\n  function updatePollingInterval(_ref45, api2) {\n    var queryCacheKey = _ref45.queryCacheKey;\n    var state = api2.getState()[reducerPath];\n    var querySubState = state.queries[queryCacheKey];\n    var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */) {\n      return;\n    }\n    var _findLowestPollingInt2 = findLowestPollingInterval(subscriptions),\n      lowestPollingInterval = _findLowestPollingInt2.lowestPollingInterval;\n    if (!Number.isFinite(lowestPollingInterval)) {\n      cleanupPollForKey(queryCacheKey);\n      return;\n    }\n    var currentPoll = currentPolls[queryCacheKey];\n    var nextPollTimestamp = Date.now() + lowestPollingInterval;\n    if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n      startNextPoll({\n        queryCacheKey: queryCacheKey\n      }, api2);\n    }\n  }\n  function cleanupPollForKey(key) {\n    var existingPoll = currentPolls[key];\n    if (existingPoll !== null && existingPoll !== void 0 && existingPoll.timeout) {\n      clearTimeout(existingPoll.timeout);\n    }\n    delete currentPolls[key];\n  }\n  function clearPolls() {\n    for (var _i18 = 0, _Object$keys2 = Object.keys(currentPolls); _i18 < _Object$keys2.length; _i18++) {\n      var key = _Object$keys2[_i18];\n      cleanupPollForKey(key);\n    }\n  }\n  function findLowestPollingInterval() {\n    var subscribers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var skipPollingIfUnfocused = false;\n    var lowestPollingInterval = Number.POSITIVE_INFINITY;\n    for (var key in subscribers) {\n      if (!!subscribers[key].pollingInterval) {\n        lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\n        skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;\n      }\n    }\n    return {\n      lowestPollingInterval: lowestPollingInterval,\n      skipPollingIfUnfocused: skipPollingIfUnfocused\n    };\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/queryLifecycle.ts\nvar buildQueryLifecycleHandler = function buildQueryLifecycleHandler(_ref46) {\n  var api = _ref46.api,\n    context = _ref46.context,\n    queryThunk = _ref46.queryThunk,\n    mutationThunk = _ref46.mutationThunk;\n  var isPendingThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPending)(queryThunk, mutationThunk);\n  var isRejectedThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(queryThunk, mutationThunk);\n  var isFullfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk, mutationThunk);\n  var lifecycleMap = {};\n  var handler = function handler(action, mwApi) {\n    if (isPendingThunk(action)) {\n      var _action$meta4 = action.meta,\n        requestId = _action$meta4.requestId,\n        _action$meta4$arg = _action$meta4.arg,\n        endpointName = _action$meta4$arg.endpointName,\n        originalArgs = _action$meta4$arg.originalArgs;\n      var endpointDefinition = context.endpointDefinitions[endpointName];\n      var onQueryStarted = endpointDefinition === null || endpointDefinition === void 0 ? void 0 : endpointDefinition.onQueryStarted;\n      if (onQueryStarted) {\n        var lifecycle = {};\n        var queryFulfilled = new Promise(function (resolve, reject) {\n          lifecycle.resolve = resolve;\n          lifecycle.reject = reject;\n        });\n        queryFulfilled[\"catch\"](function () {});\n        lifecycleMap[requestId] = lifecycle;\n        var selector = api.endpoints[endpointName].select(endpointDefinition.type === \"query\" /* query */ ? originalArgs : requestId);\n        var extra = mwApi.dispatch(function (_, __, extra2) {\n          return extra2;\n        });\n        var lifecycleApi = _objectSpread(_objectSpread({}, mwApi), {}, {\n          getCacheEntry: function getCacheEntry() {\n            return selector(mwApi.getState());\n          },\n          requestId: requestId,\n          extra: extra,\n          updateCachedData: endpointDefinition.type === \"query\" /* query */ ? function (updateRecipe) {\n            return mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe));\n          } : void 0,\n          queryFulfilled: queryFulfilled\n        });\n        onQueryStarted(originalArgs, lifecycleApi);\n      }\n    } else if (isFullfilledThunk(action)) {\n      var _lifecycleMap$_reques;\n      var _action$meta5 = action.meta,\n        _requestId4 = _action$meta5.requestId,\n        baseQueryMeta = _action$meta5.baseQueryMeta;\n      (_lifecycleMap$_reques = lifecycleMap[_requestId4]) === null || _lifecycleMap$_reques === void 0 || _lifecycleMap$_reques.resolve({\n        data: action.payload,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[_requestId4];\n    } else if (isRejectedThunk(action)) {\n      var _lifecycleMap$_reques2, _action$payload4;\n      var _action$meta6 = action.meta,\n        _requestId5 = _action$meta6.requestId,\n        rejectedWithValue = _action$meta6.rejectedWithValue,\n        _baseQueryMeta = _action$meta6.baseQueryMeta;\n      (_lifecycleMap$_reques2 = lifecycleMap[_requestId5]) === null || _lifecycleMap$_reques2 === void 0 || _lifecycleMap$_reques2.reject({\n        error: (_action$payload4 = action.payload) !== null && _action$payload4 !== void 0 ? _action$payload4 : action.error,\n        isUnhandledError: !rejectedWithValue,\n        meta: _baseQueryMeta\n      });\n      delete lifecycleMap[_requestId5];\n    }\n  };\n  return handler;\n};\n\n// src/query/core/buildMiddleware/windowEventHandling.ts\nvar buildWindowEventHandler = function buildWindowEventHandler(_ref47) {\n  var reducerPath = _ref47.reducerPath,\n    context = _ref47.context,\n    api = _ref47.api,\n    refetchQuery = _ref47.refetchQuery,\n    internalState = _ref47.internalState;\n  var removeQueryResult = api.internalActions.removeQueryResult;\n  var handler = function handler(action, mwApi) {\n    if (onFocus.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnFocus\");\n    }\n    if (onOnline.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnReconnect\");\n    }\n  };\n  function refetchValidQueries(api2, type) {\n    var state = api2.getState()[reducerPath];\n    var queries = state.queries;\n    var subscriptions = internalState.currentSubscriptions;\n    context.batch(function () {\n      for (var _i19 = 0, _Object$keys3 = Object.keys(subscriptions); _i19 < _Object$keys3.length; _i19++) {\n        var queryCacheKey = _Object$keys3[_i19];\n        var querySubState = queries[queryCacheKey];\n        var subscriptionSubState = subscriptions[queryCacheKey];\n        if (!subscriptionSubState || !querySubState) continue;\n        var shouldRefetch = Object.values(subscriptionSubState).some(function (sub) {\n          return sub[type] === true;\n        }) || Object.values(subscriptionSubState).every(function (sub) {\n          return sub[type] === void 0;\n        }) && state.config[type];\n        if (shouldRefetch) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            api2.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey\n            }));\n          } else if (querySubState.status !== \"uninitialized\" /* uninitialized */) {\n            api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/index.ts\nfunction buildMiddleware(input) {\n  var reducerPath = input.reducerPath,\n    queryThunk = input.queryThunk,\n    api = input.api,\n    context = input.context;\n  var apiUid = context.apiUid;\n  var actions = {\n    invalidateTags: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"\".concat(reducerPath, \"/invalidateTags\"))\n  };\n  var isThisApiSliceAction = function isThisApiSliceAction(action) {\n    return action.type.startsWith(\"\".concat(reducerPath, \"/\"));\n  };\n  var handlerBuilders = [buildDevCheckHandler, buildCacheCollectionHandler, buildInvalidationByTagsHandler, buildPollingHandler, buildCacheLifecycleHandler, buildQueryLifecycleHandler];\n  var middleware = function middleware(mwApi) {\n    var initialized2 = false;\n    var internalState = {\n      currentSubscriptions: {}\n    };\n    var builderArgs = _objectSpread(_objectSpread({}, input), {}, {\n      internalState: internalState,\n      refetchQuery: refetchQuery,\n      isThisApiSliceAction: isThisApiSliceAction\n    });\n    var handlers = handlerBuilders.map(function (build) {\n      return build(builderArgs);\n    });\n    var batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n    var windowEventsHandler = buildWindowEventHandler(builderArgs);\n    return function (next) {\n      return function (action) {\n        if (!(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n          return next(action);\n        }\n        if (!initialized2) {\n          initialized2 = true;\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        var mwApiWithNext = _objectSpread(_objectSpread({}, mwApi), {}, {\n          next: next\n        });\n        var stateBefore = mwApi.getState();\n        var _batchedActionsHandle = batchedActionsHandler(action, mwApiWithNext, stateBefore),\n          _batchedActionsHandle2 = _slicedToArray(_batchedActionsHandle, 2),\n          actionShouldContinue = _batchedActionsHandle2[0],\n          internalProbeResult = _batchedActionsHandle2[1];\n        var res;\n        if (actionShouldContinue) {\n          res = next(action);\n        } else {\n          res = internalProbeResult;\n        }\n        if (!!mwApi.getState()[reducerPath]) {\n          windowEventsHandler(action, mwApiWithNext, stateBefore);\n          if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n            var _iterator7 = _createForOfIteratorHelper(handlers),\n              _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var handler = _step7.value;\n                handler(action, mwApiWithNext, stateBefore);\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n        }\n        return res;\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    actions: actions\n  };\n  function refetchQuery(querySubState, queryCacheKey) {\n    var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return queryThunk(_objectSpread({\n      type: \"query\",\n      endpointName: querySubState.endpointName,\n      originalArgs: querySubState.originalArgs,\n      subscribe: false,\n      forceRefetch: true,\n      queryCacheKey: queryCacheKey\n    }, override));\n  }\n}\n\n// src/query/core/module.ts\nvar coreModuleName = /* @__PURE__ */Symbol();\nvar coreModule = function coreModule() {\n  var _ref48 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref48$createSelector = _ref48.createSelector,\n    createSelector2 = _ref48$createSelector === void 0 ? reselect__WEBPACK_IMPORTED_MODULE_3__.createSelector : _ref48$createSelector;\n  return {\n    name: coreModuleName,\n    init: function init(api, _ref49, context) {\n      var baseQuery = _ref49.baseQuery,\n        tagTypes = _ref49.tagTypes,\n        reducerPath = _ref49.reducerPath,\n        serializeQueryArgs = _ref49.serializeQueryArgs,\n        keepUnusedDataFor = _ref49.keepUnusedDataFor,\n        refetchOnMountOrArgChange = _ref49.refetchOnMountOrArgChange,\n        refetchOnFocus = _ref49.refetchOnFocus,\n        refetchOnReconnect = _ref49.refetchOnReconnect,\n        invalidationBehavior = _ref49.invalidationBehavior;\n      (0,immer__WEBPACK_IMPORTED_MODULE_2__.enablePatches)();\n      assertCast(serializeQueryArgs);\n      var assertTagType = function assertTagType(tag) {\n        if (typeof process !== \"undefined\" && true) {\n          if (!tagTypes.includes(tag.type)) {\n            console.error(\"Tag type '\".concat(tag.type, \"' was used, but not specified in `tagTypes`!\"));\n          }\n        }\n        return tag;\n      };\n      Object.assign(api, {\n        reducerPath: reducerPath,\n        endpoints: {},\n        internalActions: {\n          onOnline: onOnline,\n          onOffline: onOffline,\n          onFocus: onFocus,\n          onFocusLost: onFocusLost\n        },\n        util: {}\n      });\n      var _buildThunks = buildThunks({\n          baseQuery: baseQuery,\n          reducerPath: reducerPath,\n          context: context,\n          api: api,\n          serializeQueryArgs: serializeQueryArgs,\n          assertTagType: assertTagType\n        }),\n        queryThunk = _buildThunks.queryThunk,\n        mutationThunk = _buildThunks.mutationThunk,\n        patchQueryData = _buildThunks.patchQueryData,\n        updateQueryData = _buildThunks.updateQueryData,\n        upsertQueryData = _buildThunks.upsertQueryData,\n        prefetch = _buildThunks.prefetch,\n        buildMatchThunkActions = _buildThunks.buildMatchThunkActions;\n      var _buildSlice = buildSlice({\n          context: context,\n          queryThunk: queryThunk,\n          mutationThunk: mutationThunk,\n          reducerPath: reducerPath,\n          assertTagType: assertTagType,\n          config: {\n            refetchOnFocus: refetchOnFocus,\n            refetchOnReconnect: refetchOnReconnect,\n            refetchOnMountOrArgChange: refetchOnMountOrArgChange,\n            keepUnusedDataFor: keepUnusedDataFor,\n            reducerPath: reducerPath,\n            invalidationBehavior: invalidationBehavior\n          }\n        }),\n        reducer = _buildSlice.reducer,\n        sliceActions = _buildSlice.actions;\n      safeAssign(api.util, {\n        patchQueryData: patchQueryData,\n        updateQueryData: updateQueryData,\n        upsertQueryData: upsertQueryData,\n        prefetch: prefetch,\n        resetApiState: sliceActions.resetApiState\n      });\n      safeAssign(api.internalActions, sliceActions);\n      var _buildMiddleware = buildMiddleware({\n          reducerPath: reducerPath,\n          context: context,\n          queryThunk: queryThunk,\n          mutationThunk: mutationThunk,\n          api: api,\n          assertTagType: assertTagType\n        }),\n        middleware = _buildMiddleware.middleware,\n        middlewareActions = _buildMiddleware.actions;\n      safeAssign(api.util, middlewareActions);\n      safeAssign(api, {\n        reducer: reducer,\n        middleware: middleware\n      });\n      var _buildSelectors = buildSelectors({\n          serializeQueryArgs: serializeQueryArgs,\n          reducerPath: reducerPath,\n          createSelector: createSelector2\n        }),\n        buildQuerySelector = _buildSelectors.buildQuerySelector,\n        buildMutationSelector = _buildSelectors.buildMutationSelector,\n        selectInvalidatedBy = _buildSelectors.selectInvalidatedBy,\n        selectCachedArgsForQuery = _buildSelectors.selectCachedArgsForQuery;\n      safeAssign(api.util, {\n        selectInvalidatedBy: selectInvalidatedBy,\n        selectCachedArgsForQuery: selectCachedArgsForQuery\n      });\n      var _buildInitiate = buildInitiate({\n          queryThunk: queryThunk,\n          mutationThunk: mutationThunk,\n          api: api,\n          serializeQueryArgs: serializeQueryArgs,\n          context: context\n        }),\n        buildInitiateQuery = _buildInitiate.buildInitiateQuery,\n        buildInitiateMutation = _buildInitiate.buildInitiateMutation,\n        getRunningMutationThunk = _buildInitiate.getRunningMutationThunk,\n        getRunningMutationsThunk = _buildInitiate.getRunningMutationsThunk,\n        getRunningQueriesThunk = _buildInitiate.getRunningQueriesThunk,\n        getRunningQueryThunk = _buildInitiate.getRunningQueryThunk;\n      safeAssign(api.util, {\n        getRunningMutationThunk: getRunningMutationThunk,\n        getRunningMutationsThunk: getRunningMutationsThunk,\n        getRunningQueryThunk: getRunningQueryThunk,\n        getRunningQueriesThunk: getRunningQueriesThunk\n      });\n      return {\n        name: coreModuleName,\n        injectEndpoint: function injectEndpoint(endpointName, definition) {\n          var _anyApi$endpoints, _anyApi$endpoints$end;\n          var anyApi = api;\n          (_anyApi$endpoints$end = (_anyApi$endpoints = anyApi.endpoints)[endpointName]) !== null && _anyApi$endpoints$end !== void 0 ? _anyApi$endpoints$end : _anyApi$endpoints[endpointName] = {};\n          if (isQueryDefinition(definition)) {\n            safeAssign(anyApi.endpoints[endpointName], {\n              name: endpointName,\n              select: buildQuerySelector(endpointName, definition),\n              initiate: buildInitiateQuery(endpointName, definition)\n            }, buildMatchThunkActions(queryThunk, endpointName));\n          } else if (isMutationDefinition(definition)) {\n            safeAssign(anyApi.endpoints[endpointName], {\n              name: endpointName,\n              select: buildMutationSelector(),\n              initiate: buildInitiateMutation(endpointName)\n            }, buildMatchThunkActions(mutationThunk, endpointName));\n          }\n        }\n      };\n    }\n  };\n};\n\n// src/query/core/index.ts\nvar createApi = /* @__PURE__ */buildCreateApi(coreModule());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReducerType: () => (/* binding */ ReducerType),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   asyncThunkCreator: () => (/* binding */ asyncThunkCreator),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   buildCreateSlice: () => (/* binding */ buildCreateSlice),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   combineSlices: () => (/* binding */ combineSlices),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createDraftSafeSelectorCreator: () => (/* binding */ createDraftSafeSelectorCreator),\n/* harmony export */   createDynamicMiddleware: () => (/* binding */ createDynamicMiddleware),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.produce),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSelectorCreator: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   formatProdErrorMessage: () => (/* binding */ formatProdErrorMessage),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   isAction: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   lruMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.lruMemoize),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult),\n/* harmony export */   weakMapMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/dist/redux-thunk.mjs\");\nvar _excluded = [\"reducerPath\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n// src/index.ts\n\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelectorCreator = function createDraftSafeSelectorCreator() {\n  var createSelector2 = reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator.apply(void 0, arguments);\n  var createDraftSafeSelector2 = Object.assign(function () {\n    var selector = createSelector2.apply(void 0, arguments);\n    var wrappedSelector = function wrappedSelector(value) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n      return selector.apply(void 0, [(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value].concat(rest));\n    };\n    Object.assign(wrappedSelector, selector);\n    return wrappedSelector;\n  }, {\n    withTypes: function withTypes() {\n      return createDraftSafeSelector2;\n    }\n  });\n  return createDraftSafeSelector2;\n};\nvar createDraftSafeSelector = createDraftSafeSelectorCreator(reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize);\n\n// src/configureStore.ts\n\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools =  false ? 0 : function () {\n  if (arguments.length === 0) return void 0;\n  if (_typeof(arguments[0]) === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\n};\nvar devToolsEnhancer =  false ? 0 : function () {\n  return function (noop3) {\n    return noop3;\n  };\n};\n\n// src/getDefaultMiddleware.ts\n\n\n// src/createAction.ts\n\n\n// src/tsHelpers.ts\nvar hasMatchFunction = function hasMatchFunction(v) {\n  return v && typeof v.match === \"function\";\n};\n\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, arguments);\n      if (!prepared) {\n        throw new Error( false ? 0 : \"prepareAction did not return an object\");\n      }\n      return _objectSpread(_objectSpread({\n        type: type,\n        payload: prepared.payload\n      }, \"meta\" in prepared && {\n        meta: prepared.meta\n      }), \"error\" in prepared && {\n        error: prepared.error\n      });\n    }\n    return {\n      type: type,\n      payload: arguments.length <= 0 ? undefined : arguments[0]\n    };\n  }\n  actionCreator.toString = function () {\n    return \"\".concat(type);\n  };\n  actionCreator.type = type;\n  actionCreator.match = function (action) {\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && action.type === type;\n  };\n  return actionCreator;\n}\nfunction isActionCreator(action) {\n  return typeof action === \"function\" && \"type\" in action &&\n  // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n  hasMatchFunction(action);\n}\nfunction isFSA(action) {\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\n}\n\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n  var splitType = type ? \"\".concat(type).split(\"/\") : [];\n  var actionName = splitType[splitType.length - 1] || \"actionCreator\";\n  return \"Detected an action creator with type \\\"\".concat(type || \"unknown\", \"\\\" being dispatched. \\nMake sure you're calling the action creator before dispatching, i.e. `dispatch(\").concat(actionName, \"())` instead of `dispatch(\").concat(actionName, \")`. This is necessary even if the action has no payload.\");\n}\nfunction createActionCreatorInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {}\n  var _options$isActionCrea = options.isActionCreator,\n    isActionCreator2 = _options$isActionCrea === void 0 ? isActionCreator : _options$isActionCrea;\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (isActionCreator2(action)) {\n          console.warn(getMessage(action.type));\n        }\n        return next(action);\n      };\n    };\n  };\n}\n\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  var elapsed = 0;\n  return {\n    measureTime: function measureTime(fn) {\n      var started = Date.now();\n      try {\n        return fn();\n      } finally {\n        var finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded: function warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(\"\".concat(fnName, \" took \").concat(elapsed, \"ms, which is more than the warning threshold of \").concat(maxDelay, \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\"));\n      }\n    }\n  };\n}\nfunction find(iterable, comparator) {\n  var _iterator = _createForOfIteratorHelper(iterable),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n      if (comparator(entry)) {\n        return entry;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return void 0;\n}\nvar Tuple = /*#__PURE__*/function (_Array, _Symbol$species) {\n  function _Tuple() {\n    var _this2;\n    _classCallCheck(this, _Tuple);\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    _this2 = _callSuper(this, _Tuple, [].concat(items));\n    Object.setPrototypeOf(_this2, _Tuple.prototype);\n    return _this2;\n  }\n  _inherits(_Tuple, _Array);\n  return _createClass(_Tuple, [{\n    key: \"concat\",\n    value: function concat() {\n      for (var _len3 = arguments.length, arr = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        arr[_key3] = arguments[_key3];\n      }\n      return _get(_getPrototypeOf(_Tuple.prototype), \"concat\", this).apply(this, arr);\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len4 = arguments.length, arr = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        arr[_key4] = arguments[_key4];\n      }\n      if (arr.length === 1 && Array.isArray(arr[0])) {\n        return _construct(_Tuple, _toConsumableArray(arr[0].concat(this)));\n      }\n      return _construct(_Tuple, _toConsumableArray(arr.concat(this)));\n    }\n  }], [{\n    key: _Symbol$species,\n    get: function get() {\n      return _Tuple;\n    }\n  }]);\n}( /*#__PURE__*/_wrapNativeSuper(Array), Symbol.species);\nfunction freezeDraftable(val) {\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(val, function () {}) : val;\n}\nfunction emplace(map, key, handler) {\n  if (map.has(key)) {\n    var value = map.get(key);\n    if (handler.update) {\n      value = handler.update(value, key, map);\n      map.set(key, value);\n    }\n    return value;\n  }\n  if (!handler.insert) throw new Error( false ? 0 : \"No insert provided for key not already in map\");\n  var inserted = handler.insert(key, map);\n  map.set(key, inserted);\n  return inserted;\n}\n\n// src/immutableStateInvariantMiddleware.ts\nfunction isImmutableDefault(value) {\n  return _typeof(value) !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations: function detectMutations() {\n      return _detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable) {\n  var ignorePaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var obj = arguments.length > 2 ? arguments[2] : undefined;\n  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  var checkedObjects = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : /* @__PURE__ */new Set();\n  var tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (var key in obj) {\n      var childPath = path ? path + \".\" + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction _detectMutations(isImmutable) {\n  var ignoredPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var trackedProperty = arguments.length > 2 ? arguments[2] : undefined;\n  var obj = arguments.length > 3 ? arguments[3] : undefined;\n  var sameParentRef = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var path = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"\";\n  var prevObj = trackedProperty ? trackedProperty.value : void 0;\n  var sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path: path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  var keysToDetect = {};\n  for (var key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (var _key5 in obj) {\n    keysToDetect[_key5] = true;\n  }\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _loop = function _loop() {\n      var nestedPath = path ? path + \".\" + _key6 : _key6;\n      if (hasIgnoredPaths) {\n        var hasMatches = ignoredPaths.some(function (ignored) {\n          if (ignored instanceof RegExp) {\n            return ignored.test(nestedPath);\n          }\n          return nestedPath === ignored;\n        });\n        if (hasMatches) {\n          return 0; // continue\n        }\n      }\n      var result = _detectMutations(isImmutable, ignoredPaths, trackedProperty.children[_key6], obj[_key6], sameRef, nestedPath);\n      if (result.wasMutated) {\n        return {\n          v: result\n        };\n      }\n    },\n    _ret;\n  for (var _key6 in keysToDetect) {\n    _ret = _loop();\n    if (_ret === 0) continue;\n    if (_ret) return _ret.v;\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {} else {\n    var stringify2 = function stringify2(obj, serializer, indent, decycler) {\n        return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\n      },\n      getSerialize2 = function getSerialize2(serializer, decycler) {\n        var stack = [],\n          keys = [];\n        if (!decycler) decycler = function decycler(_, value) {\n          if (stack[0] === value) return \"[Circular ~]\";\n          return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n        };\n        return function (key, value) {\n          if (stack.length > 0) {\n            var thisPos = stack.indexOf(this);\n            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n            if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n          } else stack.push(value);\n          return serializer == null ? value : serializer.call(this, key, value);\n        };\n      };\n    var stringify = stringify2,\n      getSerialize = getSerialize2;\n    var _options$isImmutable = options.isImmutable,\n      isImmutable = _options$isImmutable === void 0 ? isImmutableDefault : _options$isImmutable,\n      ignoredPaths = options.ignoredPaths,\n      _options$warnAfter = options.warnAfter,\n      warnAfter = _options$warnAfter === void 0 ? 32 : _options$warnAfter;\n    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return function (_ref) {\n      var getState = _ref.getState;\n      var state = getState();\n      var tracker = track(state);\n      var result;\n      return function (next) {\n        return function (action) {\n          var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n          measureUtils.measureTime(function () {\n            state = getState();\n            result = tracker.detectMutations();\n            tracker = track(state);\n            if (result.wasMutated) {\n              throw new Error( false ? 0 : \"A state mutation was detected between dispatches, in the path '\".concat(result.path || \"\", \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\"));\n            }\n          });\n          var dispatchedAction = next(action);\n          measureUtils.measureTime(function () {\n            state = getState();\n            result = tracker.detectMutations();\n            tracker = track(state);\n            if (result.wasMutated) {\n              throw new Error( false ? 0 : \"A state mutation was detected inside a dispatch, in the path: \".concat(result.path || \"\", \". Take a look at the reducer(s) handling the action \").concat(stringify2(action), \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\"));\n            }\n          });\n          measureUtils.warnIfExceeded();\n          return dispatchedAction;\n        };\n      };\n    };\n  }\n}\n\n// src/serializableStateInvariantMiddleware.ts\n\nfunction isPlain(val) {\n  var type = _typeof(val);\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || (0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(val);\n}\nfunction findNonSerializableValue(value) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var isSerializable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isPlain;\n  var getEntries = arguments.length > 3 ? arguments[3] : undefined;\n  var ignoredPaths = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var cache = arguments.length > 5 ? arguments[5] : undefined;\n  var foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || \"<root>\",\n      value: value\n    };\n  }\n  if (_typeof(value) !== \"object\" || value === null) {\n    return false;\n  }\n  if (cache !== null && cache !== void 0 && cache.has(value)) return false;\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _iterator2 = _createForOfIteratorHelper(entries),\n    _step2;\n  try {\n    var _loop2 = function _loop2() {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          key = _step2$value[0],\n          nestedValue = _step2$value[1];\n        var nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n          var hasMatches = ignoredPaths.some(function (ignored) {\n            if (ignored instanceof RegExp) {\n              return ignored.test(nestedPath);\n            }\n            return nestedPath === ignored;\n          });\n          if (hasMatches) {\n            return 0; // continue\n          }\n        }\n        if (!isSerializable(nestedValue)) {\n          return {\n            v: {\n              keyPath: nestedPath,\n              value: nestedValue\n            }\n          };\n        }\n        if (_typeof(nestedValue) === \"object\") {\n          foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n          if (foundNestedSerializable) {\n            return {\n              v: foundNestedSerializable\n            };\n          }\n        }\n      },\n      _ret2;\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _ret2 = _loop2();\n      if (_ret2 === 0) continue;\n      if (_ret2) return _ret2.v;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nfunction isNestedFrozen(value) {\n  if (!Object.isFrozen(value)) return false;\n  for (var _i = 0, _Object$values = Object.values(value); _i < _Object$values.length; _i++) {\n    var nestedValue = _Object$values[_i];\n    if (_typeof(nestedValue) !== \"object\" || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\nfunction createSerializableStateInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {} else {\n    var _options$isSerializab = options.isSerializable,\n      isSerializable = _options$isSerializab === void 0 ? isPlain : _options$isSerializab,\n      getEntries = options.getEntries,\n      _options$ignoredActio = options.ignoredActions,\n      ignoredActions = _options$ignoredActio === void 0 ? [] : _options$ignoredActio,\n      _options$ignoredActio2 = options.ignoredActionPaths,\n      ignoredActionPaths = _options$ignoredActio2 === void 0 ? [\"meta.arg\", \"meta.baseQueryMeta\"] : _options$ignoredActio2,\n      _options$ignoredPaths = options.ignoredPaths,\n      ignoredPaths = _options$ignoredPaths === void 0 ? [] : _options$ignoredPaths,\n      _options$warnAfter2 = options.warnAfter,\n      warnAfter = _options$warnAfter2 === void 0 ? 32 : _options$warnAfter2,\n      _options$ignoreState = options.ignoreState,\n      ignoreState = _options$ignoreState === void 0 ? false : _options$ignoreState,\n      _options$ignoreAction = options.ignoreActions,\n      ignoreActions = _options$ignoreAction === void 0 ? false : _options$ignoreAction,\n      _options$disableCache = options.disableCache,\n      disableCache = _options$disableCache === void 0 ? false : _options$disableCache;\n    var cache = !disableCache && WeakSet ? /* @__PURE__ */new WeakSet() : void 0;\n    return function (storeAPI) {\n      return function (next) {\n        return function (action) {\n          if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n            return next(action);\n          }\n          var result = next(action);\n          var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n          if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n            measureUtils.measureTime(function () {\n              var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n              if (foundActionNonSerializableValue) {\n                var keyPath = foundActionNonSerializableValue.keyPath,\n                  value = foundActionNonSerializableValue.value;\n                console.error(\"A non-serializable value was detected in an action, in the path: `\".concat(keyPath, \"`. Value:\"), value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n              }\n            });\n          }\n          if (!ignoreState) {\n            measureUtils.measureTime(function () {\n              var state = storeAPI.getState();\n              var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n              if (foundStateNonSerializableValue) {\n                var keyPath = foundStateNonSerializableValue.keyPath,\n                  value = foundStateNonSerializableValue.value;\n                console.error(\"A non-serializable value was detected in the state, in the path: `\".concat(keyPath, \"`. Value:\"), value, \"\\nTake a look at the reducer(s) handling this action type: \".concat(action.type, \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\"));\n              }\n            });\n            measureUtils.warnIfExceeded();\n          }\n          return result;\n        };\n      };\n    };\n  }\n}\n\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === \"boolean\";\n}\nvar buildGetDefaultMiddleware = function buildGetDefaultMiddleware() {\n  return function getDefaultMiddleware(options) {\n    var _ref2 = options !== null && options !== void 0 ? options : {},\n      _ref2$thunk = _ref2.thunk,\n      thunk = _ref2$thunk === void 0 ? true : _ref2$thunk,\n      _ref2$immutableCheck = _ref2.immutableCheck,\n      immutableCheck = _ref2$immutableCheck === void 0 ? true : _ref2$immutableCheck,\n      _ref2$serializableChe = _ref2.serializableCheck,\n      serializableCheck = _ref2$serializableChe === void 0 ? true : _ref2$serializableChe,\n      _ref2$actionCreatorCh = _ref2.actionCreatorCheck,\n      actionCreatorCheck = _ref2$actionCreatorCh === void 0 ? true : _ref2$actionCreatorCh;\n    var middlewareArray = new Tuple();\n    if (thunk) {\n      if (isBoolean(thunk)) {\n        middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__.thunk);\n      } else {\n        middlewareArray.push((0,redux_thunk__WEBPACK_IMPORTED_MODULE_3__.withExtraArgument)(thunk.extraArgument));\n      }\n    }\n    if (true) {\n      if (immutableCheck) {\n        var immutableOptions = {};\n        if (!isBoolean(immutableCheck)) {\n          immutableOptions = immutableCheck;\n        }\n        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n      }\n      if (serializableCheck) {\n        var serializableOptions = {};\n        if (!isBoolean(serializableCheck)) {\n          serializableOptions = serializableCheck;\n        }\n        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n      }\n      if (actionCreatorCheck) {\n        var actionCreatorOptions = {};\n        if (!isBoolean(actionCreatorCheck)) {\n          actionCreatorOptions = actionCreatorCheck;\n        }\n        middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n      }\n    }\n    return middlewareArray;\n  };\n};\n\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = function prepareAutoBatched() {\n  return function (payload) {\n    return {\n      payload: payload,\n      meta: _defineProperty({}, SHOULD_AUTOBATCH, true)\n    };\n  };\n};\nvar createQueueWithTimer = function createQueueWithTimer(timeout) {\n  return function (notify) {\n    setTimeout(notify, timeout);\n  };\n};\nvar rAF =  false ? 0 : createQueueWithTimer(10);\nvar autoBatchEnhancer = function autoBatchEnhancer() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    type: \"raf\"\n  };\n  return function (next) {\n    return function () {\n      var store = next.apply(void 0, arguments);\n      var notifying = true;\n      var shouldNotifyAtEndOfTick = false;\n      var notificationQueued = false;\n      var listeners = /* @__PURE__ */new Set();\n      var queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ? rAF : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n      var notifyListeners = function notifyListeners() {\n        notificationQueued = false;\n        if (shouldNotifyAtEndOfTick) {\n          shouldNotifyAtEndOfTick = false;\n          listeners.forEach(function (l) {\n            return l();\n          });\n        }\n      };\n      return Object.assign({}, store, {\n        // Override the base `store.subscribe` method to keep original listeners\n        // from running if we're delaying notifications\n        subscribe: function subscribe(listener2) {\n          var wrappedListener = function wrappedListener() {\n            return notifying && listener2();\n          };\n          var unsubscribe = store.subscribe(wrappedListener);\n          listeners.add(listener2);\n          return function () {\n            unsubscribe();\n            listeners[\"delete\"](listener2);\n          };\n        },\n        // Override the base `store.dispatch` method so that we can check actions\n        // for the `shouldAutoBatch` flag and determine if batching is active\n        dispatch: function dispatch(action) {\n          try {\n            var _action$meta;\n            notifying = !(action !== null && action !== void 0 && (_action$meta = action.meta) !== null && _action$meta !== void 0 && _action$meta[SHOULD_AUTOBATCH]);\n            shouldNotifyAtEndOfTick = !notifying;\n            if (shouldNotifyAtEndOfTick) {\n              if (!notificationQueued) {\n                notificationQueued = true;\n                queueCallback(notifyListeners);\n              }\n            }\n            return store.dispatch(action);\n          } finally {\n            notifying = true;\n          }\n        }\n      });\n    };\n  };\n};\n\n// src/getDefaultEnhancers.ts\nvar buildGetDefaultEnhancers = function buildGetDefaultEnhancers(middlewareEnhancer) {\n  return function getDefaultEnhancers(options) {\n    var _ref3 = options !== null && options !== void 0 ? options : {},\n      _ref3$autoBatch = _ref3.autoBatch,\n      autoBatch = _ref3$autoBatch === void 0 ? true : _ref3$autoBatch;\n    var enhancerArray = new Tuple(middlewareEnhancer);\n    if (autoBatch) {\n      enhancerArray.push(autoBatchEnhancer(_typeof(autoBatch) === \"object\" ? autoBatch : void 0));\n    }\n    return enhancerArray;\n  };\n};\n\n// src/configureStore.ts\nvar IS_PRODUCTION = false;\nfunction configureStore(options) {\n  var getDefaultMiddleware = buildGetDefaultMiddleware();\n  var _ref4 = options || {},\n    _ref4$reducer = _ref4.reducer,\n    reducer = _ref4$reducer === void 0 ? void 0 : _ref4$reducer,\n    middleware = _ref4.middleware,\n    _ref4$devTools = _ref4.devTools,\n    devTools = _ref4$devTools === void 0 ? true : _ref4$devTools,\n    _ref4$preloadedState = _ref4.preloadedState,\n    preloadedState = _ref4$preloadedState === void 0 ? void 0 : _ref4$preloadedState,\n    _ref4$enhancers = _ref4.enhancers,\n    enhancers = _ref4$enhancers === void 0 ? void 0 : _ref4$enhancers;\n  var rootReducer;\n  if (typeof reducer === \"function\") {\n    rootReducer = reducer;\n  } else if ((0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(reducer)) {\n    rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\n  } else {\n    throw new Error( false ? 0 : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\n  }\n  if (!IS_PRODUCTION && middleware && typeof middleware !== \"function\") {\n    throw new Error( false ? 0 : \"`middleware` field must be a callback\");\n  }\n  var finalMiddleware;\n  if (typeof middleware === \"function\") {\n    finalMiddleware = middleware(getDefaultMiddleware);\n    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\n      throw new Error( false ? 0 : \"when using a middleware builder function, an array of middleware must be returned\");\n    }\n  } else {\n    finalMiddleware = getDefaultMiddleware();\n  }\n  if (!IS_PRODUCTION && finalMiddleware.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error( false ? 0 : \"each middleware provided to configureStore must be a function\");\n  }\n  var finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  if (devTools) {\n    finalCompose = composeWithDevTools(_objectSpread({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: !IS_PRODUCTION\n    }, _typeof(devTools) === \"object\" && devTools));\n  }\n  var middlewareEnhancer = redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware.apply(void 0, _toConsumableArray(finalMiddleware));\n  var getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\n  if (!IS_PRODUCTION && enhancers && typeof enhancers !== \"function\") {\n    throw new Error( false ? 0 : \"`enhancers` field must be a callback\");\n  }\n  var storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n  if (!IS_PRODUCTION && !Array.isArray(storeEnhancers)) {\n    throw new Error( false ? 0 : \"`enhancers` callback must return an array\");\n  }\n  if (!IS_PRODUCTION && storeEnhancers.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error( false ? 0 : \"each enhancer provided to configureStore must be a function\");\n  }\n  if (!IS_PRODUCTION && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n    console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\n  }\n  var composedEnhancer = finalCompose.apply(void 0, _toConsumableArray(storeEnhancers));\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\n}\n\n// src/createReducer.ts\n\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var actionMatchers = [];\n  var defaultCaseReducer;\n  var builder = {\n    addCase: function addCase(typeOrActionCreator, reducer) {\n      if (true) {\n        if (actionMatchers.length > 0) {\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n        }\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error( false ? 0 : \"`builder.addCase` cannot be called with an empty action type\");\n      }\n      if (type in actionsMap) {\n        throw new Error( false ? 0 : \"`builder.addCase` cannot be called with two reducers for the same action type '\".concat(type, \"'\"));\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher: function addMatcher(matcher, reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      actionMatchers.push({\n        matcher: matcher,\n        reducer: reducer\n      });\n      return builder;\n    },\n    addDefaultCase: function addDefaultCase(reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addDefaultCase` can only be called once\");\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === \"function\";\n}\nfunction createReducer(initialState, mapOrBuilderCallback) {\n  if (true) {\n    if (_typeof(mapOrBuilderCallback) === \"object\") {\n      throw new Error( false ? 0 : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n    }\n  }\n  var _executeReducerBuilde = executeReducerBuilderCallback(mapOrBuilderCallback),\n    _executeReducerBuilde2 = _slicedToArray(_executeReducerBuilde, 3),\n    actionsMap = _executeReducerBuilde2[0],\n    finalActionMatchers = _executeReducerBuilde2[1],\n    finalDefaultCaseReducer = _executeReducerBuilde2[2];\n  var getInitialState;\n  if (isStateFunction(initialState)) {\n    getInitialState = function getInitialState() {\n      return freezeDraftable(initialState());\n    };\n  } else {\n    var frozenInitialState = freezeDraftable(initialState);\n    getInitialState = function getInitialState() {\n      return frozenInitialState;\n    };\n  }\n  function reducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var caseReducers = [actionsMap[action.type]].concat(_toConsumableArray(finalActionMatchers.filter(function (_ref5) {\n      var matcher = _ref5.matcher;\n      return matcher(action);\n    }).map(function (_ref6) {\n      var reducer2 = _ref6.reducer;\n      return reducer2;\n    })));\n    if (caseReducers.filter(function (cr) {\n      return !!cr;\n    }).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce(function (previousState, caseReducer) {\n      if (caseReducer) {\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\n          var draft = previousState;\n          var result = caseReducer(draft, action);\n          if (result === void 0) {\n            return previousState;\n          }\n          return result;\n        } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\n          var _result = caseReducer(previousState, action);\n          if (_result === void 0) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw new Error( false ? 0 : \"A case reducer on a non-draftable value must not return undefined\");\n          }\n          return _result;\n        } else {\n          return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(previousState, function (draft) {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n\n// src/matchers.ts\nvar matches = function matches(matcher, action) {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf() {\n  for (var _len5 = arguments.length, matchers = new Array(_len5), _key7 = 0; _key7 < _len5; _key7++) {\n    matchers[_key7] = arguments[_key7];\n  }\n  return function (action) {\n    return matchers.some(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction isAllOf() {\n  for (var _len6 = arguments.length, matchers = new Array(_len6), _key8 = 0; _key8 < _len6; _key8++) {\n    matchers[_key8] = arguments[_key8];\n  }\n  return function (action) {\n    return matchers.every(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  var hasValidRequestId = typeof action.meta.requestId === \"string\";\n  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending() {\n  for (var _len7 = arguments.length, asyncThunks = new Array(_len7), _key9 = 0; _key9 < _len7; _key9++) {\n    asyncThunks[_key9] = arguments[_key9];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.pending;\n  })));\n}\nfunction isRejected() {\n  for (var _len8 = arguments.length, asyncThunks = new Array(_len8), _key10 = 0; _key10 < _len8; _key10++) {\n    asyncThunks[_key10] = arguments[_key10];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.rejected;\n  })));\n}\nfunction isRejectedWithValue() {\n  var hasFlag = function hasFlag(action) {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  for (var _len9 = arguments.length, asyncThunks = new Array(_len9), _key11 = 0; _key11 < _len9; _key11++) {\n    asyncThunks[_key11] = arguments[_key11];\n  }\n  if (asyncThunks.length === 0) {\n    return isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n}\nfunction isFulfilled() {\n  for (var _len10 = arguments.length, asyncThunks = new Array(_len10), _key12 = 0; _key12 < _len10; _key12++) {\n    asyncThunks[_key12] = arguments[_key12];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"fulfilled\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.fulfilled;\n  })));\n}\nfunction isAsyncThunkAction() {\n  for (var _len11 = arguments.length, asyncThunks = new Array(_len11), _key13 = 0; _key13 < _len11; _key13++) {\n    asyncThunks[_key13] = arguments[_key13];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.flatMap(function (asyncThunk) {\n    return [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled];\n  })));\n}\n\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  var id = \"\";\n  var i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n\n// src/createAsyncThunk.ts\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\nvar RejectWithValue = /*#__PURE__*/_createClass(function RejectWithValue(payload, meta) {\n  _classCallCheck(this, RejectWithValue);\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _defineProperty(this, \"_type\", void 0);\n  this.payload = payload;\n  this.meta = meta;\n});\nvar FulfillWithMeta = /*#__PURE__*/_createClass(function FulfillWithMeta(payload, meta) {\n  _classCallCheck(this, FulfillWithMeta);\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _defineProperty(this, \"_type\", void 0);\n  this.payload = payload;\n  this.meta = meta;\n});\nvar miniSerializeError = function miniSerializeError(value) {\n  if (_typeof(value) === \"object\" && value !== null) {\n    var simpleError = {};\n    for (var _i2 = 0, _commonProperties = commonProperties; _i2 < _commonProperties.length; _i2++) {\n      var property = _commonProperties[_i2];\n      if (typeof value[property] === \"string\") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nvar createAsyncThunk = /* @__PURE__ */function () {\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\n    var fulfilled = createAction(typePrefix + \"/fulfilled\", function (payload, requestId, arg, meta) {\n      return {\n        payload: payload,\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"fulfilled\"\n        })\n      };\n    });\n    var pending = createAction(typePrefix + \"/pending\", function (requestId, arg, meta) {\n      return {\n        payload: void 0,\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"pending\"\n        })\n      };\n    });\n    var rejected = createAction(typePrefix + \"/rejected\", function (error, requestId, arg, payload, meta) {\n      return {\n        payload: payload,\n        error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          rejectedWithValue: !!payload,\n          requestStatus: \"rejected\",\n          aborted: (error === null || error === void 0 ? void 0 : error.name) === \"AbortError\",\n          condition: (error === null || error === void 0 ? void 0 : error.name) === \"ConditionError\"\n        })\n      };\n    });\n    function actionCreator(arg) {\n      return function (dispatch, getState, extra) {\n        var requestId = options !== null && options !== void 0 && options.idGenerator ? options.idGenerator(arg) : nanoid();\n        var abortController = new AbortController();\n        var abortHandler;\n        var abortReason;\n        function abort(reason) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        var promise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var finalAction, _options$condition, _options$getPendingMe, conditionResult, abortedPromise, skipDispatch;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                conditionResult = options === null || options === void 0 || (_options$condition = options.condition) === null || _options$condition === void 0 ? void 0 : _options$condition.call(options, arg, {\n                  getState: getState,\n                  extra: extra\n                });\n                if (!isThenable(conditionResult)) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 5;\n                return conditionResult;\n              case 5:\n                conditionResult = _context.sent;\n              case 6:\n                if (!(conditionResult === false || abortController.signal.aborted)) {\n                  _context.next = 8;\n                  break;\n                }\n                throw {\n                  name: \"ConditionError\",\n                  message: \"Aborted due to condition callback returning false.\"\n                };\n              case 8:\n                abortedPromise = new Promise(function (_, reject) {\n                  abortHandler = function abortHandler() {\n                    reject({\n                      name: \"AbortError\",\n                      message: abortReason || \"Aborted\"\n                    });\n                  };\n                  abortController.signal.addEventListener(\"abort\", abortHandler);\n                });\n                dispatch(pending(requestId, arg, options === null || options === void 0 || (_options$getPendingMe = options.getPendingMeta) === null || _options$getPendingMe === void 0 ? void 0 : _options$getPendingMe.call(options, {\n                  requestId: requestId,\n                  arg: arg\n                }, {\n                  getState: getState,\n                  extra: extra\n                })));\n                _context.next = 12;\n                return Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n                  dispatch: dispatch,\n                  getState: getState,\n                  extra: extra,\n                  requestId: requestId,\n                  signal: abortController.signal,\n                  abort: abort,\n                  rejectWithValue: function rejectWithValue(value, meta) {\n                    return new RejectWithValue(value, meta);\n                  },\n                  fulfillWithValue: function fulfillWithValue(value, meta) {\n                    return new FulfillWithMeta(value, meta);\n                  }\n                })).then(function (result) {\n                  if (result instanceof RejectWithValue) {\n                    throw result;\n                  }\n                  if (result instanceof FulfillWithMeta) {\n                    return fulfilled(result.payload, requestId, arg, result.meta);\n                  }\n                  return fulfilled(result, requestId, arg);\n                })]);\n              case 12:\n                finalAction = _context.sent;\n                _context.next = 18;\n                break;\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](0);\n                finalAction = _context.t0 instanceof RejectWithValue ? rejected(null, requestId, arg, _context.t0.payload, _context.t0.meta) : rejected(_context.t0, requestId, arg);\n              case 18:\n                _context.prev = 18;\n                if (abortHandler) {\n                  abortController.signal.removeEventListener(\"abort\", abortHandler);\n                }\n                return _context.finish(18);\n              case 21:\n                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                if (!skipDispatch) {\n                  dispatch(finalAction);\n                }\n                return _context.abrupt(\"return\", finalAction);\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[0, 15, 18, 21]]);\n        }))();\n        return Object.assign(promise, {\n          abort: abort,\n          requestId: requestId,\n          arg: arg,\n          unwrap: function unwrap() {\n            return promise.then(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator, {\n      pending: pending,\n      rejected: rejected,\n      fulfilled: fulfilled,\n      settled: isAnyOf(rejected, fulfilled),\n      typePrefix: typePrefix\n    });\n  }\n  createAsyncThunk2.withTypes = function () {\n    return createAsyncThunk2;\n  };\n  return createAsyncThunk2;\n}();\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && _typeof(value) === \"object\" && typeof value.then === \"function\";\n}\n\n// src/createSlice.ts\nvar asyncThunkSymbol = /* @__PURE__ */Symbol[\"for\"](\"rtk-slice-createasyncthunk\");\nvar asyncThunkCreator = _defineProperty({}, asyncThunkSymbol, createAsyncThunk);\nvar ReducerType = /* @__PURE__ */function (ReducerType2) {\n  ReducerType2[\"reducer\"] = \"reducer\";\n  ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\n  ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\n  return ReducerType2;\n}(ReducerType || {});\nfunction getType(slice, actionKey) {\n  return \"\".concat(slice, \"/\").concat(actionKey);\n}\nfunction buildCreateSlice() {\n  var _creators$asyncThunk;\n  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    creators = _ref8.creators;\n  var cAT = creators === null || creators === void 0 || (_creators$asyncThunk = creators.asyncThunk) === null || _creators$asyncThunk === void 0 ? void 0 : _creators$asyncThunk[asyncThunkSymbol];\n  return function createSlice2(options) {\n    var name = options.name,\n      _options$reducerPath = options.reducerPath,\n      reducerPath = _options$reducerPath === void 0 ? name : _options$reducerPath;\n    if (!name) {\n      throw new Error( false ? 0 : \"`name` is a required option for createSlice\");\n    }\n    if (typeof process !== \"undefined\" && true) {\n      if (options.initialState === void 0) {\n        console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n      }\n    }\n    var reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\n    var reducerNames = Object.keys(reducers);\n    var context = {\n      sliceCaseReducersByName: {},\n      sliceCaseReducersByType: {},\n      actionCreators: {},\n      sliceMatchers: []\n    };\n    var contextMethods = {\n      addCase: function addCase(typeOrActionCreator, reducer2) {\n        var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n        if (!type) {\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with an empty action type\");\n        }\n        if (type in context.sliceCaseReducersByType) {\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\n        }\n        context.sliceCaseReducersByType[type] = reducer2;\n        return contextMethods;\n      },\n      addMatcher: function addMatcher(matcher, reducer2) {\n        context.sliceMatchers.push({\n          matcher: matcher,\n          reducer: reducer2\n        });\n        return contextMethods;\n      },\n      exposeAction: function exposeAction(name2, actionCreator) {\n        context.actionCreators[name2] = actionCreator;\n        return contextMethods;\n      },\n      exposeCaseReducer: function exposeCaseReducer(name2, reducer2) {\n        context.sliceCaseReducersByName[name2] = reducer2;\n        return contextMethods;\n      }\n    };\n    reducerNames.forEach(function (reducerName) {\n      var reducerDefinition = reducers[reducerName];\n      var reducerDetails = {\n        reducerName: reducerName,\n        type: getType(name, reducerName),\n        createNotation: typeof options.reducers === \"function\"\n      };\n      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n      } else {\n        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\n      }\n    });\n    function buildReducer() {\n      if (true) {\n        if (_typeof(options.extraReducers) === \"object\") {\n          throw new Error( false ? 0 : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n      var _ref9 = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],\n        _ref10 = _slicedToArray(_ref9, 3),\n        _ref10$ = _ref10[0],\n        extraReducers = _ref10$ === void 0 ? {} : _ref10$,\n        _ref10$2 = _ref10[1],\n        actionMatchers = _ref10$2 === void 0 ? [] : _ref10$2,\n        _ref10$3 = _ref10[2],\n        defaultCaseReducer = _ref10$3 === void 0 ? void 0 : _ref10$3;\n      var finalCaseReducers = _objectSpread(_objectSpread({}, extraReducers), context.sliceCaseReducersByType);\n      return createReducer(options.initialState, function (builder) {\n        for (var key in finalCaseReducers) {\n          builder.addCase(key, finalCaseReducers[key]);\n        }\n        var _iterator3 = _createForOfIteratorHelper(context.sliceMatchers),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var sM = _step3.value;\n            builder.addMatcher(sM.matcher, sM.reducer);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        var _iterator4 = _createForOfIteratorHelper(actionMatchers),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var m = _step4.value;\n            builder.addMatcher(m.matcher, m.reducer);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        if (defaultCaseReducer) {\n          builder.addDefaultCase(defaultCaseReducer);\n        }\n      });\n    }\n    var selectSelf = function selectSelf(state) {\n      return state;\n    };\n    var injectedSelectorCache = /* @__PURE__ */new Map();\n    var _reducer;\n    function reducer(state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    }\n    function getInitialState() {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n    function makeSelectorProps(reducerPath2) {\n      var injected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      function selectSlice(state) {\n        var sliceState = state[reducerPath2];\n        if (typeof sliceState === \"undefined\") {\n          if (injected) {\n            sliceState = getInitialState();\n          } else if (true) {\n            throw new Error( false ? 0 : \"selectSlice returned undefined for an uninjected slice reducer\");\n          }\n        }\n        return sliceState;\n      }\n      function getSelectors() {\n        var selectState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectSelf;\n        var selectorCache = emplace(injectedSelectorCache, injected, {\n          insert: function insert() {\n            return /* @__PURE__ */new WeakMap();\n          }\n        });\n        return emplace(selectorCache, selectState, {\n          insert: function insert() {\n            var map = {};\n            for (var _i3 = 0, _Object$entries = Object.entries((_options$selectors = options.selectors) !== null && _options$selectors !== void 0 ? _options$selectors : {}); _i3 < _Object$entries.length; _i3++) {\n              var _options$selectors;\n              var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),\n                name2 = _Object$entries$_i[0],\n                selector = _Object$entries$_i[1];\n              map[name2] = wrapSelector(selector, selectState, getInitialState, injected);\n            }\n            return map;\n          }\n        });\n      }\n      return {\n        reducerPath: reducerPath2,\n        getSelectors: getSelectors,\n        get selectors() {\n          return getSelectors(selectSlice);\n        },\n        selectSlice: selectSlice\n      };\n    }\n    var slice = _objectSpread(_objectSpread({\n      name: name,\n      reducer: reducer,\n      actions: context.actionCreators,\n      caseReducers: context.sliceCaseReducersByName,\n      getInitialState: getInitialState\n    }, makeSelectorProps(reducerPath)), {}, {\n      injectInto: function injectInto(injectable) {\n        var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pathOpt = _ref11.reducerPath,\n          config = _objectWithoutProperties(_ref11, _excluded);\n        var newReducerPath = pathOpt !== null && pathOpt !== void 0 ? pathOpt : reducerPath;\n        injectable.inject({\n          reducerPath: newReducerPath,\n          reducer: reducer\n        }, config);\n        return _objectSpread(_objectSpread({}, slice), makeSelectorProps(newReducerPath, true));\n      }\n    });\n    return slice;\n  };\n}\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\n  function wrapper(rootState) {\n    var sliceState = selectState(rootState);\n    if (typeof sliceState === \"undefined\") {\n      if (injected) {\n        sliceState = getInitialState();\n      } else if (true) {\n        throw new Error( false ? 0 : \"selectState returned undefined for an uninjected slice reducer\");\n      }\n    }\n    for (var _len12 = arguments.length, args = new Array(_len12 > 1 ? _len12 - 1 : 0), _key14 = 1; _key14 < _len12; _key14++) {\n      args[_key14 - 1] = arguments[_key14];\n    }\n    return selector.apply(void 0, [sliceState].concat(args));\n  }\n  wrapper.unwrapped = selector;\n  return wrapper;\n}\nvar createSlice = /* @__PURE__ */buildCreateSlice();\nfunction buildReducerCreators() {\n  function asyncThunk(payloadCreator, config) {\n    return _objectSpread({\n      _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */,\n      payloadCreator: payloadCreator\n    }, config);\n  }\n  asyncThunk.withTypes = function () {\n    return asyncThunk;\n  };\n  return {\n    reducer: function reducer(caseReducer) {\n      return Object.assign(_defineProperty({}, caseReducer.name, function () {\n        return caseReducer.apply(void 0, arguments);\n      })[caseReducer.name], {\n        _reducerDefinitionType: \"reducer\" /* reducer */\n      });\n    },\n    preparedReducer: function preparedReducer(prepare, reducer) {\n      return {\n        _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */,\n        prepare: prepare,\n        reducer: reducer\n      };\n    },\n    asyncThunk: asyncThunk\n  };\n}\nfunction handleNormalReducerDefinition(_ref12, maybeReducerWithPrepare, context) {\n  var type = _ref12.type,\n    reducerName = _ref12.reducerName,\n    createNotation = _ref12.createNotation;\n  var caseReducer;\n  var prepareCallback;\n  if (\"reducer\" in maybeReducerWithPrepare) {\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n      throw new Error( false ? 0 : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\n    }\n    caseReducer = maybeReducerWithPrepare.reducer;\n    prepareCallback = maybeReducerWithPrepare.prepare;\n  } else {\n    caseReducer = maybeReducerWithPrepare;\n  }\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */;\n}\n\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */;\n}\n\nfunction handleThunkCaseReducerDefinition(_ref13, reducerDefinition, context, cAT) {\n  var type = _ref13.type,\n    reducerName = _ref13.reducerName;\n  if (!cAT) {\n    throw new Error( false ? 0 : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\n  }\n  var payloadCreator = reducerDefinition.payloadCreator,\n    fulfilled = reducerDefinition.fulfilled,\n    pending = reducerDefinition.pending,\n    rejected = reducerDefinition.rejected,\n    settled = reducerDefinition.settled,\n    options = reducerDefinition.options;\n  var thunk = cAT(type, payloadCreator, options);\n  context.exposeAction(reducerName, thunk);\n  if (fulfilled) {\n    context.addCase(thunk.fulfilled, fulfilled);\n  }\n  if (pending) {\n    context.addCase(thunk.pending, pending);\n  }\n  if (rejected) {\n    context.addCase(thunk.rejected, rejected);\n  }\n  if (settled) {\n    context.addMatcher(thunk.settled, settled);\n  }\n  context.exposeCaseReducer(reducerName, {\n    fulfilled: fulfilled || noop,\n    pending: pending || noop,\n    rejected: rejected || noop,\n    settled: settled || noop\n  });\n}\nfunction noop() {}\n\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory(stateAdapter) {\n  function getInitialState() {\n    var additionalState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var entities = arguments.length > 1 ? arguments[1] : undefined;\n    var state = Object.assign(getInitialEntityState(), additionalState);\n    return entities ? stateAdapter.setAll(state, entities) : state;\n  }\n  return {\n    getInitialState: getInitialState\n  };\n}\n\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$createSelect = options.createSelector,\n      createSelector2 = _options$createSelect === void 0 ? createDraftSafeSelector : _options$createSelect;\n    var selectIds = function selectIds(state) {\n      return state.ids;\n    };\n    var selectEntities = function selectEntities(state) {\n      return state.entities;\n    };\n    var selectAll = createSelector2(selectIds, selectEntities, function (ids, entities) {\n      return ids.map(function (id) {\n        return entities[id];\n      });\n    });\n    var selectId = function selectId(_, id) {\n      return id;\n    };\n    var selectById = function selectById(entities, id) {\n      return entities[id];\n    };\n    var selectTotal = createSelector2(selectIds, function (ids) {\n      return ids.length;\n    });\n    if (!selectState) {\n      return {\n        selectIds: selectIds,\n        selectEntities: selectEntities,\n        selectAll: selectAll,\n        selectTotal: selectTotal,\n        selectById: createSelector2(selectEntities, selectId, selectById)\n      };\n    }\n    var selectGlobalizedEntities = createSelector2(selectState, selectEntities);\n    return {\n      selectIds: createSelector2(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector2(selectState, selectAll),\n      selectTotal: createSelector2(selectState, selectTotal),\n      selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors: getSelectors\n  };\n}\n\n// src/entities/state_adapter.ts\n\nvar isDraftTyped = immer__WEBPACK_IMPORTED_MODULE_2__.isDraft;\nfunction createSingleArgumentStateOperator(mutator) {\n  var operator = createStateOperator(function (_, state) {\n    return mutator(state);\n  });\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    var runMutator = function runMutator(draft) {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraftTyped(state)) {\n      runMutator(state);\n      return state;\n    }\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(state, runMutator);\n  };\n}\n\n// src/entities/utils.ts\n\nfunction selectIdValue(entity, selectId) {\n  var key = selectId(entity);\n  if ( true && key === void 0) {\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n  }\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction getCurrent(value) {\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  var existingIdsArray = getCurrent(state.ids);\n  var existingIds = new Set(existingIdsArray);\n  var added = [];\n  var updated = [];\n  var _iterator5 = _createForOfIteratorHelper(newEntities),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var entity = _step5.value;\n      var id = selectIdValue(entity, selectId);\n      if (existingIds.has(id)) {\n        updated.push({\n          id: id,\n          changes: entity\n        });\n      } else {\n        added.push(entity);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return [added, updated, existingIdsArray];\n}\n\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var _iterator6 = _createForOfIteratorHelper(newEntities),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var entity = _step6.value;\n        addOneMutably(entity, state);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n  function setOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    ;\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var _iterator7 = _createForOfIteratorHelper(newEntities),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var entity = _step7.value;\n        setOneMutably(entity, state);\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    var didMutate = false;\n    keys.forEach(function (key) {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter(function (id) {\n        return id in state.entities;\n      });\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    var original3 = state.entities[update.id];\n    if (original3 === void 0) {\n      return false;\n    }\n    var updated = Object.assign({}, original3, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    var hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    ;\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var newKeys = {};\n    var updatesPerEntity = {};\n    updates.forEach(function (update) {\n      if (update.id in state.entities) {\n        var _updatesPerEntity$upd;\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: _objectSpread(_objectSpread({}, (_updatesPerEntity$upd = updatesPerEntity[update.id]) === null || _updatesPerEntity$upd === void 0 ? void 0 : _updatesPerEntity$upd.changes), update.changes)\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    var didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      var didMutateIds = updates.filter(function (update) {\n        return takeNewKey(newKeys, update, state);\n      }).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.values(state.entities).map(function (e) {\n          return selectIdValue(e, selectId);\n        });\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _splitAddedUpdatedEnt = splitAddedUpdatedEntities(newEntities, selectId, state),\n      _splitAddedUpdatedEnt2 = _slicedToArray(_splitAddedUpdatedEnt, 2),\n      added = _splitAddedUpdatedEnt2[0],\n      updated = _splitAddedUpdatedEnt2[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n\n// src/entities/sorted_state_adapter.ts\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\n  var lowIndex = 0;\n  var highIndex = sortedItems.length;\n  while (lowIndex < highIndex) {\n    var middleIndex = lowIndex + highIndex >>> 1;\n    var currentItem = sortedItems[middleIndex];\n    var res = comparisonFunction(item, currentItem);\n    if (res >= 0) {\n      lowIndex = middleIndex + 1;\n    } else {\n      highIndex = middleIndex;\n    }\n  }\n  return lowIndex;\n}\nfunction insert(sortedItems, item, comparisonFunction) {\n  var insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n  sortedItems.splice(insertAtIndex, 0, item);\n  return sortedItems;\n}\nfunction createSortedStateAdapter(selectId, comparer) {\n  var _createUnsortedStateA = createUnsortedStateAdapter(selectId),\n    removeOne = _createUnsortedStateA.removeOne,\n    removeMany = _createUnsortedStateA.removeMany,\n    removeAll = _createUnsortedStateA.removeAll;\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state, existingIds) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var existingKeys = new Set(existingIds !== null && existingIds !== void 0 ? existingIds : getCurrent(state.ids));\n    var models = newEntities.filter(function (model) {\n      return !existingKeys.has(selectIdValue(model, selectId));\n    });\n    if (models.length !== 0) {\n      mergeFunction(state, models);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      var _iterator8 = _createForOfIteratorHelper(newEntities),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var item = _step8.value;\n          delete state.entities[selectId(item)];\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      mergeFunction(state, newEntities);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state, []);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var appliedUpdates = false;\n    var replacedIds = false;\n    var _iterator9 = _createForOfIteratorHelper(updates),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var update = _step9.value;\n        var entity = state.entities[update.id];\n        if (!entity) {\n          continue;\n        }\n        appliedUpdates = true;\n        Object.assign(entity, update.changes);\n        var newId = selectId(entity);\n        if (update.id !== newId) {\n          replacedIds = true;\n          delete state.entities[update.id];\n          var oldIndex = state.ids.indexOf(update.id);\n          state.ids[oldIndex] = newId;\n          state.entities[newId] = entity;\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    if (appliedUpdates) {\n      mergeFunction(state, [], appliedUpdates, replacedIds);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _splitAddedUpdatedEnt3 = splitAddedUpdatedEntities(newEntities, selectId, state),\n      _splitAddedUpdatedEnt4 = _slicedToArray(_splitAddedUpdatedEnt3, 3),\n      added = _splitAddedUpdatedEnt4[0],\n      updated = _splitAddedUpdatedEnt4[1],\n      existingIdsArray = _splitAddedUpdatedEnt4[2];\n    if (updated.length) {\n      updateManyMutably(updated, state);\n    }\n    if (added.length) {\n      addManyMutably(added, state, existingIdsArray);\n    }\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  var mergeFunction = function mergeFunction(state, addedItems, appliedUpdates, replacedIds) {\n    var currentEntities = getCurrent(state.entities);\n    var currentIds = getCurrent(state.ids);\n    var stateEntities = state.entities;\n    var ids = currentIds;\n    if (replacedIds) {\n      ids = new Set(currentIds);\n    }\n    var sortedEntities = [];\n    var _iterator10 = _createForOfIteratorHelper(ids),\n      _step10;\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var id = _step10.value;\n        var entity = currentEntities[id];\n        if (entity) {\n          sortedEntities.push(entity);\n        }\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n    var wasPreviouslyEmpty = sortedEntities.length === 0;\n    var _iterator11 = _createForOfIteratorHelper(addedItems),\n      _step11;\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var item = _step11.value;\n        stateEntities[selectId(item)] = item;\n        if (!wasPreviouslyEmpty) {\n          insert(sortedEntities, item, comparer);\n        }\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n    if (wasPreviouslyEmpty) {\n      sortedEntities = addedItems.slice().sort(comparer);\n    } else if (appliedUpdates) {\n      sortedEntities.sort(comparer);\n    }\n    var newSortedIds = sortedEntities.map(selectId);\n    if (!areArraysEqual(currentIds, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  };\n  return {\n    removeOne: removeOne,\n    removeMany: removeMany,\n    removeAll: removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n\n// src/entities/create_adapter.ts\nfunction createEntityAdapter() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _sortComparer$selectI = _objectSpread({\n      sortComparer: false,\n      selectId: function selectId(instance) {\n        return instance.id;\n      }\n    }, options),\n    selectId = _sortComparer$selectI.selectId,\n    sortComparer = _sortComparer$selectI.sortComparer;\n  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  var stateFactory = createInitialStateFactory(stateAdapter);\n  var selectorsFactory = createSelectorsFactory();\n  return _objectSpread(_objectSpread(_objectSpread({\n    selectId: selectId,\n    sortComparer: sortComparer\n  }, stateFactory), selectorsFactory), stateAdapter);\n}\n\n// src/listenerMiddleware/index.ts\n\n\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = \"task-\".concat(cancelled);\nvar taskCompleted = \"task-\".concat(completed);\nvar listenerCancelled = \"\".concat(listener, \"-\").concat(cancelled);\nvar listenerCompleted = \"\".concat(listener, \"-\").concat(completed);\nvar TaskAbortError = /*#__PURE__*/_createClass(function TaskAbortError(code) {\n  _classCallCheck(this, TaskAbortError);\n  _defineProperty(this, \"name\", \"TaskAbortError\");\n  _defineProperty(this, \"message\", void 0);\n  this.code = code;\n  this.message = \"\".concat(task, \" \").concat(cancelled, \" (reason: \").concat(code, \")\");\n});\n\n// src/listenerMiddleware/utils.ts\nvar assertFunction = function assertFunction(func, expected) {\n  if (typeof func !== \"function\") {\n    throw new Error( false ? 0 : \"\".concat(expected, \" is not a function\"));\n  }\n};\nvar noop2 = function noop2() {};\nvar catchRejection = function catchRejection(promise) {\n  var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop2;\n  promise[\"catch\"](onError);\n  return promise;\n};\nvar addAbortSignalListener = function addAbortSignalListener(abortSignal, callback) {\n  abortSignal.addEventListener(\"abort\", callback, {\n    once: true\n  });\n  return function () {\n    return abortSignal.removeEventListener(\"abort\", callback);\n  };\n};\nvar abortControllerWithReason = function abortControllerWithReason(abortController, reason) {\n  var signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!(\"reason\" in signal)) {\n    Object.defineProperty(signal, \"reason\", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n\n// src/listenerMiddleware/task.ts\nvar validateActive = function validateActive(signal) {\n  if (signal.aborted) {\n    var reason = signal.reason;\n    throw new TaskAbortError(reason);\n  }\n};\nfunction raceWithSignal(signal, promise) {\n  var cleanup = noop2;\n  return new Promise(function (resolve, reject) {\n    var notifyRejection = function notifyRejection() {\n      return reject(new TaskAbortError(signal.reason));\n    };\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise[\"finally\"](function () {\n      return cleanup();\n    }).then(resolve, reject);\n  })[\"finally\"](function () {\n    cleanup = noop2;\n  });\n}\nvar runTask = /*#__PURE__*/function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(task2, cleanUp) {\n    var value;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return Promise.resolve();\n        case 3:\n          _context2.next = 5;\n          return task2();\n        case 5:\n          value = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            status: \"ok\",\n            value: value\n          });\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", {\n            status: _context2.t0 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n            error: _context2.t0\n          });\n        case 12:\n          _context2.prev = 12;\n          cleanUp === null || cleanUp === void 0 || cleanUp();\n          return _context2.finish(12);\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 9, 12, 15]]);\n  }));\n  return function runTask(_x, _x2) {\n    return _ref14.apply(this, arguments);\n  };\n}();\nvar createPause = function createPause(signal) {\n  return function (promise) {\n    return catchRejection(raceWithSignal(signal, promise).then(function (output) {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = function createDelay(signal) {\n  var pause = createPause(signal);\n  return function (timeoutMs) {\n    return pause(new Promise(function (resolve) {\n      return setTimeout(resolve, timeoutMs);\n    }));\n  };\n};\n\n// src/listenerMiddleware/index.ts\nvar assign = Object.assign;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = function createFork(parentAbortSignal, parentBlockingPromises) {\n  var linkControllers = function linkControllers(controller) {\n    return addAbortSignalListener(parentAbortSignal, function () {\n      return abortControllerWithReason(controller, parentAbortSignal.reason);\n    });\n  };\n  return function (taskExecutor, opts) {\n    assertFunction(taskExecutor, \"taskExecutor\");\n    var childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    var result = runTask( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var result2;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            validateActive(parentAbortSignal);\n            validateActive(childAbortController.signal);\n            _context3.next = 4;\n            return taskExecutor({\n              pause: createPause(childAbortController.signal),\n              delay: createDelay(childAbortController.signal),\n              signal: childAbortController.signal\n            });\n          case 4:\n            result2 = _context3.sent;\n            validateActive(childAbortController.signal);\n            return _context3.abrupt(\"return\", result2);\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    })), function () {\n      return abortControllerWithReason(childAbortController, taskCompleted);\n    });\n    if (opts !== null && opts !== void 0 && opts.autoJoin) {\n      parentBlockingPromises.push(result[\"catch\"](noop2));\n    }\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel: function cancel() {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = function createTakePattern(startListening, signal) {\n  var take = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(predicate, timeout) {\n      var unsubscribe, tuplePromise, promises, output;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            validateActive(signal);\n            unsubscribe = function unsubscribe() {};\n            tuplePromise = new Promise(function (resolve, reject) {\n              var stopListening = startListening({\n                predicate: predicate,\n                effect: function effect(action, listenerApi) {\n                  listenerApi.unsubscribe();\n                  resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n                }\n              });\n              unsubscribe = function unsubscribe() {\n                stopListening();\n                reject();\n              };\n            });\n            promises = [tuplePromise];\n            if (timeout != null) {\n              promises.push(new Promise(function (resolve) {\n                return setTimeout(resolve, timeout, null);\n              }));\n            }\n            _context4.prev = 5;\n            _context4.next = 8;\n            return raceWithSignal(signal, Promise.race(promises));\n          case 8:\n            output = _context4.sent;\n            validateActive(signal);\n            return _context4.abrupt(\"return\", output);\n          case 11:\n            _context4.prev = 11;\n            unsubscribe();\n            return _context4.finish(11);\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[5,, 11, 14]]);\n    }));\n    return function take(_x3, _x4) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n  return function (predicate, timeout) {\n    return catchRejection(take(predicate, timeout));\n  };\n};\nvar getListenerEntryPropsFrom = function getListenerEntryPropsFrom(options) {\n  var type = options.type,\n    actionCreator = options.actionCreator,\n    matcher = options.matcher,\n    predicate = options.predicate,\n    effect = options.effect;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {} else {\n    throw new Error( false ? 0 : \"Creating or removing a listener requires one of the known fields for matching an action\");\n  }\n  assertFunction(effect, \"options.listener\");\n  return {\n    predicate: predicate,\n    type: type,\n    effect: effect\n  };\n};\nvar createListenerEntry = Object.assign(function (options) {\n  var _getListenerEntryProp = getListenerEntryPropsFrom(options),\n    type = _getListenerEntryProp.type,\n    predicate = _getListenerEntryProp.predicate,\n    effect = _getListenerEntryProp.effect;\n  var id = nanoid();\n  var entry = {\n    id: id,\n    effect: effect,\n    type: type,\n    predicate: predicate,\n    pending: /* @__PURE__ */new Set(),\n    unsubscribe: function unsubscribe() {\n      throw new Error( false ? 0 : \"Unsubscribe not initialized\");\n    }\n  };\n  return entry;\n}, {\n  withTypes: function withTypes() {\n    return createListenerEntry;\n  }\n});\nvar cancelActiveListeners = function cancelActiveListeners(entry) {\n  entry.pending.forEach(function (controller) {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nvar createClearListenerMiddleware = function createClearListenerMiddleware(listenerMap) {\n  return function () {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = function safelyNotifyError(errorHandler, errorToNotify, errorInfo) {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(function () {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = Object.assign(createAction(\"\".concat(alm, \"/add\")), {\n  withTypes: function withTypes() {\n    return addListener;\n  }\n});\nvar clearAllListeners = createAction(\"\".concat(alm, \"/removeAll\"));\nvar removeListener = Object.assign(createAction(\"\".concat(alm, \"/remove\")), {\n  withTypes: function withTypes() {\n    return removeListener;\n  }\n});\nvar defaultErrorHandler = function defaultErrorHandler() {\n  var _console;\n  for (var _len13 = arguments.length, args = new Array(_len13), _key15 = 0; _key15 < _len13; _key15++) {\n    args[_key15] = arguments[_key15];\n  }\n  (_console = console).error.apply(_console, [\"\".concat(alm, \"/error\")].concat(args));\n};\nvar createListenerMiddleware = function createListenerMiddleware() {\n  var middlewareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var listenerMap = /* @__PURE__ */new Map();\n  var extra = middlewareOptions.extra,\n    _middlewareOptions$on = middlewareOptions.onError,\n    onError = _middlewareOptions$on === void 0 ? defaultErrorHandler : _middlewareOptions$on;\n  assertFunction(onError, \"onError\");\n  var insertEntry = function insertEntry(entry) {\n    entry.unsubscribe = function () {\n      return listenerMap[\"delete\"](entry.id);\n    };\n    listenerMap.set(entry.id, entry);\n    return function (cancelOptions) {\n      entry.unsubscribe();\n      if (cancelOptions !== null && cancelOptions !== void 0 && cancelOptions.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  var startListening = function startListening(options) {\n    var entry = find(Array.from(listenerMap.values()), function (existingEntry) {\n      return existingEntry.effect === options.effect;\n    });\n    if (!entry) {\n      entry = createListenerEntry(options);\n    }\n    return insertEntry(entry);\n  };\n  Object.assign(startListening, {\n    withTypes: function withTypes() {\n      return startListening;\n    }\n  });\n  var stopListening = function stopListening(options) {\n    var _getListenerEntryProp2 = getListenerEntryPropsFrom(options),\n      type = _getListenerEntryProp2.type,\n      effect = _getListenerEntryProp2.effect,\n      predicate = _getListenerEntryProp2.predicate;\n    var entry = find(Array.from(listenerMap.values()), function (entry2) {\n      var matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\n      return matchPredicateOrType && entry2.effect === effect;\n    });\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  Object.assign(stopListening, {\n    withTypes: function withTypes() {\n      return stopListening;\n    }\n  });\n  var notifyListener = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(entry, action, api, getOriginalState) {\n      var internalTaskController, take, autoJoinPromises;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            internalTaskController = new AbortController();\n            take = createTakePattern(startListening, internalTaskController.signal);\n            autoJoinPromises = [];\n            _context5.prev = 3;\n            entry.pending.add(internalTaskController);\n            _context5.next = 7;\n            return Promise.resolve(entry.effect(action,\n            // Use assign() rather than ... to avoid extra helper functions added to bundle\n            assign({}, api, {\n              getOriginalState: getOriginalState,\n              condition: function condition(predicate, timeout) {\n                return take(predicate, timeout).then(Boolean);\n              },\n              take: take,\n              delay: createDelay(internalTaskController.signal),\n              pause: createPause(internalTaskController.signal),\n              extra: extra,\n              signal: internalTaskController.signal,\n              fork: createFork(internalTaskController.signal, autoJoinPromises),\n              unsubscribe: entry.unsubscribe,\n              subscribe: function subscribe() {\n                listenerMap.set(entry.id, entry);\n              },\n              cancelActiveListeners: function cancelActiveListeners() {\n                entry.pending.forEach(function (controller, _, set) {\n                  if (controller !== internalTaskController) {\n                    abortControllerWithReason(controller, listenerCancelled);\n                    set[\"delete\"](controller);\n                  }\n                });\n              },\n              cancel: function cancel() {\n                abortControllerWithReason(internalTaskController, listenerCancelled);\n                entry.pending[\"delete\"](internalTaskController);\n              },\n              throwIfCancelled: function throwIfCancelled() {\n                validateActive(internalTaskController.signal);\n              }\n            })));\n          case 7:\n            _context5.next = 12;\n            break;\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](3);\n            if (!(_context5.t0 instanceof TaskAbortError)) {\n              safelyNotifyError(onError, _context5.t0, {\n                raisedBy: \"effect\"\n              });\n            }\n          case 12:\n            _context5.prev = 12;\n            _context5.next = 15;\n            return Promise.all(autoJoinPromises);\n          case 15:\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending[\"delete\"](internalTaskController);\n            return _context5.finish(12);\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[3, 9, 12, 18]]);\n    }));\n    return function notifyListener(_x5, _x6, _x7, _x8) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n  var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  var middleware = function middleware(api) {\n    return function (next) {\n      return function (action) {\n        if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n          return next(action);\n        }\n        if (addListener.match(action)) {\n          return startListening(action.payload);\n        }\n        if (clearAllListeners.match(action)) {\n          clearListenerMiddleware();\n          return;\n        }\n        if (removeListener.match(action)) {\n          return stopListening(action.payload);\n        }\n        var originalState = api.getState();\n        var getOriginalState = function getOriginalState() {\n          if (originalState === INTERNAL_NIL_TOKEN) {\n            throw new Error( false ? 0 : \"\".concat(alm, \": getOriginalState can only be called synchronously\"));\n          }\n          return originalState;\n        };\n        var result;\n        try {\n          result = next(action);\n          if (listenerMap.size > 0) {\n            var currentState = api.getState();\n            var listenerEntries = Array.from(listenerMap.values());\n            for (var _i4 = 0, _listenerEntries = listenerEntries; _i4 < _listenerEntries.length; _i4++) {\n              var entry = _listenerEntries[_i4];\n              var runListener = false;\n              try {\n                runListener = entry.predicate(action, currentState, originalState);\n              } catch (predicateError) {\n                runListener = false;\n                safelyNotifyError(onError, predicateError, {\n                  raisedBy: \"predicate\"\n                });\n              }\n              if (!runListener) {\n                continue;\n              }\n              notifyListener(entry, action, api, getOriginalState);\n            }\n          }\n        } finally {\n          originalState = INTERNAL_NIL_TOKEN;\n        }\n        return result;\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    startListening: startListening,\n    stopListening: stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n};\n\n// src/dynamicMiddleware/index.ts\n\nvar createMiddlewareEntry = function createMiddlewareEntry(middleware) {\n  return {\n    id: nanoid(),\n    middleware: middleware,\n    applied: /* @__PURE__ */new Map()\n  };\n};\nvar matchInstance = function matchInstance(instanceId) {\n  return function (action) {\n    var _action$meta2;\n    return (action === null || action === void 0 || (_action$meta2 = action.meta) === null || _action$meta2 === void 0 ? void 0 : _action$meta2.instanceId) === instanceId;\n  };\n};\nvar createDynamicMiddleware = function createDynamicMiddleware() {\n  var instanceId = nanoid();\n  var middlewareMap = /* @__PURE__ */new Map();\n  var withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", function () {\n    for (var _len14 = arguments.length, middlewares = new Array(_len14), _key16 = 0; _key16 < _len14; _key16++) {\n      middlewares[_key16] = arguments[_key16];\n    }\n    return {\n      payload: middlewares,\n      meta: {\n        instanceId: instanceId\n      }\n    };\n  }), {\n    withTypes: function withTypes() {\n      return withMiddleware;\n    }\n  });\n  var addMiddleware = Object.assign(function addMiddleware2() {\n    for (var _len15 = arguments.length, middlewares = new Array(_len15), _key17 = 0; _key17 < _len15; _key17++) {\n      middlewares[_key17] = arguments[_key17];\n    }\n    middlewares.forEach(function (middleware2) {\n      var entry = find(Array.from(middlewareMap.values()), function (entry2) {\n        return entry2.middleware === middleware2;\n      });\n      if (!entry) {\n        entry = createMiddlewareEntry(middleware2);\n      }\n      middlewareMap.set(entry.id, entry);\n    });\n  }, {\n    withTypes: function withTypes() {\n      return addMiddleware;\n    }\n  });\n  var getFinalMiddleware = function getFinalMiddleware(api) {\n    var appliedMiddleware = Array.from(middlewareMap.values()).map(function (entry) {\n      return emplace(entry.applied, api, {\n        insert: function insert() {\n          return entry.middleware(api);\n        }\n      });\n    });\n    return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(void 0, _toConsumableArray(appliedMiddleware));\n  };\n  var isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n  var middleware = function middleware(api) {\n    return function (next) {\n      return function (action) {\n        if (isWithMiddleware(action)) {\n          addMiddleware.apply(void 0, _toConsumableArray(action.payload));\n          return api.dispatch;\n        }\n        return getFinalMiddleware(api)(next)(action);\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    addMiddleware: addMiddleware,\n    withMiddleware: withMiddleware,\n    instanceId: instanceId\n  };\n};\n\n// src/combineSlices.ts\n\nvar isSliceLike = function isSliceLike(maybeSliceLike) {\n  return \"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\n};\nvar getReducers = function getReducers(slices) {\n  return slices.flatMap(function (sliceOrMap) {\n    return isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]] : Object.entries(sliceOrMap);\n  });\n};\nvar ORIGINAL_STATE = Symbol[\"for\"](\"rtk-state-proxy-original\");\nvar isStateProxy = function isStateProxy(value) {\n  return !!value && !!value[ORIGINAL_STATE];\n};\nvar stateProxyMap = /* @__PURE__ */new WeakMap();\nvar createStateProxy = function createStateProxy(state, reducerMap) {\n  return emplace(stateProxyMap, state, {\n    insert: function insert() {\n      return new Proxy(state, {\n        get: function get(target, prop, receiver) {\n          if (prop === ORIGINAL_STATE) return target;\n          var result = Reflect.get(target, prop, receiver);\n          if (typeof result === \"undefined\") {\n            var reducer = reducerMap[prop.toString()];\n            if (reducer) {\n              var reducerResult = reducer(void 0, {\n                type: nanoid()\n              });\n              if (typeof reducerResult === \"undefined\") {\n                throw new Error( false ? 0 : \"The slice reducer for key \\\"\".concat(prop.toString(), \"\\\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.\"));\n              }\n              return reducerResult;\n            }\n          }\n          return result;\n        }\n      });\n    }\n  });\n};\nvar original = function original(state) {\n  if (!isStateProxy(state)) {\n    throw new Error( false ? 0 : \"original must be used on state Proxy\");\n  }\n  return state[ORIGINAL_STATE];\n};\nvar noopReducer = function noopReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return state;\n};\nfunction combineSlices() {\n  for (var _len16 = arguments.length, slices = new Array(_len16), _key18 = 0; _key18 < _len16; _key18++) {\n    slices[_key18] = arguments[_key18];\n  }\n  var reducerMap = Object.fromEntries(getReducers(slices));\n  var getReducer = function getReducer() {\n    return Object.keys(reducerMap).length ? (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducerMap) : noopReducer;\n  };\n  var reducer = getReducer();\n  function combinedReducer(state, action) {\n    return reducer(state, action);\n  }\n  combinedReducer.withLazyLoadedSlices = function () {\n    return combinedReducer;\n  };\n  var inject = function inject(slice) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var reducerPath = slice.reducerPath,\n      reducerToInject = slice.reducer;\n    var currentReducer = reducerMap[reducerPath];\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n      if (typeof process !== \"undefined\" && true) {\n        console.error(\"called `inject` to override already-existing reducer \".concat(reducerPath, \" without specifying `overrideExisting: true`\"));\n      }\n      return combinedReducer;\n    }\n    reducerMap[reducerPath] = reducerToInject;\n    reducer = getReducer();\n    return combinedReducer;\n  };\n  var selector = Object.assign(function makeSelector(selectorFn, selectState) {\n    return function selector2(state) {\n      for (var _len17 = arguments.length, args = new Array(_len17 > 1 ? _len17 - 1 : 0), _key19 = 1; _key19 < _len17; _key19++) {\n        args[_key19 - 1] = arguments[_key19];\n      }\n      return selectorFn.apply(void 0, [createStateProxy(selectState ? selectState.apply(void 0, [state].concat(args)) : state, reducerMap)].concat(args));\n    };\n  }, {\n    original: original\n  });\n  return Object.assign(combinedReducer, {\n    inject: inject,\n    selector: selector\n  });\n}\n\n// src/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux Toolkit error #\".concat(code, \"; visit https://redux-toolkit.js.org/Errors?code=\").concat(code, \" for the full message or use the non-minified dev environment for full errors. \");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\n");

/***/ })

};
;