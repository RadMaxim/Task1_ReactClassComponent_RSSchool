"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-router-dom";
exports.ids = ["vendor-chunks/react-router-dom"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-router-dom/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-router-dom/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortedDeferredError: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.AbortedDeferredError),\n/* harmony export */   Await: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.Await),\n/* harmony export */   BrowserRouter: () => (/* binding */ BrowserRouter),\n/* harmony export */   Form: () => (/* binding */ Form),\n/* harmony export */   HashRouter: () => (/* binding */ HashRouter),\n/* harmony export */   Link: () => (/* binding */ Link),\n/* harmony export */   MemoryRouter: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.MemoryRouter),\n/* harmony export */   NavLink: () => (/* binding */ NavLink),\n/* harmony export */   Navigate: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.Navigate),\n/* harmony export */   NavigationType: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.Action),\n/* harmony export */   Outlet: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.Outlet),\n/* harmony export */   Route: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.Route),\n/* harmony export */   Router: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.Router),\n/* harmony export */   RouterProvider: () => (/* binding */ RouterProvider),\n/* harmony export */   Routes: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.Routes),\n/* harmony export */   ScrollRestoration: () => (/* binding */ ScrollRestoration),\n/* harmony export */   UNSAFE_DataRouterContext: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_DataRouterContext),\n/* harmony export */   UNSAFE_DataRouterStateContext: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_DataRouterStateContext),\n/* harmony export */   UNSAFE_ErrorResponseImpl: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_ErrorResponseImpl),\n/* harmony export */   UNSAFE_FetchersContext: () => (/* binding */ FetchersContext),\n/* harmony export */   UNSAFE_LocationContext: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_LocationContext),\n/* harmony export */   UNSAFE_NavigationContext: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_NavigationContext),\n/* harmony export */   UNSAFE_RouteContext: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_RouteContext),\n/* harmony export */   UNSAFE_ViewTransitionContext: () => (/* binding */ ViewTransitionContext),\n/* harmony export */   UNSAFE_useRouteId: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_useRouteId),\n/* harmony export */   UNSAFE_useScrollRestoration: () => (/* binding */ useScrollRestoration),\n/* harmony export */   createBrowserRouter: () => (/* binding */ createBrowserRouter),\n/* harmony export */   createHashRouter: () => (/* binding */ createHashRouter),\n/* harmony export */   createMemoryRouter: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.createMemoryRouter),\n/* harmony export */   createPath: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.createPath),\n/* harmony export */   createRoutesFromChildren: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.createRoutesFromChildren),\n/* harmony export */   createRoutesFromElements: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.createRoutesFromElements),\n/* harmony export */   createSearchParams: () => (/* binding */ createSearchParams),\n/* harmony export */   defer: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.defer),\n/* harmony export */   generatePath: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.generatePath),\n/* harmony export */   isRouteErrorResponse: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.isRouteErrorResponse),\n/* harmony export */   json: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.json),\n/* harmony export */   matchPath: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.matchPath),\n/* harmony export */   matchRoutes: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.matchRoutes),\n/* harmony export */   parsePath: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.parsePath),\n/* harmony export */   redirect: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.redirect),\n/* harmony export */   redirectDocument: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.redirectDocument),\n/* harmony export */   renderMatches: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.renderMatches),\n/* harmony export */   resolvePath: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_2__.resolvePath),\n/* harmony export */   unstable_HistoryRouter: () => (/* binding */ HistoryRouter),\n/* harmony export */   unstable_usePrompt: () => (/* binding */ usePrompt),\n/* harmony export */   unstable_useViewTransitionState: () => (/* binding */ useViewTransitionState),\n/* harmony export */   useActionData: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useActionData),\n/* harmony export */   useAsyncError: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useAsyncError),\n/* harmony export */   useAsyncValue: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useAsyncValue),\n/* harmony export */   useBeforeUnload: () => (/* binding */ useBeforeUnload),\n/* harmony export */   useBlocker: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useBlocker),\n/* harmony export */   useFetcher: () => (/* binding */ useFetcher),\n/* harmony export */   useFetchers: () => (/* binding */ useFetchers),\n/* harmony export */   useFormAction: () => (/* binding */ useFormAction),\n/* harmony export */   useHref: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useHref),\n/* harmony export */   useInRouterContext: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useInRouterContext),\n/* harmony export */   useLinkClickHandler: () => (/* binding */ useLinkClickHandler),\n/* harmony export */   useLoaderData: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useLoaderData),\n/* harmony export */   useLocation: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useLocation),\n/* harmony export */   useMatch: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useMatch),\n/* harmony export */   useMatches: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useMatches),\n/* harmony export */   useNavigate: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useNavigate),\n/* harmony export */   useNavigation: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useNavigation),\n/* harmony export */   useNavigationType: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useNavigationType),\n/* harmony export */   useOutlet: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useOutlet),\n/* harmony export */   useOutletContext: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useOutletContext),\n/* harmony export */   useParams: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useParams),\n/* harmony export */   useResolvedPath: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useResolvedPath),\n/* harmony export */   useRevalidator: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useRevalidator),\n/* harmony export */   useRouteError: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useRouteError),\n/* harmony export */   useRouteLoaderData: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useRouteLoaderData),\n/* harmony export */   useRoutes: () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_3__.useRoutes),\n/* harmony export */   useSearchParams: () => (/* binding */ useSearchParams),\n/* harmony export */   useSubmit: () => (/* binding */ useSubmit)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-router */ \"(ssr)/./node_modules/react-router/dist/index.js\");\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @remix-run/router */ \"(ssr)/./node_modules/@remix-run/router/dist/router.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n/**\n * React Router DOM v6.24.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n\n\n\n\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar defaultMethod = \"get\";\nvar defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce(function (memo, key) {\n    var value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(function (v) {\n      return [key, v];\n    }) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  var searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach(function (_, key) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(function (value) {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nvar _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nvar supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n     true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_warning)(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  var method;\n  var action;\n  var encType;\n  var formData;\n  var body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    var attr = target.getAttribute(\"action\");\n    action = attr ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.stripBasename)(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    var form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    var _attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = _attr ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.stripBasename)(_attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      var name = target.name,\n        type = target.type,\n        value = target.value;\n      if (type === \"image\") {\n        var prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action: action,\n    method: method.toLowerCase(),\n    encType: encType,\n    formData: formData,\n    body: body\n  };\n}\nvar _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"unstable_viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"unstable_viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"unstable_viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nvar REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createRouter)({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createBrowserHistory)({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes: routes,\n    mapRouteProperties: react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_mapRouteProperties,\n    unstable_dataStrategy: opts == null ? void 0 : opts.unstable_dataStrategy,\n    unstable_patchRoutesOnMiss: opts == null ? void 0 : opts.unstable_patchRoutesOnMiss,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createRouter)({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createHashHistory)({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes: routes,\n    mapRouteProperties: react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_mapRouteProperties,\n    unstable_dataStrategy: opts == null ? void 0 : opts.unstable_dataStrategy,\n    unstable_patchRoutesOnMiss: opts == null ? void 0 : opts.unstable_patchRoutesOnMiss,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  var state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  var entries = Object.entries(errors);\n  var serialized = {};\n  for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n    var _entries$_i = _slicedToArray(_entries[_i], 2),\n      key = _entries$_i[0],\n      val = _entries$_i[1];\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        var ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            var error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        var _error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        _error.stack = \"\";\n        serialized[key] = _error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nvar ViewTransitionContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n  isTransitioning: false\n});\nif (true) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nvar FetchersContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(new Map());\nif (true) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nvar START_TRANSITION = \"startTransition\";\nvar startTransitionImpl = react__WEBPACK_IMPORTED_MODULE_0__[START_TRANSITION];\nvar FLUSH_SYNC = \"flushSync\";\nvar flushSyncImpl = react_dom__WEBPACK_IMPORTED_MODULE_1__[FLUSH_SYNC];\nvar USE_ID = \"useId\";\nvar useIdImpl = react__WEBPACK_IMPORTED_MODULE_0__[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nvar Deferred = /*#__PURE__*/_createClass(function Deferred() {\n  var _this = this;\n  _classCallCheck(this, Deferred);\n  this.status = \"pending\";\n  this.promise = new Promise(function (resolve, reject) {\n    _this.resolve = function (value) {\n      if (_this.status === \"pending\") {\n        _this.status = \"resolved\";\n        resolve(value);\n      }\n    };\n    _this.reject = function (reason) {\n      if (_this.status === \"pending\") {\n        _this.status = \"rejected\";\n        reject(reason);\n      }\n    };\n  });\n});\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  var fallbackElement = _ref.fallbackElement,\n    router = _ref.router,\n    future = _ref.future;\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState(router.state),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setStateImpl = _React$useState2[1];\n  var _React$useState3 = react__WEBPACK_IMPORTED_MODULE_0__.useState(),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    pendingState = _React$useState4[0],\n    setPendingState = _React$useState4[1];\n  var _React$useState5 = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n      isTransitioning: false\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    vtContext = _React$useState6[0],\n    setVtContext = _React$useState6[1];\n  var _React$useState7 = react__WEBPACK_IMPORTED_MODULE_0__.useState(),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    renderDfd = _React$useState8[0],\n    setRenderDfd = _React$useState8[1];\n  var _React$useState9 = react__WEBPACK_IMPORTED_MODULE_0__.useState(),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    transition = _React$useState10[0],\n    setTransition = _React$useState10[1];\n  var _React$useState11 = react__WEBPACK_IMPORTED_MODULE_0__.useState(),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    interruption = _React$useState12[0],\n    setInterruption = _React$useState12[1];\n  var fetcherData = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new Map());\n  var _ref13 = future || {},\n    v7_startTransition = _ref13.v7_startTransition;\n  var optInStartTransition = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (cb) {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  var setState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (newState, _ref2) {\n    var deletedFetchers = _ref2.deletedFetchers,\n      flushSync = _ref2.unstable_flushSync,\n      viewTransitionOpts = _ref2.unstable_viewTransitionOpts;\n    deletedFetchers.forEach(function (key) {\n      return fetcherData.current[\"delete\"](key);\n    });\n    newState.fetchers.forEach(function (fetcher, key) {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    var isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(function () {\n          return setStateImpl(newState);\n        });\n      } else {\n        optInStartTransition(function () {\n          return setStateImpl(newState);\n        });\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(function () {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      var t = router.window.document.startViewTransition(function () {\n        flushSyncSafe(function () {\n          return setStateImpl(newState);\n        });\n      });\n      // Clean up after the animation completes\n      t.finished[\"finally\"](function () {\n        flushSyncSafe(function () {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(function () {\n        return setTransition(t);\n      });\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function () {\n    return router.subscribe(setState);\n  }, [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    if (renderDfd && pendingState && router.window) {\n      var newState = pendingState;\n      var renderPromise = renderDfd.promise;\n      var _transition = router.window.document.startViewTransition( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              optInStartTransition(function () {\n                return setStateImpl(newState);\n              });\n              _context.next = 3;\n              return renderPromise;\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })));\n      _transition.finished[\"finally\"](function () {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(_transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n     true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_warning)(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var navigator = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: function go(n) {\n        return router.navigate(n);\n      },\n      push: function push(to, state, opts) {\n        return router.navigate(to, {\n          state: state,\n          preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n        });\n      },\n      replace: function replace(to, state, opts) {\n        return router.navigate(to, {\n          replace: true,\n          state: state,\n          preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n        });\n      }\n    };\n  }, [router]);\n  var basename = router.basename || \"/\";\n  var dataRouterContext = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return {\n      router: router,\n      navigator: navigator,\n      \"static\": false,\n      basename: basename\n    };\n  }, [router, navigator, basename]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_3__.Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\nfunction DataRoutes(_ref3) {\n  var routes = _ref3.routes,\n    future = _ref3.future,\n    state = _ref3.state;\n  return (0,react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_useRoutesImpl)(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  var basename = _ref4.basename,\n    children = _ref4.children,\n    future = _ref4.future,\n    window = _ref4.window;\n  var historyRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createBrowserHistory)({\n      window: window,\n      v5Compat: true\n    });\n  }\n  var history = historyRef.current;\n  var _React$useState13 = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n      action: history.action,\n      location: history.location\n    }),\n    _React$useState14 = _slicedToArray(_React$useState13, 2),\n    state = _React$useState14[0],\n    setStateImpl = _React$useState14[1];\n  var _ref15 = future || {},\n    v7_startTransition = _ref15.v7_startTransition;\n  var setState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (newState) {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(function () {\n      return setStateImpl(newState);\n    }) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function () {\n    return history.listen(setState);\n  }, [history, setState]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_3__.Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  var basename = _ref5.basename,\n    children = _ref5.children,\n    future = _ref5.future,\n    window = _ref5.window;\n  var historyRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createHashHistory)({\n      window: window,\n      v5Compat: true\n    });\n  }\n  var history = historyRef.current;\n  var _React$useState15 = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n      action: history.action,\n      location: history.location\n    }),\n    _React$useState16 = _slicedToArray(_React$useState15, 2),\n    state = _React$useState16[0],\n    setStateImpl = _React$useState16[1];\n  var _ref16 = future || {},\n    v7_startTransition = _ref16.v7_startTransition;\n  var setState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (newState) {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(function () {\n      return setStateImpl(newState);\n    }) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function () {\n    return history.listen(setState);\n  }, [history, setState]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_3__.Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  var basename = _ref6.basename,\n    children = _ref6.children,\n    future = _ref6.future,\n    history = _ref6.history;\n  var _React$useState17 = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n      action: history.action,\n      location: history.location\n    }),\n    _React$useState18 = _slicedToArray(_React$useState17, 2),\n    state = _React$useState18[0],\n    setStateImpl = _React$useState18[1];\n  var _ref17 = future || {},\n    v7_startTransition = _ref17.v7_startTransition;\n  var setState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (newState) {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(function () {\n      return setStateImpl(newState);\n    }) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function () {\n    return history.listen(setState);\n  }, [history, setState]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_3__.Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (true) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nvar isBrowser =  false && 0;\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nvar Link = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function LinkWithRef(_ref7, ref) {\n  var onClick = _ref7.onClick,\n    relative = _ref7.relative,\n    reloadDocument = _ref7.reloadDocument,\n    replace = _ref7.replace,\n    state = _ref7.state,\n    target = _ref7.target,\n    to = _ref7.to,\n    preventScrollReset = _ref7.preventScrollReset,\n    unstable_viewTransition = _ref7.unstable_viewTransition,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  var _React$useContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_NavigationContext),\n    basename = _React$useContext.basename;\n  // Rendered into <a href> for absolute URLs\n  var absoluteHref;\n  var isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        var currentUrl = new URL(window.location.href);\n        var targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        var path = (0,react_router__WEBPACK_IMPORTED_MODULE_2__.stripBasename)(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n         true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_warning)(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  var href = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useHref)(to, {\n    relative: relative\n  });\n  var internalOnClick = useLinkClickHandler(to, {\n    replace: replace,\n    state: state,\n    target: target,\n    preventScrollReset: preventScrollReset,\n    relative: relative,\n    unstable_viewTransition: unstable_viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return /*#__PURE__*/(\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (true) {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nvar NavLink = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  var _ref8$ariaCurrent = _ref8[\"aria-current\"],\n    ariaCurrentProp = _ref8$ariaCurrent === void 0 ? \"page\" : _ref8$ariaCurrent,\n    _ref8$caseSensitive = _ref8.caseSensitive,\n    caseSensitive = _ref8$caseSensitive === void 0 ? false : _ref8$caseSensitive,\n    _ref8$className = _ref8.className,\n    classNameProp = _ref8$className === void 0 ? \"\" : _ref8$className,\n    _ref8$end = _ref8.end,\n    end = _ref8$end === void 0 ? false : _ref8$end,\n    styleProp = _ref8.style,\n    to = _ref8.to,\n    unstable_viewTransition = _ref8.unstable_viewTransition,\n    children = _ref8.children,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  var path = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useResolvedPath)(to, {\n    relative: rest.relative\n  });\n  var location = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useLocation)();\n  var routerState = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_DataRouterStateContext);\n  var _React$useContext2 = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_NavigationContext),\n    navigator = _React$useContext2.navigator,\n    basename = _React$useContext2.basename;\n  var isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && unstable_viewTransition === true;\n  var toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  var locationPathname = location.pathname;\n  var nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = (0,react_router__WEBPACK_IMPORTED_MODULE_2__.stripBasename)(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  var endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  var isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  var isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  var renderProps = {\n    isActive: isActive,\n    isPending: isPending,\n    isTransitioning: isTransitioning\n  };\n  var ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  var className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  var style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    unstable_viewTransition: unstable_viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (true) {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nvar Form = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (_ref9, forwardedRef) {\n  var fetcherKey = _ref9.fetcherKey,\n    navigate = _ref9.navigate,\n    reloadDocument = _ref9.reloadDocument,\n    replace = _ref9.replace,\n    state = _ref9.state,\n    _ref9$method = _ref9.method,\n    method = _ref9$method === void 0 ? defaultMethod : _ref9$method,\n    action = _ref9.action,\n    onSubmit = _ref9.onSubmit,\n    relative = _ref9.relative,\n    preventScrollReset = _ref9.preventScrollReset,\n    unstable_viewTransition = _ref9.unstable_viewTransition,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  var submit = useSubmit();\n  var formAction = useFormAction(action, {\n    relative: relative\n  });\n  var formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  var submitHandler = function submitHandler(event) {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    var submitter = event.nativeEvent.submitter;\n    var submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey: fetcherKey,\n      method: submitMethod,\n      navigate: navigate,\n      replace: replace,\n      state: state,\n      relative: relative,\n      preventScrollReset: preventScrollReset,\n      unstable_viewTransition: unstable_viewTransition\n    });\n  };\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (true) {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  var getKey = _ref10.getKey,\n    storageKey = _ref10.storageKey;\n  useScrollRestoration({\n    getKey: getKey,\n    storageKey: storageKey\n  });\n  return null;\n}\nif (true) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  var ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_DataRouterContext);\n  !ctx ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, getDataRouterConsoleError(hookName)) : 0 : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  var state = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_DataRouterStateContext);\n  !state ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, getDataRouterConsoleError(hookName)) : 0 : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  var _ref18 = _temp === void 0 ? {} : _temp,\n    target = _ref18.target,\n    replaceProp = _ref18.replace,\n    state = _ref18.state,\n    preventScrollReset = _ref18.preventScrollReset,\n    relative = _ref18.relative,\n    unstable_viewTransition = _ref18.unstable_viewTransition;\n  var navigate = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useNavigate)();\n  var location = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useLocation)();\n  var path = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useResolvedPath)(to, {\n    relative: relative\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (event) {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      var replace = replaceProp !== undefined ? replaceProp : (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createPath)(location) === (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createPath)(path);\n      navigate(to, {\n        replace: replace,\n        state: state,\n        preventScrollReset: preventScrollReset,\n        relative: relative,\n        unstable_viewTransition: unstable_viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n   true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_warning)(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : 0;\n  var defaultSearchParamsRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(createSearchParams(defaultInit));\n  var hasSetSearchParamsRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  var location = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useLocation)();\n  var searchParams = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return (\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)\n    );\n  }, [location.search]);\n  var navigate = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useNavigate)();\n  var setSearchParams = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (nextInit, navigateOptions) {\n    var newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nvar fetcherId = 0;\nvar getUniqueFetcherId = function getUniqueFetcherId() {\n  return \"__\" + String(++fetcherId) + \"__\";\n};\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  var _useDataRouterContext = useDataRouterContext(DataRouterHook.UseSubmit),\n    router = _useDataRouterContext.router;\n  var _React$useContext3 = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_NavigationContext),\n    basename = _React$useContext3.basename;\n  var currentRouteId = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_useRouteId)();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    var _getFormSubmissionInf = getFormSubmissionInfo(target, basename),\n      action = _getFormSubmissionInf.action,\n      method = _getFormSubmissionInf.method,\n      encType = _getFormSubmissionInf.encType,\n      formData = _getFormSubmissionInf.formData,\n      body = _getFormSubmissionInf.body;\n    if (options.navigate === false) {\n      var key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData: formData,\n        body: body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        unstable_flushSync: options.unstable_flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData: formData,\n        body: body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        unstable_flushSync: options.unstable_flushSync,\n        unstable_viewTransition: options.unstable_viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  var _ref19 = _temp2 === void 0 ? {} : _temp2,\n    relative = _ref19.relative;\n  var _React$useContext4 = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_NavigationContext),\n    basename = _React$useContext4.basename;\n  var routeContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_RouteContext);\n  !routeContext ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, \"useFormAction must be used inside a RouteContext\") : 0 : void 0;\n  var _routeContext$matches = routeContext.matches.slice(-1),\n    _routeContext$matches2 = _slicedToArray(_routeContext$matches, 1),\n    match = _routeContext$matches2[0];\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  var path = _extends({}, (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useResolvedPath)(action ? action : \".\", {\n    relative: relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  var location = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useLocation)();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    var params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params[\"delete\"](\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : (0,react_router__WEBPACK_IMPORTED_MODULE_2__.joinPaths)([basename, path.pathname]);\n  }\n  return (0,react_router__WEBPACK_IMPORTED_MODULE_2__.createPath)(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  var _ref20 = _temp3 === void 0 ? {} : _temp3,\n    key = _ref20.key;\n  var _useDataRouterContext2 = useDataRouterContext(DataRouterHook.UseFetcher),\n    router = _useDataRouterContext2.router;\n  var state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  var fetcherData = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FetchersContext);\n  var route = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_RouteContext);\n  var routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, \"useFetcher must be used inside a FetchersContext\") : 0 : void 0;\n  !route ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, \"useFetcher must be used inside a RouteContext\") : 0 : void 0;\n  !(routeId != null) ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : 0 : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  var defaultKey = useIdImpl ? useIdImpl() : \"\";\n  var _React$useState19 = react__WEBPACK_IMPORTED_MODULE_0__.useState(key || defaultKey),\n    _React$useState20 = _slicedToArray(_React$useState19, 2),\n    fetcherKey = _React$useState20[0],\n    setFetcherKey = _React$useState20[1];\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    router.getFetcher(fetcherKey);\n    return function () {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  var load = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (href, opts) {\n    !routeId ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, \"No routeId available for fetcher.load()\") : 0 : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  var submitImpl = useSubmit();\n  var submit = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (target, opts) {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey: fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  var FetcherForm = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    var FetcherForm = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (true) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  var fetcher = state.fetchers.get(fetcherKey) || react_router__WEBPACK_IMPORTED_MODULE_2__.IDLE_FETCHER;\n  var data = fetcherData.get(fetcherKey);\n  var fetcherWithComponents = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return _extends({\n      Form: FetcherForm,\n      submit: submit,\n      load: load\n    }, fetcher, {\n      data: data\n    });\n  }, [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  var state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(function (_ref11) {\n    var _ref21 = _slicedToArray(_ref11, 2),\n      key = _ref21[0],\n      fetcher = _ref21[1];\n    return _extends({}, fetcher, {\n      key: key\n    });\n  });\n}\nvar SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nvar savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  var _ref22 = _temp4 === void 0 ? {} : _temp4,\n    getKey = _ref22.getKey,\n    storageKey = _ref22.storageKey;\n  var _useDataRouterContext3 = useDataRouterContext(DataRouterHook.UseScrollRestoration),\n    router = _useDataRouterContext3.router;\n  var _useDataRouterState = useDataRouterState(DataRouterStateHook.UseScrollRestoration),\n    restoreScrollPosition = _useDataRouterState.restoreScrollPosition,\n    preventScrollReset = _useDataRouterState.preventScrollReset;\n  var _React$useContext5 = react__WEBPACK_IMPORTED_MODULE_0__.useContext(react_router__WEBPACK_IMPORTED_MODULE_3__.UNSAFE_NavigationContext),\n    basename = _React$useContext5.basename;\n  var location = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useLocation)();\n  var matches = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useMatches)();\n  var navigation = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useNavigation)();\n  // Trigger manual scroll restoration while we're active\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    window.history.scrollRestoration = \"manual\";\n    return function () {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function () {\n    if (navigation.state === \"idle\") {\n      var key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n       true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_warning)(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function () {\n      try {\n        var sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function () {\n      var getKeyWithoutBasename = getKey && basename !== \"/\" ? function (location, matches) {\n        return getKey(\n        // Strip the basename to match useLocation()\n        _extends({}, location, {\n          pathname: (0,react_router__WEBPACK_IMPORTED_MODULE_2__.stripBasename)(location.pathname, basename) || location.pathname\n        }), matches);\n      } : getKey;\n      var disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, function () {\n        return window.scrollY;\n      }, getKeyWithoutBasename);\n      return function () {\n        return disableScrollRestoration && disableScrollRestoration();\n      };\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function () {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        var el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  var _ref23 = options || {},\n    capture = _ref23.capture;\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    var opts = capture != null ? {\n      capture: capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return function () {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  var _ref24 = options || {},\n    capture = _ref24.capture;\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    var opts = capture != null ? {\n      capture: capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return function () {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  var when = _ref12.when,\n    message = _ref12.message;\n  var blocker = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useBlocker)(when);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    if (blocker.state === \"blocked\") {\n      var proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var vtContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ViewTransitionContext);\n  !(vtContext != null) ?  true ? (0,react_router__WEBPACK_IMPORTED_MODULE_2__.UNSAFE_invariant)(false, \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : 0 : void 0;\n  var _useDataRouterContext4 = useDataRouterContext(DataRouterHook.useViewTransitionState),\n    basename = _useDataRouterContext4.basename;\n  var path = (0,react_router__WEBPACK_IMPORTED_MODULE_3__.useResolvedPath)(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  var currentPath = (0,react_router__WEBPACK_IMPORTED_MODULE_2__.stripBasename)(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  var nextPath = (0,react_router__WEBPACK_IMPORTED_MODULE_2__.stripBasename)(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (0,react_router__WEBPACK_IMPORTED_MODULE_2__.matchPath)(path.pathname, nextPath) != null || (0,react_router__WEBPACK_IMPORTED_MODULE_2__.matchPath)(path.pathname, currentPath) != null;\n}\n//#endregion\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0NBQ0EscUpBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFDLENBQUEsU0FBQUMsQ0FBQSxFQUFBRCxDQUFBLE9BQUFFLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLEVBQUFDLENBQUEsR0FBQUgsQ0FBQSxDQUFBSSxjQUFBLEVBQUFDLENBQUEsR0FBQUosTUFBQSxDQUFBSyxjQUFBLGNBQUFQLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLElBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLENBQUFPLEtBQUEsS0FBQUMsQ0FBQSx3QkFBQUMsTUFBQSxHQUFBQSxNQUFBLE9BQUFDLENBQUEsR0FBQUYsQ0FBQSxDQUFBRyxRQUFBLGtCQUFBQyxDQUFBLEdBQUFKLENBQUEsQ0FBQUssYUFBQSx1QkFBQUMsQ0FBQSxHQUFBTixDQUFBLENBQUFPLFdBQUEsOEJBQUFDLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFBQyxNQUFBLENBQUFLLGNBQUEsQ0FBQVAsQ0FBQSxFQUFBRCxDQUFBLElBQUFTLEtBQUEsRUFBQVAsQ0FBQSxFQUFBaUIsVUFBQSxNQUFBQyxZQUFBLE1BQUFDLFFBQUEsU0FBQXBCLENBQUEsQ0FBQUQsQ0FBQSxXQUFBa0IsTUFBQSxtQkFBQWpCLENBQUEsSUFBQWlCLE1BQUEsWUFBQUEsT0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLFdBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLGdCQUFBb0IsS0FBQXJCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLEVBQUFHLENBQUEsUUFBQUssQ0FBQSxHQUFBVixDQUFBLElBQUFB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Olsid2VicGFjazovL3ZpdGUtcmVhY3QtdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZGlzdC9pbmRleC5qcz8wM2E2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4yNC4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBSb3V0ZXIsIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIHVzZUhyZWYsIHVzZVJlc29sdmVkUGF0aCwgdXNlTG9jYXRpb24sIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfdXNlUm91dGVJZCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGlvbiwgdXNlQmxvY2tlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBVTlNBRkVfdXNlUm91dGVJZCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgc3RyaXBCYXNlbmFtZSwgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgSURMRV9GRVRDSEVSLCBtYXRjaFBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5leHBvcnQgeyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmIChcbiAgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmXG4gIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5mdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvblNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcbiAgaWYgKGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgICAvLyBVc2UgYGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCguLi4pYCBoZXJlIGluc3RlYWQgb2YgaXRlcmF0aW5nIG9mXG4gICAgLy8gYGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpYCB0byB3b3JrLWFyb3VuZCBhIGJ1ZyBpbiBGaXJlZm94IHJlbGF0ZWQgdG9cbiAgICAvLyB3ZWIgZXh0ZW5zaW9ucy4gUmVsZXZhbnQgQnVnemlsbGEgdGlja2V0czpcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDE0NjAyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAyMzk4NFxuICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG4vLyBPbmUtdGltZSBjaGVjayBmb3Igc3VibWl0dGVyIHN1cHBvcnRcbmxldCBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IG51bGw7XG5mdW5jdGlvbiBpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkge1xuICBpZiAoX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPT09IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZvcm1EYXRhKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpZiBGb3JtRGF0YSBzdXBwb3J0cyB0aGUgc3VibWl0dGVyIHBhcmFtZXRlciwgdGhpcyB3aWxsIHRocm93XG4gICAgICAwKTtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXI7XG59XG5jb25zdCBzdXBwb3J0ZWRGb3JtRW5jVHlwZXMgPSBuZXcgU2V0KFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdKTtcbmZ1bmN0aW9uIGdldEZvcm1FbmNUeXBlKGVuY1R5cGUpIHtcbiAgaWYgKGVuY1R5cGUgIT0gbnVsbCAmJiAhc3VwcG9ydGVkRm9ybUVuY1R5cGVzLmhhcyhlbmNUeXBlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIlxcXCJcIiArIGVuY1R5cGUgKyBcIlxcXCIgaXMgbm90IGEgdmFsaWQgYGVuY1R5cGVgIGZvciBgPEZvcm0+YC9gPGZldGNoZXIuRm9ybT5gIFwiICsgKFwiYW5kIHdpbGwgZGVmYXVsdCB0byBcXFwiXCIgKyBkZWZhdWx0RW5jVHlwZSArIFwiXFxcIlwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGVuY1R5cGU7XG59XG5mdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSkge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuICBsZXQgYm9keTtcbiAgaWYgKGlzRm9ybUVsZW1lbnQodGFyZ2V0KSkge1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgZW5jVHlwZSA9IGdldEZvcm1FbmNUeXBlKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcbiAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGEgPGJ1dHRvbj4gb3IgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCI+IHdpdGhvdXQgYSA8Zm9ybT5cIik7XG4gICAgfVxuICAgIC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpKSB8fCBnZXRGb3JtRW5jVHlwZShmb3JtLmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIC8vIEJ1aWxkIGEgRm9ybURhdGEgb2JqZWN0IHBvcHVsYXRlZCBmcm9tIGEgZm9ybSBhbmQgc3VibWl0dGVyXG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSwgdGFyZ2V0KTtcbiAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgRm9ybURhdGEoZWwsIHN1Ym1pdHRlcilgIGZvcm1hdCxcbiAgICAvLyB0aGVuIHRhY2sgb24gdGhlIHN1Ym1pdHRlciB2YWx1ZSBhdCB0aGUgZW5kLiAgVGhpcyBpcyBhIGxpZ2h0d2VpZ2h0XG4gICAgLy8gc29sdXRpb24gdGhhdCBpcyBub3QgMTAwJSBzcGVjIGNvbXBsaWFudC4gIEZvciBjb21wbGV0ZSBzdXBwb3J0IGluIG9sZGVyXG4gICAgLy8gYnJvd3NlcnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBwYWNrYWdlXG4gICAgaWYgKCFpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gdGFyZ2V0O1xuICAgICAgaWYgKHR5cGUgPT09IFwiaW1hZ2VcIikge1xuICAgICAgICBsZXQgcHJlZml4ID0gbmFtZSA/IG5hbWUgKyBcIi5cIiA6IFwiXCI7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInhcIiwgXCIwXCIpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJlZml4ICsgXCJ5XCIsIFwiMFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgXCIgKyBcIjxpbnB1dCB0eXBlPVxcXCJzdWJtaXR8aW1hZ2VcXFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG51bGw7XG4gICAgZW5jVHlwZSA9IGRlZmF1bHRFbmNUeXBlO1xuICAgIGJvZHkgPSB0YXJnZXQ7XG4gIH1cbiAgLy8gU2VuZCBib2R5IGZvciA8Rm9ybSBlbmNUeXBlPVwidGV4dC9wbGFpblwiIHNvIHdlIGVuY29kZSBpdCBpbnRvIHRleHRcbiAgaWYgKGZvcm1EYXRhICYmIGVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgYm9keSA9IGZvcm1EYXRhO1xuICAgIGZvcm1EYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWN0aW9uLFxuICAgIG1ldGhvZDogbWV0aG9kLnRvTG93ZXJDYXNlKCksXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YSxcbiAgICBib2R5XG4gIH07XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2xpY2tcIiwgXCJyZWxhdGl2ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcImZldGNoZXJLZXlcIiwgXCJuYXZpZ2F0ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJyZWxhdGl2ZVwiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCJdO1xuLy8gSEVZIFlPVSEgRE9OJ1QgVE9VQ0ggVEhJUyBWQVJJQUJMRSFcbi8vXG4vLyBJdCBpcyByZXBsYWNlZCB3aXRoIHRoZSBwcm9wZXIgdmVyc2lvbiBhdCBidWlsZCB0aW1lIHZpYSBhIGJhYmVsIHBsdWdpbiBpblxuLy8gdGhlIHJvbGx1cCBjb25maWcuXG4vL1xuLy8gRXhwb3J0IGEgZ2xvYmFsIHByb3BlcnR5IG9udG8gdGhlIHdpbmRvdyBmb3IgUmVhY3QgUm91dGVyIGRldGVjdGlvbiBieSB0aGVcbi8vIENvcmUgV2ViIFZpdGFscyBUZWNobm9sb2d5IFJlcG9ydC4gIFRoaXMgd2F5IHRoZXkgY2FuIGNvbmZpZ3VyZSB0aGUgYHdhcHBhbHl6ZXJgXG4vLyB0byBkZXRlY3QgYW5kIHByb3Blcmx5IGNsYXNzaWZ5IGxpdmUgd2Vic2l0ZXMgYXMgYmVpbmcgYnVpbHQgd2l0aCBSZWFjdCBSb3V0ZXI6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSFRUUEFyY2hpdmUvd2FwcGFseXplci9ibG9iL21haW4vc3JjL3RlY2hub2xvZ2llcy9yLmpzb25cbmNvbnN0IFJFQUNUX1JPVVRFUl9WRVJTSU9OID0gXCI2XCI7XG50cnkge1xuICB3aW5kb3cuX19yZWFjdFJvdXRlclZlcnNpb24gPSBSRUFDVF9ST1VURVJfVkVSU0lPTjtcbn0gY2F0Y2ggKGUpIHtcbiAgLy8gbm8tb3Bcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMudW5zdGFibGVfZGF0YVN0cmF0ZWd5LFxuICAgIHVuc3RhYmxlX3BhdGNoUm91dGVzT25NaXNzOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnVuc3RhYmxlX3BhdGNoUm91dGVzT25NaXNzLFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy51bnN0YWJsZV9kYXRhU3RyYXRlZ3ksXG4gICAgdW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3M6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMudW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3MsXG4gICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuICBsZXQgc3RhdGUgPSAoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3JzKGVycm9ycykge1xuICBpZiAoIWVycm9ycykgcmV0dXJuIG51bGw7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZXJyb3JzKTtcbiAgbGV0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBlbnRyaWVzKSB7XG4gICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpblxuICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOilcbiAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiUm91dGVFcnJvclJlc3BvbnNlXCIpIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IG5ldyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbmNvbnN0IFZpZXdUcmFuc2l0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFZpZXdUcmFuc2l0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiVmlld1RyYW5zaXRpb25cIjtcbn1cbmNvbnN0IEZldGNoZXJzQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG5ldyBNYXAoKSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZldGNoZXJzQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRmV0Y2hlcnNcIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb21wb25lbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5jb25zdCBGTFVTSF9TWU5DID0gXCJmbHVzaFN5bmNcIjtcbmNvbnN0IGZsdXNoU3luY0ltcGwgPSBSZWFjdERPTVtGTFVTSF9TWU5DXTtcbmNvbnN0IFVTRV9JRCA9IFwidXNlSWRcIjtcbmNvbnN0IHVzZUlkSW1wbCA9IFJlYWN0W1VTRV9JRF07XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb25TYWZlKGNiKSB7XG4gIGlmIChzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgc3RhcnRUcmFuc2l0aW9uSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hTeW5jU2FmZShjYikge1xuICBpZiAoZmx1c2hTeW5jSW1wbCkge1xuICAgIGZsdXNoU3luY0ltcGwoY2IpO1xuICB9IGVsc2Uge1xuICAgIGNiKCk7XG4gIH1cbn1cbmNsYXNzIERlZmVycmVkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVzb2x2ZWRcIjtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMucmVqZWN0ID0gcmVhc29uID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCBbcGVuZGluZ1N0YXRlLCBzZXRQZW5kaW5nU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFt2dENvbnRleHQsIHNldFZ0Q29udGV4dF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICB9KTtcbiAgbGV0IFtyZW5kZXJEZmQsIHNldFJlbmRlckRmZF0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFtpbnRlcnJ1cHRpb24sIHNldEludGVycnVwdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VSZWYobmV3IE1hcCgpKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IG9wdEluU3RhcnRUcmFuc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soY2IgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24pIHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfSwgW3Y3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygobmV3U3RhdGUsIF9yZWYyKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVycyxcbiAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzOiB2aWV3VHJhbnNpdGlvbk9wdHNcbiAgICB9ID0gX3JlZjI7XG4gICAgZGVsZXRlZEZldGNoZXJzLmZvckVhY2goa2V5ID0+IGZldGNoZXJEYXRhLmN1cnJlbnQuZGVsZXRlKGtleSkpO1xuICAgIG5ld1N0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoZXIuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZldGNoZXJEYXRhLmN1cnJlbnQuc2V0KGtleSwgZmV0Y2hlci5kYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlID0gcm91dGVyLndpbmRvdyA9PSBudWxsIHx8IHJvdXRlci53aW5kb3cuZG9jdW1lbnQgPT0gbnVsbCB8fCB0eXBlb2Ygcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uICE9PSBcImZ1bmN0aW9uXCI7XG4gICAgLy8gSWYgdGhpcyBpc24ndCBhIHZpZXcgdHJhbnNpdGlvbiBvciBpdCdzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBicm93c2VyLFxuICAgIC8vIGp1c3QgdXBkYXRlIGFuZCBiZSBkb25lIHdpdGggaXRcbiAgICBpZiAoIXZpZXdUcmFuc2l0aW9uT3B0cyB8fCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUpIHtcbiAgICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmbHVzaFN5bmMgKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgLy8gRmx1c2ggdGhyb3VnaCB0aGUgY29udGV4dCB0byBtYXJrIERPTSBlbGVtZW50cyBhcyB0cmFuc2l0aW9uPWluZ1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgcGVuZGluZyB0cmFuc2l0aW9uc1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgICBmbHVzaFN5bmM6IHRydWUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLy8gVXBkYXRlIHRoZSBET01cbiAgICAgIGxldCB0ID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQ2xlYW4gdXAgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcbiAgICAgIHQuZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRUcmFuc2l0aW9uKHQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnRUcmFuc2l0aW9uICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAvLyBJbnRlcnJ1cHRpbmcgYW4gaW4tcHJvZ3Jlc3MgdHJhbnNpdGlvbiwgY2FuY2VsIGFuZCBsZXQgZXZlcnl0aGluZyBmbHVzaFxuICAgICAgLy8gb3V0LCBhbmQgdGhlbiBraWNrIG9mZiBhIG5ldyB0cmFuc2l0aW9uIGZyb20gdGhlIGludGVycnVwdGlvbiBzdGF0ZVxuICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24oe1xuICAgICAgICBzdGF0ZTogbmV3U3RhdGUsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29tcGxldGVkIG5hdmlnYXRpb24gdXBkYXRlIHdpdGggb3B0ZWQtaW4gdmlldyB0cmFuc2l0aW9ucywgbGV0ICdlciByaXBcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShuZXdTdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIud2luZG93LCB0cmFuc2l0aW9uLCByZW5kZXJEZmQsIGZldGNoZXJEYXRhLCBvcHRJblN0YXJ0VHJhbnNpdGlvbl0pO1xuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG4gIC8vIFdoZW4gd2Ugc3RhcnQgYSB2aWV3IHRyYW5zaXRpb24sIGNyZWF0ZSBhIERlZmVycmVkIHdlIGNhbiB1c2UgZm9yIHRoZVxuICAvLyBldmVudHVhbCBcImNvbXBsZXRlZFwiIHJlbmRlclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmICF2dENvbnRleHQuZmx1c2hTeW5jKSB7XG4gICAgICBzZXRSZW5kZXJEZmQobmV3IERlZmVycmVkKCkpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dF0pO1xuICAvLyBPbmNlIHRoZSBkZWZlcnJlZCBpcyBjcmVhdGVkLCBraWNrIG9mZiBzdGFydFZpZXdUcmFuc2l0aW9uKCkgdG8gdXBkYXRlIHRoZVxuICAvLyBET00gYW5kIHRoZW4gd2FpdCBvbiB0aGUgRGVmZXJyZWQgdG8gcmVzb2x2ZSAoaW5kaWNhdGluZyB0aGUgRE9NIHVwZGF0ZSBoYXNcbiAgLy8gaGFwcGVuZWQpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgcm91dGVyLndpbmRvdykge1xuICAgICAgbGV0IG5ld1N0YXRlID0gcGVuZGluZ1N0YXRlO1xuICAgICAgbGV0IHJlbmRlclByb21pc2UgPSByZW5kZXJEZmQucHJvbWlzZTtcbiAgICAgIGxldCB0cmFuc2l0aW9uID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIGF3YWl0IHJlbmRlclByb21pc2U7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zaXRpb24uZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNldFRyYW5zaXRpb24odHJhbnNpdGlvbik7XG4gICAgfVxuICB9LCBbb3B0SW5TdGFydFRyYW5zaXRpb24sIHBlbmRpbmdTdGF0ZSwgcmVuZGVyRGZkLCByb3V0ZXIud2luZG93XSk7XG4gIC8vIFdoZW4gdGhlIG5ldyBsb2NhdGlvbiBmaW5hbGx5IHJlbmRlcnMgYW5kIGlzIGNvbW1pdHRlZCB0byB0aGUgRE9NLCB0aGlzXG4gIC8vIGVmZmVjdCB3aWxsIHJ1biB0byByZXNvbHZlIHRoZSB0cmFuc2l0aW9uXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgc3RhdGUubG9jYXRpb24ua2V5ID09PSBwZW5kaW5nU3RhdGUubG9jYXRpb24ua2V5KSB7XG4gICAgICByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgIH1cbiAgfSwgW3JlbmRlckRmZCwgdHJhbnNpdGlvbiwgc3RhdGUubG9jYXRpb24sIHBlbmRpbmdTdGF0ZV0pO1xuICAvLyBJZiB3ZSBnZXQgaW50ZXJydXB0ZWQgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uIGR1cmluZyBhIHRyYW5zaXRpb24sIHdlIHNraXBcbiAgLy8gdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBsZXQgaXQgY2xlYW51cCwgdGhlbiBraWNrIGl0IG9mZiBhZ2FpbiBoZXJlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmIGludGVycnVwdGlvbikge1xuICAgICAgc2V0UGVuZGluZ1N0YXRlKGludGVycnVwdGlvbi5zdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW50ZXJydXB0aW9uLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBpbnRlcnJ1cHRpb24ubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICAgIHNldEludGVycnVwdGlvbih1bmRlZmluZWQpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcsIGludGVycnVwdGlvbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgKyBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIikgOiB2b2lkIDA7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZldGNoZXJzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmZXRjaGVyRGF0YS5jdXJyZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFZpZXdUcmFuc2l0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2dENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvcixcbiAgICBmdXR1cmU6IHtcbiAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiByb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXG4gICAgfVxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCB8fCByb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVzLCB7XG4gICAgcm91dGVzOiByb3V0ZXIucm91dGVzLFxuICAgIGZ1dHVyZTogcm91dGVyLmZ1dHVyZSxcbiAgICBzdGF0ZTogc3RhdGVcbiAgfSkgOiBmYWxsYmFja0VsZW1lbnQpKSkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIGZ1dHVyZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjM7XG4gIHJldHVybiBVTlNBRkVfdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUsIGZ1dHVyZSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gUHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKi9cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmNDtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmNTtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWY2O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgYDxhPmAuXG4gKi9cbmNvbnN0IExpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5rV2l0aFJlZihfcmVmNywgcmVmKSB7XG4gIGxldCB7XG4gICAgICBvbkNsaWNrLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIHRvLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9ID0gX3JlZjcsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY3LCBfZXhjbHVkZWQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIGFic29sdXRlIFVSTHNcbiAgbGV0IGFic29sdXRlSHJlZjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiAmJiBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh0bykpIHtcbiAgICAvLyBSZW5kZXIgdGhlIGFic29sdXRlIGhyZWYgc2VydmVyLSBhbmQgY2xpZW50LXNpZGVcbiAgICBhYnNvbHV0ZUhyZWYgPSB0bztcbiAgICAvLyBPbmx5IGNoZWNrIGZvciBleHRlcm5hbCBvcmlnaW5zIGNsaWVudC1zaWRlXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKSA6IG5ldyBVUkwodG8pO1xuICAgICAgICBsZXQgcGF0aCA9IHN0cmlwQmFzZW5hbWUodGFyZ2V0VXJsLnBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgICAgIGlmICh0YXJnZXRVcmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBwYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBTdHJpcCB0aGUgcHJvdG9jb2wvb3JpZ2luL2Jhc2VuYW1lIGZvciBzYW1lLW9yaWdpbiBhYnNvbHV0ZSBVUkxzXG4gICAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzRXh0ZXJuYWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGRvIGV4dGVybmFsIFVSTCBkZXRlY3Rpb24gd2l0aG91dCBhIHZhbGlkIFVSTFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCI8TGluayB0bz1cXFwiXCIgKyB0byArIFwiXFxcIj4gY29udGFpbnMgYW4gaW52YWxpZCBVUkwgd2hpY2ggd2lsbCBwcm9iYWJseSBicmVhayBcIiArIFwid2hlbiBjbGlja2VkIC0gcGxlYXNlIHVwZGF0ZSB0byBhIHZhbGlkIFVSTCBwYXRoLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgcmVsYXRpdmUgVVJMc1xuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBhYnNvbHV0ZUhyZWYgfHwgaHJlZixcbiAgICAgIG9uQ2xpY2s6IGlzRXh0ZXJuYWwgfHwgcmVsb2FkRG9jdW1lbnQgPyBvbkNsaWNrIDogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIGA8TGluaz5gIHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjgsIHJlZikge1xuICBsZXQge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGNoaWxkcmVuXG4gICAgfSA9IF9yZWY4LFxuICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmOCwgX2V4Y2x1ZGVkMik7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IHJlc3QucmVsYXRpdmVcbiAgfSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIG5hdmlnYXRvcixcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgaXNUcmFuc2l0aW9uaW5nID0gcm91dGVyU3RhdGUgIT0gbnVsbCAmJlxuICAvLyBDb25kaXRpb25hbCB1c2FnZSBpcyBPSyBoZXJlIGJlY2F1c2UgdGhlIHVzYWdlIG9mIGEgZGF0YSByb3V0ZXIgaXMgc3RhdGljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICB1c2VWaWV3VHJhbnNpdGlvblN0YXRlKHBhdGgpICYmIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uID09PSB0cnVlO1xuICBsZXQgdG9QYXRobmFtZSA9IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihwYXRoKS5wYXRobmFtZSA6IHBhdGgucGF0aG5hbWU7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWUgOiBudWxsO1xuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgPyBuZXh0TG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICB0b1BhdGhuYW1lID0gdG9QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIGlmIChuZXh0TG9jYXRpb25QYXRobmFtZSAmJiBiYXNlbmFtZSkge1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShuZXh0TG9jYXRpb25QYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvblBhdGhuYW1lO1xuICB9XG4gIC8vIElmIHRoZSBgdG9gIGhhcyBhIHRyYWlsaW5nIHNsYXNoLCBsb29rIGF0IHRoYXQgZXhhY3Qgc3BvdC4gIE90aGVyd2lzZSxcbiAgLy8gd2UncmUgbG9va2luZyBmb3IgYSBzbGFzaCBfYWZ0ZXJfIHdoYXQncyBpbiBgdG9gLiAgRm9yIGV4YW1wbGU6XG4gIC8vXG4gIC8vIDxOYXZMaW5rIHRvPVwiL3VzZXJzXCI+IGFuZCA8TmF2TGluayB0bz1cIi91c2Vycy9cIj5cbiAgLy8gYm90aCB3YW50IHRvIGxvb2sgZm9yIGEgLyBhdCBpbmRleCA2IHRvIG1hdGNoIFVSTCBgL3VzZXJzL21hdHRgXG4gIGNvbnN0IGVuZFNsYXNoUG9zaXRpb24gPSB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUubGVuZ3RoIC0gMSA6IHRvUGF0aG5hbWUubGVuZ3RoO1xuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KGVuZFNsYXNoUG9zaXRpb24pID09PSBcIi9cIjtcbiAgbGV0IGlzUGVuZGluZyA9IG5leHRMb2NhdGlvblBhdGhuYW1lICE9IG51bGwgJiYgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIik7XG4gIGxldCByZW5kZXJQcm9wcyA9IHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmcsXG4gICAgaXNUcmFuc2l0aW9uaW5nXG4gIH07XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3AocmVuZGVyUHJvcHMpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCwgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsLCBpc1RyYW5zaXRpb25pbmcgPyBcInRyYW5zaXRpb25pbmdcIiA6IG51bGxdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfVxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3AocmVuZGVyUHJvcHMpIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uOiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihyZW5kZXJQcm9wcykgOiBjaGlsZHJlbik7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xufVxuLyoqXG4gKiBBIGBAcmVtaXgtcnVuL3JvdXRlcmAtYXdhcmUgYDxmb3JtPmAuIEl0IGJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBmb3JtIGV4Y2VwdFxuICogdGhhdCB0aGUgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VydmVyIGlzIHdpdGggYGZldGNoYCBpbnN0ZWFkIG9mIG5ldyBkb2N1bWVudFxuICogcmVxdWVzdHMsIGFsbG93aW5nIGNvbXBvbmVudHMgdG8gYWRkIG5pY2VyIFVYIHRvIHRoZSBwYWdlIGFzIHRoZSBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQgYW5kIHJldHVybnMgd2l0aCBkYXRhLlxuICovXG5jb25zdCBGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKF9yZWY5LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgbGV0IHtcbiAgICAgIGZldGNoZXJLZXksXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0gPSBfcmVmOSxcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY5LCBfZXhjbHVkZWQzKTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oYWN0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBzdWJtaXRIYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgIG9uU3VibWl0ICYmIG9uU3VibWl0KGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHN1Ym1pdHRlciA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjtcbiAgICBsZXQgc3VibWl0TWV0aG9kID0gKHN1Ym1pdHRlciA9PSBudWxsID8gdm9pZCAwIDogc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikpIHx8IG1ldGhvZDtcbiAgICBzdWJtaXQoc3VibWl0dGVyIHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQsIHtcbiAgICAgIGZldGNoZXJLZXksXG4gICAgICBtZXRob2Q6IHN1Ym1pdE1ldGhvZCxcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgYWN0aW9uOiBmb3JtQWN0aW9uLFxuICAgIG9uU3VibWl0OiByZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlclxuICB9LCBwcm9wcykpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbihfcmVmMTApIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3JlZjEwO1xuICB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBEYXRhUm91dGVySG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRcIl0gPSBcInVzZVN1Ym1pdFwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdEZldGNoZXJcIl0gPSBcInVzZVN1Ym1pdEZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1widXNlVmlld1RyYW5zaXRpb25TdGF0ZVwiXSA9IFwidXNlVmlld1RyYW5zaXRpb25TdGF0ZVwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyc1wiXSA9IFwidXNlRmV0Y2hlcnNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG4vLyBJbnRlcm5hbCBob29rc1xuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuLy8gRXh0ZXJuYWwgaG9va3Ncbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZSxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUHJvcCAhPT0gdW5kZWZpbmVkID8gcmVwbGFjZVByb3AgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcbiAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2UsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG8sIHByZXZlbnRTY3JvbGxSZXNldCwgcmVsYXRpdmUsIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyh0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLCBcIllvdSBjYW5ub3QgdXNlIHRoZSBgdXNlU2VhcmNoUGFyYW1zYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IFwiICsgXCJzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IFwiICsgXCJFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PlxuICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgfVxufVxubGV0IGZldGNoZXJJZCA9IDA7XG5sZXQgZ2V0VW5pcXVlRmV0Y2hlcklkID0gKCkgPT4gXCJfX1wiICsgU3RyaW5nKCsrZmV0Y2hlcklkKSArIFwiX19cIjtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gdXNlU3VibWl0KCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgY3VycmVudFJvdXRlSWQgPSBVTlNBRkVfdXNlUm91dGVJZCgpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpO1xuICAgIGxldCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBlbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBib2R5XG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKTtcbiAgICBpZiAob3B0aW9ucy5uYXZpZ2F0ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGxldCBrZXkgPSBvcHRpb25zLmZldGNoZXJLZXkgfHwgZ2V0VW5pcXVlRmV0Y2hlcklkKCk7XG4gICAgICByb3V0ZXIuZmV0Y2goa2V5LCBjdXJyZW50Um91dGVJZCwgb3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBib2R5LFxuICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZSxcbiAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICAgIHN0YXRlOiBvcHRpb25zLnN0YXRlLFxuICAgICAgICBmcm9tUm91dGVJZDogY3VycmVudFJvdXRlSWQsXG4gICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmMsXG4gICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uOiBvcHRpb25zLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBjdXJyZW50Um91dGVJZF0pO1xufVxuLy8gdjc6IEV2ZW50dWFsbHkgd2Ugc2hvdWxkIGRlcHJlY2F0ZSB0aGlzIGVudGlyZWx5IGluIGZhdm9yIG9mIHVzaW5nIHRoZVxuLy8gcm91dGVyIG1ldGhvZCBkaXJlY3RseT9cbmZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oYWN0aW9uLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgcm91dGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlQ29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpO1xuICAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG4gIGxldCBwYXRoID0gX2V4dGVuZHMoe30sIHVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwge1xuICAgIHJlbGF0aXZlXG4gIH0pKTtcbiAgLy8gSWYgbm8gYWN0aW9uIHdhcyBzcGVjaWZpZWQsIGJyb3dzZXJzIHdpbGwgcGVyc2lzdCBjdXJyZW50IHNlYXJjaCBwYXJhbXNcbiAgLy8gd2hlbiBkZXRlcm1pbmluZyB0aGUgcGF0aCwgc28gbWF0Y2ggdGhhdCBiZWhhdmlvclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGlzIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgYW55IGluY2x1ZGVkID9pbmRleCBwYXJhbVxuICAgIC8vIHNpbmNlIGl0IG1pZ2h0IG5vdCBhcHBseSB0byBvdXIgY29udGV4dHVhbCByb3V0ZS4gIFdlIGFkZCBpdCBiYWNrIGJhc2VkXG4gICAgLy8gb24gbWF0Y2gucm91dGUuaW5kZXggYmVsb3dcbiAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgaWYgKHBhcmFtcy5oYXMoXCJpbmRleFwiKSAmJiBwYXJhbXMuZ2V0KFwiaW5kZXhcIikgPT09IFwiXCIpIHtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gVE9ETzogKHY3KSBDaGFuZ2UgdGhlIHVzZUZldGNoZXIgZ2VuZXJpYyBkZWZhdWx0IGZyb20gYGFueWAgdG8gYHVua25vd25gXG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaGVyKF90ZW1wMykge1xuICB2YXIgX3JvdXRlJG1hdGNoZXM7XG4gIGxldCB7XG4gICAga2V5XG4gIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VDb250ZXh0KEZldGNoZXJzQ29udGV4dCk7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZUlkID0gKF9yb3V0ZSRtYXRjaGVzID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlJG1hdGNoZXMucm91dGUuaWQ7XG4gICFmZXRjaGVyRGF0YSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgRmV0Y2hlcnNDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAvLyBGZXRjaGVyIGtleSBoYW5kbGluZ1xuICAvLyBPSyB0byBjYWxsIGNvbmRpdGlvbmFsbHkgdG8gZmVhdHVyZSBkZXRlY3QgYHVzZUlkYFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgbGV0IGRlZmF1bHRLZXkgPSB1c2VJZEltcGwgPyB1c2VJZEltcGwoKSA6IFwiXCI7XG4gIGxldCBbZmV0Y2hlcktleSwgc2V0RmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZShrZXkgfHwgZGVmYXVsdEtleSk7XG4gIGlmIChrZXkgJiYga2V5ICE9PSBmZXRjaGVyS2V5KSB7XG4gICAgc2V0RmV0Y2hlcktleShrZXkpO1xuICB9IGVsc2UgaWYgKCFmZXRjaGVyS2V5KSB7XG4gICAgLy8gV2Ugd2lsbCBvbmx5IGZhbGwgdGhyb3VnaCBoZXJlIHdoZW4gYHVzZUlkYCBpcyBub3QgYXZhaWxhYmxlXG4gICAgc2V0RmV0Y2hlcktleShnZXRVbmlxdWVGZXRjaGVySWQoKSk7XG4gIH1cbiAgLy8gUmVnaXN0cmF0aW9uL2NsZWFudXBcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByb3V0ZXIuZ2V0RmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gVGVsbCB0aGUgcm91dGVyIHdlJ3ZlIHVubW91bnRlZCAtIGlmIHY3X2ZldGNoZXJQZXJzaXN0IGlzIGVuYWJsZWQgdGhpc1xuICAgICAgLy8gd2lsbCBub3QgZGVsZXRlIGltbWVkaWF0ZWx5IGJ1dCBpbnN0ZWFkIHF1ZXVlIHVwIGEgZGVsZXRlIGFmdGVyIHRoZVxuICAgICAgLy8gZmV0Y2hlciByZXR1cm5zIHRvIGFuIGBpZGxlYCBzdGF0ZVxuICAgICAgcm91dGVyLmRlbGV0ZUZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgfTtcbiAgfSwgW3JvdXRlciwgZmV0Y2hlcktleV0pO1xuICAvLyBGZXRjaGVyIGFkZGl0aW9uc1xuICBsZXQgbG9hZCA9IFJlYWN0LnVzZUNhbGxiYWNrKChocmVmLCBvcHRzKSA9PiB7XG4gICAgIXJvdXRlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgfSwgW2ZldGNoZXJLZXksIHJvdXRlSWQsIHJvdXRlcl0pO1xuICBsZXQgc3VibWl0SW1wbCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgc3VibWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soKHRhcmdldCwgb3B0cykgPT4ge1xuICAgIHN1Ym1pdEltcGwodGFyZ2V0LCBfZXh0ZW5kcyh7fSwgb3B0cywge1xuICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgZmV0Y2hlcktleVxuICAgIH0pKTtcbiAgfSwgW2ZldGNoZXJLZXksIHN1Ym1pdEltcGxdKTtcbiAgbGV0IEZldGNoZXJGb3JtID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgICB9XG4gICAgcmV0dXJuIEZldGNoZXJGb3JtO1xuICB9LCBbZmV0Y2hlcktleV0pO1xuICAvLyBFeHBvc2VkIEZldGNoZXJXaXRoQ29tcG9uZW50c1xuICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChmZXRjaGVyS2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIGxldCBkYXRhID0gZmV0Y2hlckRhdGEuZ2V0KGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7XG4gICAgRm9ybTogRmV0Y2hlckZvcm0sXG4gICAgc3VibWl0LFxuICAgIGxvYWRcbiAgfSwgZmV0Y2hlciwge1xuICAgIGRhdGFcbiAgfSksIFtGZXRjaGVyRm9ybSwgc3VibWl0LCBsb2FkLCBmZXRjaGVyLCBkYXRhXSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBBcnJheS5mcm9tKHN0YXRlLmZldGNoZXJzLmVudHJpZXMoKSkubWFwKF9yZWYxMSA9PiB7XG4gICAgbGV0IFtrZXksIGZldGNoZXJdID0gX3JlZjExO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZmV0Y2hlciwge1xuICAgICAga2V5XG4gICAgfSk7XG4gIH0pO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wNCkge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbixcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pO1xuICAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJGYWlsZWQgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlLCA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gd2lsbCBub3Qgd29yayBwcm9wZXJseSAoXCIgKyBlcnJvciArIFwiKS5cIikgOiB2b2lkIDA7XG4gICAgfVxuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpO1xuICAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcbiAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgICAgfVxuICAgIH0sIFtzdG9yYWdlS2V5XSk7XG4gICAgLy8gRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBpbiB0aGUgcm91dGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGxldCBnZXRLZXlXaXRob3V0QmFzZW5hbWUgPSBnZXRLZXkgJiYgYmFzZW5hbWUgIT09IFwiL1wiID8gKGxvY2F0aW9uLCBtYXRjaGVzKSA9PiBnZXRLZXkoIC8vIFN0cmlwIHRoZSBiYXNlbmFtZSB0byBtYXRjaCB1c2VMb2NhdGlvbigpXG4gICAgICBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksIG1hdGNoZXMpIDogZ2V0S2V5O1xuICAgICAgbGV0IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiA9IHJvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyLmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHNhdmVkU2Nyb2xsUG9zaXRpb25zLCAoKSA9PiB3aW5kb3cuc2Nyb2xsWSwgZ2V0S2V5V2l0aG91dEJhc2VuYW1lKTtcbiAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gICAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGdldEtleV0pO1xuICAgIC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gRXhwbGljaXQgZmFsc2UgbWVhbnMgZG9uJ3QgZG8gYW55dGhpbmcgKHVzZWQgZm9yIHN1Ym1pc3Npb25zKVxuICAgICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG4gICAgICBpZiAodHlwZW9mIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpKTtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcbiAgICAgIGlmIChwcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH0sIFtsb2NhdGlvbiwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXRdKTtcbiAgfVxufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgYmVmb3JldW5sb2FkYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBwYWdlaGlkZWAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy4gIFRoaXMgZXZlbnQgaXMgYmV0dGVyIHN1cHBvcnRlZCB0aGFuIGJlZm9yZXVubG9hZCBhY3Jvc3MgYnJvd3NlcnMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZVBhZ2VIaWRlKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogV3JhcHBlciBhcm91bmQgdXNlQmxvY2tlciB0byBzaG93IGEgd2luZG93LmNvbmZpcm0gcHJvbXB0IHRvIHVzZXJzIGluc3RlYWRcbiAqIG9mIGJ1aWxkaW5nIGEgY3VzdG9tIFVJIHdpdGggdXNlQmxvY2tlci5cbiAqXG4gKiBXYXJuaW5nOiBUaGlzIGhhcyAqYSBsb3Qgb2Ygcm91Z2ggZWRnZXMqIGFuZCBiZWhhdmVzIHZlcnkgZGlmZmVyZW50bHkgKGFuZFxuICogdmVyeSBpbmNvcnJlY3RseSBpbiBzb21lIGNhc2VzKSBhY3Jvc3MgYnJvd3NlcnMgaWYgdXNlciBjbGljayBhZGRpdGlvblxuICogYmFjay9mb3J3YXJkIG5hdmlnYXRpb25zIHdoaWxlIHRoZSBjb25maXJtIGlzIG9wZW4uICBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAqL1xuZnVuY3Rpb24gdXNlUHJvbXB0KF9yZWYxMikge1xuICBsZXQge1xuICAgIHdoZW4sXG4gICAgbWVzc2FnZVxuICB9ID0gX3JlZjEyO1xuICBsZXQgYmxvY2tlciA9IHVzZUJsb2NrZXIod2hlbik7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGlzIG5lZWRlZCB0byBhdm9pZCBhIHdlaXJkIFwicmFjZVwiIG9uIFBPUCBuYXZpZ2F0aW9uc1xuICAgICAgICAvLyBiZXR3ZWVuIHRoZSBgd2luZG93Lmhpc3RvcnlgIHJldmVydCBuYXZpZ2F0aW9uIGFuZCB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIGB3aW5kb3cuY29uZmlybWBcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG59XG4vKipcbiAqIFJldHVybiBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgdmlldyB0cmFuc2l0aW9uIHRvIHRoZVxuICogZ2l2ZW4gaHJlZi4gIFlvdSBjYW4gdXNlIHRoaXMgdmFsdWUgdG8gcmVuZGVyIENTUyBjbGFzc2VzIG9yIHZpZXdUcmFuc2l0aW9uTmFtZVxuICogc3R5bGVzIG9udG8geW91ciBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSBocmVmIFRoZSBkZXN0aW5hdGlvbiBocmVmXG4gKiBAcGFyYW0gW29wdHMucmVsYXRpdmVdIFJlbGF0aXZlIHJvdXRpbmcgdHlwZSAoXCJyb3V0ZVwiIHwgXCJwYXRoXCIpXG4gKi9cbmZ1bmN0aW9uIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUodG8sIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgdnRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChWaWV3VHJhbnNpdGlvbkNvbnRleHQpO1xuICAhKHZ0Q29udGV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiYHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGVgIG11c3QgYmUgdXNlZCB3aXRoaW4gYHJlYWN0LXJvdXRlci1kb21gJ3MgYFJvdXRlclByb3ZpZGVyYC4gIFwiICsgXCJEaWQgeW91IGFjY2lkZW50YWxseSBpbXBvcnQgYFJvdXRlclByb3ZpZGVyYCBmcm9tIGByZWFjdC1yb3V0ZXJgP1wiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay51c2VWaWV3VHJhbnNpdGlvblN0YXRlKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogb3B0cy5yZWxhdGl2ZVxuICB9KTtcbiAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBjdXJyZW50UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5uZXh0TG9jYXRpb24ucGF0aG5hbWU7XG4gIC8vIFRyYW5zaXRpb24gaXMgYWN0aXZlIGlmIHdlJ3JlIGdvaW5nIHRvIG9yIGNvbWluZyBmcm9tIHRoZSBpbmRpY2F0ZWRcbiAgLy8gZGVzdGluYXRpb24uICBUaGlzIGVuc3VyZXMgdGhhdCBvdGhlciBQVVNIIG5hdmlnYXRpb25zIHRoYXQgcmV2ZXJzZVxuICAvLyBhbiBpbmRpY2F0ZWQgdHJhbnNpdGlvbiBhcHBseS4gIEkuZS4sIG9uIHRoZSBsaXN0IHZpZXcgeW91IGhhdmU6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvZGV0YWlscy8xXCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIElmIHlvdSBjbGljayB0aGUgYnJlYWRjcnVtYiBiYWNrIHRvIHRoZSBsaXN0IHZpZXc6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvbGlzdFwiIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBXZSBzaG91bGQgYXBwbHkgdGhlIHRyYW5zaXRpb24gYmVjYXVzZSBpdCdzIGluZGljYXRlZCBhcyBhY3RpdmUgZ29pbmdcbiAgLy8gZnJvbSAvbGlzdCAtPiAvZGV0YWlscy8xIGFuZCB0aGVyZWZvcmUgc2hvdWxkIGJlIGFjdGl2ZSBvbiB0aGUgcmV2ZXJzZVxuICAvLyAoZXZlbiB0aG91Z2ggdGhpcyBpc24ndCBzdHJpY3RseSBhIFBPUCByZXZlcnNlKVxuICByZXR1cm4gbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIG5leHRQYXRoKSAhPSBudWxsIHx8IG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBjdXJyZW50UGF0aCkgIT0gbnVsbDtcbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBSb3V0ZXJQcm92aWRlciwgU2Nyb2xsUmVzdG9yYXRpb24sIEZldGNoZXJzQ29udGV4dCBhcyBVTlNBRkVfRmV0Y2hlcnNDb250ZXh0LCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgYXMgVU5TQUZFX1ZpZXdUcmFuc2l0aW9uQ29udGV4dCwgdXNlU2Nyb2xsUmVzdG9yYXRpb24gYXMgVU5TQUZFX3VzZVNjcm9sbFJlc3RvcmF0aW9uLCBjcmVhdGVCcm93c2VyUm91dGVyLCBjcmVhdGVIYXNoUm91dGVyLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCwgdXNlVmlld1RyYW5zaXRpb25TdGF0ZSBhcyB1bnN0YWJsZV91c2VWaWV3VHJhbnNpdGlvblN0YXRlLCB1c2VCZWZvcmVVbmxvYWQsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiaW5mbyIsImVycm9yIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsInNlbGYiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsIl90b1Byb3BlcnR5S2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJyZXMiLCJOdW1iZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwidG9TdHJpbmciLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwibGVuIiwiYXJyMiIsImlzQXJyYXkiLCJSZWFjdCIsIlJlYWN0RE9NIiwiVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyIsIlVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCIsIlVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0IiwiUm91dGVyIiwiVU5TQUZFX3VzZVJvdXRlc0ltcGwiLCJVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQiLCJ1c2VIcmVmIiwidXNlUmVzb2x2ZWRQYXRoIiwidXNlTG9jYXRpb24iLCJ1c2VOYXZpZ2F0ZSIsImNyZWF0ZVBhdGgiLCJVTlNBRkVfdXNlUm91dGVJZCIsIlVOU0FGRV9Sb3V0ZUNvbnRleHQiLCJ1c2VNYXRjaGVzIiwidXNlTmF2aWdhdGlvbiIsInVzZUJsb2NrZXIiLCJBYm9ydGVkRGVmZXJyZWRFcnJvciIsIkF3YWl0IiwiTWVtb3J5Um91dGVyIiwiTmF2aWdhdGUiLCJOYXZpZ2F0aW9uVHlwZSIsIk91dGxldCIsIlJvdXRlIiwiUm91dGVzIiwiVU5TQUZFX0xvY2F0aW9uQ29udGV4dCIsImNyZWF0ZU1lbW9yeVJvdXRlciIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsImNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cyIsImRlZmVyIiwiZ2VuZXJhdGVQYXRoIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJqc29uIiwibWF0Y2hQYXRoIiwibWF0Y2hSb3V0ZXMiLCJwYXJzZVBhdGgiLCJyZWRpcmVjdCIsInJlZGlyZWN0RG9jdW1lbnQiLCJyZW5kZXJNYXRjaGVzIiwicmVzb2x2ZVBhdGgiLCJ1c2VBY3Rpb25EYXRhIiwidXNlQXN5bmNFcnJvciIsInVzZUFzeW5jVmFsdWUiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJ1c2VMb2FkZXJEYXRhIiwidXNlTWF0Y2giLCJ1c2VOYXZpZ2F0aW9uVHlwZSIsInVzZU91dGxldCIsInVzZU91dGxldENvbnRleHQiLCJ1c2VQYXJhbXMiLCJ1c2VSZXZhbGlkYXRvciIsInVzZVJvdXRlRXJyb3IiLCJ1c2VSb3V0ZUxvYWRlckRhdGEiLCJ1c2VSb3V0ZXMiLCJzdHJpcEJhc2VuYW1lIiwiVU5TQUZFX3dhcm5pbmciLCJjcmVhdGVSb3V0ZXIiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsIiwiVU5TQUZFX2ludmFyaWFudCIsImpvaW5QYXRocyIsIklETEVfRkVUQ0hFUiIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInNvdXJjZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaW5kZXhPZiIsImRlZmF1bHRNZXRob2QiLCJkZWZhdWx0RW5jVHlwZSIsImlzSHRtbEVsZW1lbnQiLCJvYmplY3QiLCJ0YWdOYW1lIiwiaXNCdXR0b25FbGVtZW50IiwidG9Mb3dlckNhc2UiLCJpc0Zvcm1FbGVtZW50IiwiaXNJbnB1dEVsZW1lbnQiLCJpc01vZGlmaWVkRXZlbnQiLCJldmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwiYnV0dG9uIiwiY3JlYXRlU2VhcmNoUGFyYW1zIiwiaW5pdCIsIlVSTFNlYXJjaFBhcmFtcyIsInJlZHVjZSIsIm1lbW8iLCJjb25jYXQiLCJtYXAiLCJnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbiIsImxvY2F0aW9uU2VhcmNoIiwiZGVmYXVsdFNlYXJjaFBhcmFtcyIsInNlYXJjaFBhcmFtcyIsIl8iLCJoYXMiLCJnZXRBbGwiLCJhcHBlbmQiLCJfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciIsImlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQiLCJGb3JtRGF0YSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN1cHBvcnRlZEZvcm1FbmNUeXBlcyIsIlNldCIsImdldEZvcm1FbmNUeXBlIiwiZW5jVHlwZSIsImdldEZvcm1TdWJtaXNzaW9uSW5mbyIsImJhc2VuYW1lIiwiYWN0aW9uIiwiZm9ybURhdGEiLCJib2R5IiwiYXR0ciIsImdldEF0dHJpYnV0ZSIsImZvcm0iLCJwcmVmaXgiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsIlJFQUNUX1JPVVRFUl9WRVJTSU9OIiwid2luZG93IiwiX19yZWFjdFJvdXRlclZlcnNpb24iLCJjcmVhdGVCcm93c2VyUm91dGVyIiwicm91dGVzIiwib3B0cyIsImZ1dHVyZSIsInY3X3ByZXBlbmRCYXNlbmFtZSIsImhpc3RvcnkiLCJoeWRyYXRpb25EYXRhIiwicGFyc2VIeWRyYXRpb25EYXRhIiwibWFwUm91dGVQcm9wZXJ0aWVzIiwidW5zdGFibGVfZGF0YVN0cmF0ZWd5IiwidW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3MiLCJpbml0aWFsaXplIiwiY3JlYXRlSGFzaFJvdXRlciIsIl93aW5kb3ciLCJzdGF0ZSIsIl9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YSIsImVycm9ycyIsImRlc2VyaWFsaXplRXJyb3JzIiwiZW50cmllcyIsInNlcmlhbGl6ZWQiLCJfaSIsIl9lbnRyaWVzIiwiX2VudHJpZXMkX2kiLCJ2YWwiLCJfX3R5cGUiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImludGVybmFsIiwiX19zdWJUeXBlIiwiRXJyb3JDb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJzdGFjayIsIlZpZXdUcmFuc2l0aW9uQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJpc1RyYW5zaXRpb25pbmciLCJGZXRjaGVyc0NvbnRleHQiLCJNYXAiLCJTVEFSVF9UUkFOU0lUSU9OIiwic3RhcnRUcmFuc2l0aW9uSW1wbCIsIkZMVVNIX1NZTkMiLCJmbHVzaFN5bmNJbXBsIiwiVVNFX0lEIiwidXNlSWRJbXBsIiwic3RhcnRUcmFuc2l0aW9uU2FmZSIsImNiIiwiZmx1c2hTeW5jU2FmZSIsIkRlZmVycmVkIiwiX3RoaXMiLCJwcm9taXNlIiwicmVhc29uIiwiUm91dGVyUHJvdmlkZXIiLCJfcmVmIiwiZmFsbGJhY2tFbGVtZW50Iiwicm91dGVyIiwiX1JlYWN0JHVzZVN0YXRlIiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwic2V0U3RhdGVJbXBsIiwiX1JlYWN0JHVzZVN0YXRlMyIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJwZW5kaW5nU3RhdGUiLCJzZXRQZW5kaW5nU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGU1IiwiX1JlYWN0JHVzZVN0YXRlNiIsInZ0Q29udGV4dCIsInNldFZ0Q29udGV4dCIsIl9SZWFjdCR1c2VTdGF0ZTciLCJfUmVhY3QkdXNlU3RhdGU4IiwicmVuZGVyRGZkIiwic2V0UmVuZGVyRGZkIiwiX1JlYWN0JHVzZVN0YXRlOSIsIl9SZWFjdCR1c2VTdGF0ZTEwIiwidHJhbnNpdGlvbiIsInNldFRyYW5zaXRpb24iLCJfUmVhY3QkdXNlU3RhdGUxMSIsIl9SZWFjdCR1c2VTdGF0ZTEyIiwiaW50ZXJydXB0aW9uIiwic2V0SW50ZXJydXB0aW9uIiwiZmV0Y2hlckRhdGEiLCJ1c2VSZWYiLCJfcmVmMTMiLCJ2N19zdGFydFRyYW5zaXRpb24iLCJvcHRJblN0YXJ0VHJhbnNpdGlvbiIsInVzZUNhbGxiYWNrIiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsIl9yZWYyIiwiZGVsZXRlZEZldGNoZXJzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hTeW5jIiwidmlld1RyYW5zaXRpb25PcHRzIiwidW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzIiwiY3VycmVudCIsImZldGNoZXJzIiwiZmV0Y2hlciIsInNldCIsImlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSIsInN0YXJ0Vmlld1RyYW5zaXRpb24iLCJza2lwVHJhbnNpdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsIm5leHRMb2NhdGlvbiIsImZpbmlzaGVkIiwidXNlTGF5b3V0RWZmZWN0Iiwic3Vic2NyaWJlIiwidXNlRWZmZWN0IiwicmVuZGVyUHJvbWlzZSIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwibG9jYXRpb24iLCJ2N19wYXJ0aWFsSHlkcmF0aW9uIiwibmF2aWdhdG9yIiwidXNlTWVtbyIsImNyZWF0ZUhyZWYiLCJlbmNvZGVMb2NhdGlvbiIsImdvIiwibmF2aWdhdGUiLCJ0byIsInByZXZlbnRTY3JvbGxSZXNldCIsInJlcGxhY2UiLCJkYXRhUm91dGVyQ29udGV4dCIsIkZyYWdtZW50IiwiUHJvdmlkZXIiLCJuYXZpZ2F0aW9uVHlwZSIsImhpc3RvcnlBY3Rpb24iLCJ2N19yZWxhdGl2ZVNwbGF0UGF0aCIsImluaXRpYWxpemVkIiwiRGF0YVJvdXRlcyIsIl9yZWYzIiwiQnJvd3NlclJvdXRlciIsIl9yZWY0IiwiY2hpbGRyZW4iLCJoaXN0b3J5UmVmIiwidjVDb21wYXQiLCJfUmVhY3QkdXNlU3RhdGUxMyIsIl9SZWFjdCR1c2VTdGF0ZTE0IiwiX3JlZjE1IiwibGlzdGVuIiwiSGFzaFJvdXRlciIsIl9yZWY1IiwiX1JlYWN0JHVzZVN0YXRlMTUiLCJfUmVhY3QkdXNlU3RhdGUxNiIsIl9yZWYxNiIsIkhpc3RvcnlSb3V0ZXIiLCJfcmVmNiIsIl9SZWFjdCR1c2VTdGF0ZTE3IiwiX1JlYWN0JHVzZVN0YXRlMTgiLCJfcmVmMTciLCJpc0Jyb3dzZXIiLCJBQlNPTFVURV9VUkxfUkVHRVgiLCJMaW5rIiwiZm9yd2FyZFJlZiIsIkxpbmtXaXRoUmVmIiwiX3JlZjciLCJyZWYiLCJvbkNsaWNrIiwicmVsYXRpdmUiLCJyZWxvYWREb2N1bWVudCIsInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uIiwicmVzdCIsIl9SZWFjdCR1c2VDb250ZXh0IiwidXNlQ29udGV4dCIsImFic29sdXRlSHJlZiIsImlzRXh0ZXJuYWwiLCJjdXJyZW50VXJsIiwiVVJMIiwiaHJlZiIsInRhcmdldFVybCIsInN0YXJ0c1dpdGgiLCJwcm90b2NvbCIsInBhdGgiLCJwYXRobmFtZSIsIm9yaWdpbiIsInNlYXJjaCIsImhhc2giLCJpbnRlcm5hbE9uQ2xpY2siLCJ1c2VMaW5rQ2xpY2tIYW5kbGVyIiwiaGFuZGxlQ2xpY2siLCJkZWZhdWx0UHJldmVudGVkIiwiTmF2TGluayIsIk5hdkxpbmtXaXRoUmVmIiwiX3JlZjgiLCJfcmVmOCRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50UHJvcCIsIl9yZWY4JGNhc2VTZW5zaXRpdmUiLCJjYXNlU2Vuc2l0aXZlIiwiX3JlZjgkY2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiY2xhc3NOYW1lUHJvcCIsIl9yZWY4JGVuZCIsImVuZCIsInN0eWxlUHJvcCIsInN0eWxlIiwicm91dGVyU3RhdGUiLCJfUmVhY3QkdXNlQ29udGV4dDIiLCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlIiwidG9QYXRobmFtZSIsImxvY2F0aW9uUGF0aG5hbWUiLCJuZXh0TG9jYXRpb25QYXRobmFtZSIsIm5hdmlnYXRpb24iLCJlbmRTbGFzaFBvc2l0aW9uIiwiZW5kc1dpdGgiLCJpc0FjdGl2ZSIsImlzUGVuZGluZyIsInJlbmRlclByb3BzIiwiYXJpYUN1cnJlbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIkZvcm0iLCJfcmVmOSIsImZvcndhcmRlZFJlZiIsImZldGNoZXJLZXkiLCJfcmVmOSRtZXRob2QiLCJvblN1Ym1pdCIsInN1Ym1pdCIsInVzZVN1Ym1pdCIsImZvcm1BY3Rpb24iLCJ1c2VGb3JtQWN0aW9uIiwiZm9ybU1ldGhvZCIsInN1Ym1pdEhhbmRsZXIiLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdHRlciIsIm5hdGl2ZUV2ZW50Iiwic3VibWl0TWV0aG9kIiwiY3VycmVudFRhcmdldCIsIlNjcm9sbFJlc3RvcmF0aW9uIiwiX3JlZjEwIiwiZ2V0S2V5Iiwic3RvcmFnZUtleSIsInVzZVNjcm9sbFJlc3RvcmF0aW9uIiwiRGF0YVJvdXRlckhvb2siLCJEYXRhUm91dGVyU3RhdGVIb29rIiwiZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvciIsImhvb2tOYW1lIiwidXNlRGF0YVJvdXRlckNvbnRleHQiLCJjdHgiLCJ1c2VEYXRhUm91dGVyU3RhdGUiLCJfdGVtcCIsIl9yZWYxOCIsInJlcGxhY2VQcm9wIiwidXNlU2VhcmNoUGFyYW1zIiwiZGVmYXVsdEluaXQiLCJkZWZhdWx0U2VhcmNoUGFyYW1zUmVmIiwiaGFzU2V0U2VhcmNoUGFyYW1zUmVmIiwic2V0U2VhcmNoUGFyYW1zIiwibmV4dEluaXQiLCJuYXZpZ2F0ZU9wdGlvbnMiLCJuZXdTZWFyY2hQYXJhbXMiLCJ2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uIiwiZmV0Y2hlcklkIiwiZ2V0VW5pcXVlRmV0Y2hlcklkIiwiX3VzZURhdGFSb3V0ZXJDb250ZXh0IiwiVXNlU3VibWl0IiwiX1JlYWN0JHVzZUNvbnRleHQzIiwiY3VycmVudFJvdXRlSWQiLCJvcHRpb25zIiwiX2dldEZvcm1TdWJtaXNzaW9uSW5mIiwiZmV0Y2giLCJmb3JtRW5jVHlwZSIsImZyb21Sb3V0ZUlkIiwiX3RlbXAyIiwiX3JlZjE5IiwiX1JlYWN0JHVzZUNvbnRleHQ0Iiwicm91dGVDb250ZXh0IiwiX3JvdXRlQ29udGV4dCRtYXRjaGVzIiwibWF0Y2hlcyIsIl9yb3V0ZUNvbnRleHQkbWF0Y2hlczIiLCJtYXRjaCIsInBhcmFtcyIsImdldCIsInJvdXRlIiwiaW5kZXgiLCJ1c2VGZXRjaGVyIiwiX3RlbXAzIiwiX3JvdXRlJG1hdGNoZXMiLCJfcmVmMjAiLCJfdXNlRGF0YVJvdXRlckNvbnRleHQyIiwiVXNlRmV0Y2hlciIsInJvdXRlSWQiLCJpZCIsImRlZmF1bHRLZXkiLCJfUmVhY3QkdXNlU3RhdGUxOSIsIl9SZWFjdCR1c2VTdGF0ZTIwIiwic2V0RmV0Y2hlcktleSIsImdldEZldGNoZXIiLCJkZWxldGVGZXRjaGVyIiwibG9hZCIsInN1Ym1pdEltcGwiLCJGZXRjaGVyRm9ybSIsImZldGNoZXJXaXRoQ29tcG9uZW50cyIsInVzZUZldGNoZXJzIiwiVXNlRmV0Y2hlcnMiLCJfcmVmMTEiLCJfcmVmMjEiLCJTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkiLCJzYXZlZFNjcm9sbFBvc2l0aW9ucyIsIl90ZW1wNCIsIl9yZWYyMiIsIl91c2VEYXRhUm91dGVyQ29udGV4dDMiLCJVc2VTY3JvbGxSZXN0b3JhdGlvbiIsIl91c2VEYXRhUm91dGVyU3RhdGUiLCJyZXN0b3JlU2Nyb2xsUG9zaXRpb24iLCJfUmVhY3QkdXNlQ29udGV4dDUiLCJzY3JvbGxSZXN0b3JhdGlvbiIsInVzZVBhZ2VIaWRlIiwic2Nyb2xsWSIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXNzaW9uUG9zaXRpb25zIiwiZ2V0SXRlbSIsInBhcnNlIiwiZ2V0S2V5V2l0aG91dEJhc2VuYW1lIiwiZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uIiwiZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24iLCJzY3JvbGxUbyIsImVsIiwiZ2V0RWxlbWVudEJ5SWQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzY3JvbGxJbnRvVmlldyIsInVzZUJlZm9yZVVubG9hZCIsImNhbGxiYWNrIiwiX3JlZjIzIiwiY2FwdHVyZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX3JlZjI0IiwidXNlUHJvbXB0IiwiX3JlZjEyIiwid2hlbiIsImJsb2NrZXIiLCJwcm9jZWVkIiwiY29uZmlybSIsInNldFRpbWVvdXQiLCJfdXNlRGF0YVJvdXRlckNvbnRleHQ0IiwiY3VycmVudFBhdGgiLCJuZXh0UGF0aCIsIlVOU0FGRV9GZXRjaGVyc0NvbnRleHQiLCJVTlNBRkVfVmlld1RyYW5zaXRpb25Db250ZXh0IiwiVU5TQUZFX3VzZVNjcm9sbFJlc3RvcmF0aW9uIiwidW5zdGFibGVfSGlzdG9yeVJvdXRlciIsInVuc3RhYmxlX3VzZVByb21wdCIsInVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-router-dom/dist/index.js\n");

/***/ })

};
;